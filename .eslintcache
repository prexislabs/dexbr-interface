[{"/home/qualinfo/Dev/prexis/dexbr-ui/src/index.tsx":"1","/home/qualinfo/Dev/prexis/dexbr-ui/src/i18n.ts":"2","/home/qualinfo/Dev/prexis/dexbr-ui/src/state/application/updater.ts":"3","/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/App.tsx":"4","/home/qualinfo/Dev/prexis/dexbr-ui/src/state/transactions/updater.tsx":"5","/home/qualinfo/Dev/prexis/dexbr-ui/src/state/user/updater.tsx":"6","/home/qualinfo/Dev/prexis/dexbr-ui/src/state/multicall/updater.tsx":"7","/home/qualinfo/Dev/prexis/dexbr-ui/src/state/index.ts":"8","/home/qualinfo/Dev/prexis/dexbr-ui/src/constants/index.ts":"9","/home/qualinfo/Dev/prexis/dexbr-ui/src/state/application/actions.ts":"10","/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/useDebounce.ts":"11","/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/useIsWindowVisible.ts":"12","/home/qualinfo/Dev/prexis/dexbr-ui/src/theme/index.tsx":"13","/home/qualinfo/Dev/prexis/dexbr-ui/src/state/transactions/actions.ts":"14","/home/qualinfo/Dev/prexis/dexbr-ui/src/state/application/hooks.ts":"15","/home/qualinfo/Dev/prexis/dexbr-ui/src/state/user/actions.ts":"16","/home/qualinfo/Dev/prexis/dexbr-ui/src/state/multicall/actions.ts":"17","/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/useContract.ts":"18","/home/qualinfo/Dev/prexis/dexbr-ui/src/utils/chunkArray.ts":"19","/home/qualinfo/Dev/prexis/dexbr-ui/src/utils/retry.ts":"20","/home/qualinfo/Dev/prexis/dexbr-ui/src/theme/DarkModeQueryParamReader.tsx":"21","/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/AddLiquidity/redirects.tsx":"22","/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/MigrateV1/RemoveV1Exchange.tsx":"23","/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/MigrateV1/MigrateV1Exchange.tsx":"24","/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/Swap/redirects.tsx":"25","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/analytics/GoogleAnalyticsReporter.tsx":"26","/home/qualinfo/Dev/prexis/dexbr-ui/src/state/application/reducer.ts":"27","/home/qualinfo/Dev/prexis/dexbr-ui/src/state/transactions/reducer.ts":"28","/home/qualinfo/Dev/prexis/dexbr-ui/src/state/user/reducer.ts":"29","/home/qualinfo/Dev/prexis/dexbr-ui/src/state/multicall/reducer.ts":"30","/home/qualinfo/Dev/prexis/dexbr-ui/src/state/mint/reducer.ts":"31","/home/qualinfo/Dev/prexis/dexbr-ui/src/state/swap/reducer.ts":"32","/home/qualinfo/Dev/prexis/dexbr-ui/src/state/burn/reducer.ts":"33","/home/qualinfo/Dev/prexis/dexbr-ui/src/constants/tokens/mainnet.ts":"34","/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/index.ts":"35","/home/qualinfo/Dev/prexis/dexbr-ui/src/constants/abis/erc20.ts":"36","/home/qualinfo/Dev/prexis/dexbr-ui/src/constants/abis/migrator.ts":"37","/home/qualinfo/Dev/prexis/dexbr-ui/src/theme/components.tsx":"38","/home/qualinfo/Dev/prexis/dexbr-ui/src/state/user/hooks.tsx":"39","/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/MigrateV1/index.tsx":"40","/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/AddLiquidity/index.tsx":"41","/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/Swap/index.tsx":"42","/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/PoolFinder/index.tsx":"43","/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/Pool/index.tsx":"44","/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/RemoveLiquidity/index.tsx":"45","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Web3ReactManager/index.tsx":"46","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Popups/index.tsx":"47","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Header/index.tsx":"48","/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/MigrateV1/EmptyState.tsx":"49","/home/qualinfo/Dev/prexis/dexbr-ui/src/state/wallet/hooks.ts":"50","/home/qualinfo/Dev/prexis/dexbr-ui/src/state/multicall/hooks.ts":"51","/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/AppBody.tsx":"52","/home/qualinfo/Dev/prexis/dexbr-ui/src/state/transactions/hooks.tsx":"53","/home/qualinfo/Dev/prexis/dexbr-ui/src/connectors/index.ts":"54","/home/qualinfo/Dev/prexis/dexbr-ui/src/state/burn/actions.ts":"55","/home/qualinfo/Dev/prexis/dexbr-ui/src/state/swap/actions.ts":"56","/home/qualinfo/Dev/prexis/dexbr-ui/src/utils/index.ts":"57","/home/qualinfo/Dev/prexis/dexbr-ui/src/constants/multicall/index.ts":"58","/home/qualinfo/Dev/prexis/dexbr-ui/src/constants/v1/index.ts":"59","/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/Tokens.ts":"60","/home/qualinfo/Dev/prexis/dexbr-ui/src/utils/prices.ts":"61","/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/useToggledVersion.ts":"62","/home/qualinfo/Dev/prexis/dexbr-ui/src/utils/maxAmountSpend.ts":"63","/home/qualinfo/Dev/prexis/dexbr-ui/src/state/swap/hooks.ts":"64","/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/useSwapCallback.ts":"65","/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/useENSAddress.ts":"66","/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/useApproveCallback.ts":"67","/home/qualinfo/Dev/prexis/dexbr-ui/src/data/V1.ts":"68","/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/AddLiquidity/PoolPriceBar.tsx":"69","/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/Pool/styleds.tsx":"70","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/TokenLogo/index.tsx":"71","/home/qualinfo/Dev/prexis/dexbr-ui/src/connectors/NetworkConnector.ts":"72","/home/qualinfo/Dev/prexis/dexbr-ui/src/connectors/Fortmatic.ts":"73","/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/useParsedQueryString.ts":"74","/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/useENS.ts":"75","/home/qualinfo/Dev/prexis/dexbr-ui/src/data/Allowances.ts":"76","/home/qualinfo/Dev/prexis/dexbr-ui/src/state/mint/actions.ts":"77","/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/Trades.ts":"78","/home/qualinfo/Dev/prexis/dexbr-ui/src/state/burn/hooks.ts":"79","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Web3Status/index.tsx":"80","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Row/index.tsx":"81","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/swap/styleds.ts":"82","/home/qualinfo/Dev/prexis/dexbr-ui/src/data/Reserves.ts":"83","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Column/index.tsx":"84","/home/qualinfo/Dev/prexis/dexbr-ui/src/constants/tokens/index.ts":"85","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/SearchModal/TokenSearchModal.tsx":"86","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/swap/BetterTradeLink.tsx":"87","/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/useENSName.ts":"88","/home/qualinfo/Dev/prexis/dexbr-ui/src/data/TotalSupply.ts":"89","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Menu/index.tsx":"90","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Card/index.tsx":"91","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Settings/index.tsx":"92","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/TxnPopup/index.tsx":"93","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/DoubleLogo/index.tsx":"94","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Loader/index.tsx":"95","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Slider/index.tsx":"96","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/PositionCard/index.tsx":"97","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/NavigationTabs/index.tsx":"98","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/CurrencyInputPanel/index.tsx":"99","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/ConfirmationModal/index.tsx":"100","/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/useSocksBalance.ts":"101","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Button/index.tsx":"102","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/QuestionHelper/index.tsx":"103","/home/qualinfo/Dev/prexis/dexbr-ui/src/constants/tokens/goerli.ts":"104","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/SearchModal/sorting.ts":"105","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/SearchModal/filtering.ts":"106","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/TokenWarningCard/index.tsx":"107","/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/useInterval.ts":"108","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/SearchModal/SortButton.tsx":"109","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/SearchModal/styleds.tsx":"110","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/SearchModal/TokenList.tsx":"111","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/SearchModal/CommonBases.tsx":"112","/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/useToggle.ts":"113","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/NumericalInput/index.tsx":"114","/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/AddLiquidity/currencyId.ts":"115","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/WalletModal/index.tsx":"116","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Identicon/index.tsx":"117","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Tooltip/index.tsx":"118","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Modal/index.tsx":"119","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Toggle/index.tsx":"120","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/SlippageTabs/index.tsx":"121","/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/usePrevious.ts":"122","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/WalletModal/PendingView.tsx":"123","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/WalletModal/Option.tsx":"124","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/AccountDetails/index.tsx":"125","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Popover/index.tsx":"126","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/AccountDetails/Transaction.tsx":"127","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/AccountDetails/Copy.tsx":"128","/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/useCopyClipboard.ts":"129","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/swap/confirmPriceImpactWithoutFee.ts":"130","/home/qualinfo/Dev/prexis/dexbr-ui/src/state/mint/hooks.ts":"131","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/swap/TradePrice.tsx":"132","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/swap/SwapModalHeader.tsx":"133","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/swap/SwapModalFooter.tsx":"134","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/swap/AdvancedSwapDetailsDropdown.tsx":"135","/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/AddLiquidity/ConfirmAddModalBottom.tsx":"136","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/PositionCard/V1.tsx":"137","/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/useLast.ts":"138","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/AddressInputPanel/index.tsx":"139","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/swap/FormattedPriceImpact.tsx":"140","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/swap/AdvancedSwapDetails.tsx":"141","/home/qualinfo/Dev/prexis/dexbr-ui/src/components/swap/SwapRoute.tsx":"142","/home/qualinfo/Dev/prexis/dexbr-interface/src/index.tsx":"143","/home/qualinfo/Dev/prexis/dexbr-interface/src/i18n.ts":"144","/home/qualinfo/Dev/prexis/dexbr-interface/src/state/application/updater.ts":"145","/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/App.tsx":"146","/home/qualinfo/Dev/prexis/dexbr-interface/src/state/user/updater.tsx":"147","/home/qualinfo/Dev/prexis/dexbr-interface/src/state/transactions/updater.tsx":"148","/home/qualinfo/Dev/prexis/dexbr-interface/src/state/multicall/updater.tsx":"149","/home/qualinfo/Dev/prexis/dexbr-interface/src/state/index.ts":"150","/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/useDebounce.ts":"151","/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/useIsWindowVisible.ts":"152","/home/qualinfo/Dev/prexis/dexbr-interface/src/state/application/actions.ts":"153","/home/qualinfo/Dev/prexis/dexbr-interface/src/constants/index.ts":"154","/home/qualinfo/Dev/prexis/dexbr-interface/src/theme/index.tsx":"155","/home/qualinfo/Dev/prexis/dexbr-interface/src/state/user/actions.ts":"156","/home/qualinfo/Dev/prexis/dexbr-interface/src/state/transactions/actions.ts":"157","/home/qualinfo/Dev/prexis/dexbr-interface/src/state/application/hooks.ts":"158","/home/qualinfo/Dev/prexis/dexbr-interface/src/state/multicall/actions.ts":"159","/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/useContract.ts":"160","/home/qualinfo/Dev/prexis/dexbr-interface/src/utils/chunkArray.ts":"161","/home/qualinfo/Dev/prexis/dexbr-interface/src/utils/retry.ts":"162","/home/qualinfo/Dev/prexis/dexbr-interface/src/theme/DarkModeQueryParamReader.tsx":"163","/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/AddLiquidity/redirects.tsx":"164","/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/Swap/redirects.tsx":"165","/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/MigrateV1/RemoveV1Exchange.tsx":"166","/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/MigrateV1/MigrateV1Exchange.tsx":"167","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/analytics/GoogleAnalyticsReporter.tsx":"168","/home/qualinfo/Dev/prexis/dexbr-interface/src/state/application/reducer.ts":"169","/home/qualinfo/Dev/prexis/dexbr-interface/src/state/user/reducer.ts":"170","/home/qualinfo/Dev/prexis/dexbr-interface/src/state/transactions/reducer.ts":"171","/home/qualinfo/Dev/prexis/dexbr-interface/src/state/multicall/reducer.ts":"172","/home/qualinfo/Dev/prexis/dexbr-interface/src/state/mint/reducer.ts":"173","/home/qualinfo/Dev/prexis/dexbr-interface/src/state/swap/reducer.ts":"174","/home/qualinfo/Dev/prexis/dexbr-interface/src/state/burn/reducer.ts":"175","/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/index.ts":"176","/home/qualinfo/Dev/prexis/dexbr-interface/src/constants/tokens/mainnet.ts":"177","/home/qualinfo/Dev/prexis/dexbr-interface/src/constants/abis/erc20.ts":"178","/home/qualinfo/Dev/prexis/dexbr-interface/src/constants/abis/migrator.ts":"179","/home/qualinfo/Dev/prexis/dexbr-interface/src/theme/components.tsx":"180","/home/qualinfo/Dev/prexis/dexbr-interface/src/state/user/hooks.tsx":"181","/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/MigrateV1/index.tsx":"182","/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/AddLiquidity/index.tsx":"183","/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/Pool/index.tsx":"184","/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/RemoveLiquidity/index.tsx":"185","/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/Swap/index.tsx":"186","/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/PoolFinder/index.tsx":"187","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Popups/index.tsx":"188","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Web3ReactManager/index.tsx":"189","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Header/index.tsx":"190","/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/useApproveCallback.ts":"191","/home/qualinfo/Dev/prexis/dexbr-interface/src/state/multicall/hooks.ts":"192","/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/Tokens.ts":"193","/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/MigrateV1/EmptyState.tsx":"194","/home/qualinfo/Dev/prexis/dexbr-interface/src/state/wallet/hooks.ts":"195","/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/AppBody.tsx":"196","/home/qualinfo/Dev/prexis/dexbr-interface/src/data/TotalSupply.ts":"197","/home/qualinfo/Dev/prexis/dexbr-interface/src/data/Reserves.ts":"198","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/swap/styleds.ts":"199","/home/qualinfo/Dev/prexis/dexbr-interface/src/state/transactions/hooks.tsx":"200","/home/qualinfo/Dev/prexis/dexbr-interface/src/state/mint/actions.ts":"201","/home/qualinfo/Dev/prexis/dexbr-interface/src/state/swap/actions.ts":"202","/home/qualinfo/Dev/prexis/dexbr-interface/src/state/burn/actions.ts":"203","/home/qualinfo/Dev/prexis/dexbr-interface/src/connectors/index.ts":"204","/home/qualinfo/Dev/prexis/dexbr-interface/src/utils/index.ts":"205","/home/qualinfo/Dev/prexis/dexbr-interface/src/constants/multicall/index.ts":"206","/home/qualinfo/Dev/prexis/dexbr-interface/src/constants/v1/index.ts":"207","/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/AddLiquidity/PoolPriceBar.tsx":"208","/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/Pool/styleds.tsx":"209","/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/useToggledVersion.ts":"210","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/TokenLogo/index.tsx":"211","/home/qualinfo/Dev/prexis/dexbr-interface/src/utils/prices.ts":"212","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Row/index.tsx":"213","/home/qualinfo/Dev/prexis/dexbr-interface/src/connectors/Fortmatic.ts":"214","/home/qualinfo/Dev/prexis/dexbr-interface/src/connectors/NetworkConnector.ts":"215","/home/qualinfo/Dev/prexis/dexbr-interface/src/data/V1.ts":"216","/home/qualinfo/Dev/prexis/dexbr-interface/src/data/Allowances.ts":"217","/home/qualinfo/Dev/prexis/dexbr-interface/src/constants/tokens/index.ts":"218","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Web3Status/index.tsx":"219","/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/useParsedQueryString.ts":"220","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Menu/index.tsx":"221","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Settings/index.tsx":"222","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Card/index.tsx":"223","/home/qualinfo/Dev/prexis/dexbr-interface/src/utils/maxAmountSpend.ts":"224","/home/qualinfo/Dev/prexis/dexbr-interface/src/state/swap/hooks.ts":"225","/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/useSwapCallback.ts":"226","/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/useENSAddress.ts":"227","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Loader/index.tsx":"228","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/TxnPopup/index.tsx":"229","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Column/index.tsx":"230","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/SearchModal/TokenSearchModal.tsx":"231","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/NumericalInput/index.tsx":"232","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/swap/confirmPriceImpactWithoutFee.ts":"233","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/swap/BetterTradeLink.tsx":"234","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/swap/TradePrice.tsx":"235","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/swap/SwapModalHeader.tsx":"236","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/swap/SwapModalFooter.tsx":"237","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/swap/AdvancedSwapDetailsDropdown.tsx":"238","/home/qualinfo/Dev/prexis/dexbr-interface/src/state/burn/hooks.ts":"239","/home/qualinfo/Dev/prexis/dexbr-interface/src/constants/tokens/goerli.ts":"240","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/DoubleLogo/index.tsx":"241","/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/Trades.ts":"242","/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/useENS.ts":"243","/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/useToggle.ts":"244","/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/useInterval.ts":"245","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/PositionCard/index.tsx":"246","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/NavigationTabs/index.tsx":"247","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Button/index.tsx":"248","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/TokenWarningCard/index.tsx":"249","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/SearchModal/sorting.ts":"250","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/SearchModal/SortButton.tsx":"251","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/SearchModal/TokenList.tsx":"252","/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/useLast.ts":"253","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/SearchModal/styleds.tsx":"254","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/SearchModal/filtering.ts":"255","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/swap/FormattedPriceImpact.tsx":"256","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/swap/AdvancedSwapDetails.tsx":"257","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/CurrencyInputPanel/index.tsx":"258","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/ConfirmationModal/index.tsx":"259","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/AddressInputPanel/index.tsx":"260","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Slider/index.tsx":"261","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/SearchModal/CommonBases.tsx":"262","/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/useSocksBalance.ts":"263","/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/useENSName.ts":"264","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Modal/index.tsx":"265","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/SlippageTabs/index.tsx":"266","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Toggle/index.tsx":"267","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/QuestionHelper/index.tsx":"268","/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/AddLiquidity/currencyId.ts":"269","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Tooltip/index.tsx":"270","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/swap/SwapRoute.tsx":"271","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Identicon/index.tsx":"272","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/WalletModal/index.tsx":"273","/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/usePrevious.ts":"274","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/WalletModal/Option.tsx":"275","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/WalletModal/PendingView.tsx":"276","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Popover/index.tsx":"277","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/AccountDetails/index.tsx":"278","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/AccountDetails/Transaction.tsx":"279","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/AccountDetails/Copy.tsx":"280","/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/useCopyClipboard.ts":"281","/home/qualinfo/Dev/prexis/dexbr-interface/src/state/mint/hooks.ts":"282","/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/AddLiquidity/ConfirmAddModalBottom.tsx":"283","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/PositionCard/V1.tsx":"284"},{"size":2169,"mtime":1673957753323,"results":"285","hashOfConfig":"286"},{"size":509,"mtime":1673957753323,"results":"287","hashOfConfig":"286"},{"size":1894,"mtime":1673957753327,"results":"288","hashOfConfig":"286"},{"size":3355,"mtime":1673957753323,"results":"289","hashOfConfig":"286"},{"size":2146,"mtime":1673957753327,"results":"290","hashOfConfig":"286"},{"size":1014,"mtime":1673957753327,"results":"291","hashOfConfig":"286"},{"size":6621,"mtime":1673957753327,"results":"292","hashOfConfig":"286"},{"size":944,"mtime":1673957753327,"results":"293","hashOfConfig":"286"},{"size":5634,"mtime":1673957753319,"results":"294","hashOfConfig":"286"},{"size":803,"mtime":1673957753327,"results":"295","hashOfConfig":"286"},{"size":711,"mtime":1673957753323,"results":"296","hashOfConfig":"286"},{"size":562,"mtime":1673957753323,"results":"297","hashOfConfig":"286"},{"size":5760,"mtime":1673957753327,"results":"298","hashOfConfig":"286"},{"size":702,"mtime":1673957753327,"results":"299","hashOfConfig":"286"},{"size":1874,"mtime":1673957753327,"results":"300","hashOfConfig":"286"},{"size":1435,"mtime":1673957753327,"results":"301","hashOfConfig":"286"},{"size":1633,"mtime":1673957753327,"results":"302","hashOfConfig":"286"},{"size":2705,"mtime":1673957753323,"results":"303","hashOfConfig":"286"},{"size":523,"mtime":1673957753327,"results":"304","hashOfConfig":"286"},{"size":884,"mtime":1673957753331,"results":"305","hashOfConfig":"286"},{"size":914,"mtime":1673957753327,"results":"306","hashOfConfig":"286"},{"size":1242,"mtime":1673957753323,"results":"307","hashOfConfig":"286"},{"size":7132,"mtime":1673957753323,"results":"308","hashOfConfig":"286"},{"size":14799,"mtime":1673957753323,"results":"309","hashOfConfig":"286"},{"size":850,"mtime":1673957753327,"results":"310","hashOfConfig":"286"},{"size":386,"mtime":1673957753319,"results":"311","hashOfConfig":"286"},{"size":1596,"mtime":1673957753327,"results":"312","hashOfConfig":"286"},{"size":1656,"mtime":1673957753327,"results":"313","hashOfConfig":"286"},{"size":4955,"mtime":1673957753327,"results":"314","hashOfConfig":"286"},{"size":3940,"mtime":1673957753327,"results":"315","hashOfConfig":"286"},{"size":1283,"mtime":1673957753327,"results":"316","hashOfConfig":"286"},{"size":2413,"mtime":1673957753327,"results":"317","hashOfConfig":"286"},{"size":1836,"mtime":1673957753327,"results":"318","hashOfConfig":"286"},{"size":12455,"mtime":1673957753323,"results":"319","hashOfConfig":"286"},{"size":3269,"mtime":1673957753323,"results":"320","hashOfConfig":"286"},{"size":350,"mtime":1673957753319,"results":"321","hashOfConfig":"286"},{"size":157,"mtime":1673957753319,"results":"322","hashOfConfig":"286"},{"size":3709,"mtime":1673957753327,"results":"323","hashOfConfig":"286"},{"size":7668,"mtime":1673957753327,"results":"324","hashOfConfig":"286"},{"size":4609,"mtime":1673957753323,"results":"325","hashOfConfig":"286"},{"size":17462,"mtime":1673957753323,"results":"326","hashOfConfig":"286"},{"size":16694,"mtime":1673957753327,"results":"327","hashOfConfig":"286"},{"size":5706,"mtime":1673957753327,"results":"328","hashOfConfig":"286"},{"size":4730,"mtime":1673957753327,"results":"329","hashOfConfig":"286"},{"size":23188,"mtime":1673957753327,"results":"330","hashOfConfig":"286"},{"size":2266,"mtime":1673957753319,"results":"331","hashOfConfig":"286"},{"size":4395,"mtime":1673957753319,"results":"332","hashOfConfig":"286"},{"size":5648,"mtime":1673957753315,"results":"333","hashOfConfig":"286"},{"size":344,"mtime":1673957753323,"results":"334","hashOfConfig":"286"},{"size":5296,"mtime":1673957753327,"results":"335","hashOfConfig":"286"},{"size":7785,"mtime":1673957753327,"results":"336","hashOfConfig":"286"},{"size":598,"mtime":1673957753323,"results":"337","hashOfConfig":"286"},{"size":2494,"mtime":1673957753327,"results":"338","hashOfConfig":"286"},{"size":1620,"mtime":1673957753319,"results":"339","hashOfConfig":"286"},{"size":468,"mtime":1673957753327,"results":"340","hashOfConfig":"286"},{"size":632,"mtime":1673957753327,"results":"341","hashOfConfig":"286"},{"size":3855,"mtime":1673957753327,"results":"342","hashOfConfig":"286"},{"size":278,"mtime":1673957753319,"results":"343","hashOfConfig":"286"},{"size":569,"mtime":1673957753323,"results":"344","hashOfConfig":"286"},{"size":3728,"mtime":1673957753323,"results":"345","hashOfConfig":"286"},{"size":3023,"mtime":1673957753327,"results":"346","hashOfConfig":"286"},{"size":393,"mtime":1673957753323,"results":"347","hashOfConfig":"286"},{"size":638,"mtime":1673957753327,"results":"348","hashOfConfig":"286"},{"size":8762,"mtime":1673957753327,"results":"349","hashOfConfig":"286"},{"size":12910,"mtime":1673957753323,"results":"350","hashOfConfig":"286"},{"size":1188,"mtime":1673957753323,"results":"351","hashOfConfig":"286"},{"size":4163,"mtime":1673957753323,"results":"352","hashOfConfig":"286"},{"size":5925,"mtime":1673957753323,"results":"353","hashOfConfig":"286"},{"size":1890,"mtime":1673957753323,"results":"354","hashOfConfig":"286"},{"size":1135,"mtime":1673957753327,"results":"355","hashOfConfig":"286"},{"size":2511,"mtime":1673957753319,"results":"356","hashOfConfig":"286"},{"size":3454,"mtime":1673957753319,"results":"357","hashOfConfig":"286"},{"size":1416,"mtime":1673957753319,"results":"358","hashOfConfig":"286"},{"size":359,"mtime":1673957753323,"results":"359","hashOfConfig":"286"},{"size":787,"mtime":1673957753323,"results":"360","hashOfConfig":"286"},{"size":654,"mtime":1673957753323,"results":"361","hashOfConfig":"286"},{"size":299,"mtime":1673957753327,"results":"362","hashOfConfig":"286"},{"size":2577,"mtime":1673957753323,"results":"363","hashOfConfig":"286"},{"size":6766,"mtime":1673957753327,"results":"364","hashOfConfig":"286"},{"size":6990,"mtime":1673957753319,"results":"365","hashOfConfig":"286"},{"size":1039,"mtime":1673957753319,"results":"366","hashOfConfig":"286"},{"size":2216,"mtime":1673957753319,"results":"367","hashOfConfig":"286"},{"size":1595,"mtime":1673957753323,"results":"368","hashOfConfig":"286"},{"size":647,"mtime":1673957753315,"results":"369","hashOfConfig":"286"},{"size":1032,"mtime":1673957753323,"results":"370","hashOfConfig":"286"},{"size":7244,"mtime":1673957753319,"results":"371","hashOfConfig":"286"},{"size":1423,"mtime":1673957753319,"results":"372","hashOfConfig":"286"},{"size":1326,"mtime":1673957753323,"results":"373","hashOfConfig":"286"},{"size":666,"mtime":1673957753323,"results":"374","hashOfConfig":"286"},{"size":3107,"mtime":1673982427145,"results":"375","hashOfConfig":"286"},{"size":1386,"mtime":1673957753315,"results":"376","hashOfConfig":"286"},{"size":7284,"mtime":1673957753319,"results":"377","hashOfConfig":"286"},{"size":2220,"mtime":1673957753319,"results":"378","hashOfConfig":"286"},{"size":979,"mtime":1673957753315,"results":"379","hashOfConfig":"286"},{"size":1095,"mtime":1673957753315,"results":"380","hashOfConfig":"286"},{"size":2972,"mtime":1673957753319,"results":"381","hashOfConfig":"286"},{"size":8912,"mtime":1673982254047,"results":"382","hashOfConfig":"286"},{"size":3273,"mtime":1673957753315,"results":"383","hashOfConfig":"286"},{"size":8030,"mtime":1673957753315,"results":"384","hashOfConfig":"286"},{"size":4158,"mtime":1673957753315,"results":"385","hashOfConfig":"286"},{"size":760,"mtime":1673957753323,"results":"386","hashOfConfig":"286"},{"size":8229,"mtime":1673957753315,"results":"387","hashOfConfig":"286"},{"size":1039,"mtime":1673957753319,"results":"388","hashOfConfig":"286"},{"size":265,"mtime":1673957753323,"results":"389","hashOfConfig":"286"},{"size":2685,"mtime":1673957753319,"results":"390","hashOfConfig":"286"},{"size":1747,"mtime":1673957753319,"results":"391","hashOfConfig":"286"},{"size":4429,"mtime":1673957753319,"results":"392","hashOfConfig":"286"},{"size":616,"mtime":1673957753323,"results":"393","hashOfConfig":"286"},{"size":686,"mtime":1673957753319,"results":"394","hashOfConfig":"286"},{"size":1593,"mtime":1673957753319,"results":"395","hashOfConfig":"286"},{"size":4932,"mtime":1673957753319,"results":"396","hashOfConfig":"286"},{"size":1866,"mtime":1673957753319,"results":"397","hashOfConfig":"286"},{"size":272,"mtime":1673957753323,"results":"398","hashOfConfig":"286"},{"size":2265,"mtime":1673957753315,"results":"399","hashOfConfig":"286"},{"size":466,"mtime":1673957753323,"results":"400","hashOfConfig":"286"},{"size":10899,"mtime":1673957753319,"results":"401","hashOfConfig":"286"},{"size":644,"mtime":1673957753315,"results":"402","hashOfConfig":"286"},{"size":473,"mtime":1673957753319,"results":"403","hashOfConfig":"286"},{"size":3874,"mtime":1673957753315,"results":"404","hashOfConfig":"286"},{"size":1294,"mtime":1673957753319,"results":"405","hashOfConfig":"286"},{"size":7827,"mtime":1673957753319,"results":"406","hashOfConfig":"286"},{"size":545,"mtime":1673957753323,"results":"407","hashOfConfig":"286"},{"size":3355,"mtime":1673957753319,"results":"408","hashOfConfig":"286"},{"size":3363,"mtime":1673957753319,"results":"409","hashOfConfig":"286"},{"size":11377,"mtime":1673957753315,"results":"410","hashOfConfig":"286"},{"size":2853,"mtime":1673957753315,"results":"411","hashOfConfig":"286"},{"size":2000,"mtime":1673957753315,"results":"412","hashOfConfig":"286"},{"size":1229,"mtime":1673957753315,"results":"413","hashOfConfig":"286"},{"size":621,"mtime":1673957753323,"results":"414","hashOfConfig":"286"},{"size":912,"mtime":1673957753319,"results":"415","hashOfConfig":"286"},{"size":5745,"mtime":1673957753327,"results":"416","hashOfConfig":"286"},{"size":1350,"mtime":1673957753319,"results":"417","hashOfConfig":"286"},{"size":3364,"mtime":1673957753319,"results":"418","hashOfConfig":"286"},{"size":4498,"mtime":1673957753319,"results":"419","hashOfConfig":"286"},{"size":976,"mtime":1673957753319,"results":"420","hashOfConfig":"286"},{"size":2366,"mtime":1673957753323,"results":"421","hashOfConfig":"286"},{"size":2260,"mtime":1673957753319,"results":"422","hashOfConfig":"286"},{"size":364,"mtime":1673957753323,"results":"423","hashOfConfig":"286"},{"size":3652,"mtime":1673957753315,"results":"424","hashOfConfig":"286"},{"size":499,"mtime":1673957753319,"results":"425","hashOfConfig":"286"},{"size":3927,"mtime":1673957753319,"results":"426","hashOfConfig":"286"},{"size":1236,"mtime":1673957753319,"results":"427","hashOfConfig":"286"},{"size":2169,"mtime":1673982720230,"results":"428","hashOfConfig":"429"},{"size":509,"mtime":1673982720226,"results":"430","hashOfConfig":"429"},{"size":1894,"mtime":1673982720274,"results":"431","hashOfConfig":"429"},{"size":3355,"mtime":1673982720238,"results":"432","hashOfConfig":"429"},{"size":1014,"mtime":1673982720306,"results":"433","hashOfConfig":"429"},{"size":2146,"mtime":1673982720302,"results":"434","hashOfConfig":"429"},{"size":6621,"mtime":1673982720294,"results":"435","hashOfConfig":"429"},{"size":944,"mtime":1673982720278,"results":"436","hashOfConfig":"429"},{"size":711,"mtime":1673982720214,"results":"437","hashOfConfig":"429"},{"size":562,"mtime":1673982720218,"results":"438","hashOfConfig":"429"},{"size":803,"mtime":1673982720274,"results":"439","hashOfConfig":"429"},{"size":5634,"mtime":1673982720182,"results":"440","hashOfConfig":"429"},{"size":5760,"mtime":1673982720318,"results":"441","hashOfConfig":"429"},{"size":1435,"mtime":1673982720302,"results":"442","hashOfConfig":"429"},{"size":702,"mtime":1673982720298,"results":"443","hashOfConfig":"429"},{"size":1874,"mtime":1673982720274,"results":"444","hashOfConfig":"429"},{"size":1633,"mtime":1673982720290,"results":"445","hashOfConfig":"429"},{"size":2705,"mtime":1673982720210,"results":"446","hashOfConfig":"429"},{"size":523,"mtime":1673982720326,"results":"447","hashOfConfig":"429"},{"size":884,"mtime":1673982720334,"results":"448","hashOfConfig":"429"},{"size":914,"mtime":1673982720314,"results":"449","hashOfConfig":"429"},{"size":1242,"mtime":1673982720234,"results":"450","hashOfConfig":"429"},{"size":850,"mtime":1673982720266,"results":"451","hashOfConfig":"429"},{"size":7132,"mtime":1673982720242,"results":"452","hashOfConfig":"429"},{"size":14799,"mtime":1673982720242,"results":"453","hashOfConfig":"429"},{"size":386,"mtime":1673982720162,"results":"454","hashOfConfig":"429"},{"size":1596,"mtime":1673982720274,"results":"455","hashOfConfig":"429"},{"size":4955,"mtime":1673982720302,"results":"456","hashOfConfig":"429"},{"size":1656,"mtime":1673982720298,"results":"457","hashOfConfig":"429"},{"size":3940,"mtime":1673982720294,"results":"458","hashOfConfig":"429"},{"size":1283,"mtime":1673982720286,"results":"459","hashOfConfig":"429"},{"size":2413,"mtime":1673982720298,"results":"460","hashOfConfig":"429"},{"size":1836,"mtime":1673982720278,"results":"461","hashOfConfig":"429"},{"size":3269,"mtime":1673982720206,"results":"462","hashOfConfig":"429"},{"size":12455,"mtime":1673982720190,"results":"463","hashOfConfig":"429"},{"size":350,"mtime":1673982720178,"results":"464","hashOfConfig":"429"},{"size":157,"mtime":1673982720182,"results":"465","hashOfConfig":"429"},{"size":3709,"mtime":1673982720318,"results":"466","hashOfConfig":"429"},{"size":7668,"mtime":1673982720302,"results":"467","hashOfConfig":"429"},{"size":4609,"mtime":1673982720242,"results":"468","hashOfConfig":"429"},{"size":17462,"mtime":1673982720234,"results":"469","hashOfConfig":"429"},{"size":4730,"mtime":1673982720246,"results":"470","hashOfConfig":"429"},{"size":23188,"mtime":1673982720262,"results":"471","hashOfConfig":"429"},{"size":16694,"mtime":1673982720266,"results":"472","hashOfConfig":"429"},{"size":5706,"mtime":1673982720246,"results":"473","hashOfConfig":"429"},{"size":4395,"mtime":1673982720126,"results":"474","hashOfConfig":"429"},{"size":2266,"mtime":1673982720158,"results":"475","hashOfConfig":"429"},{"size":5648,"mtime":1673982720110,"results":"476","hashOfConfig":"429"},{"size":4163,"mtime":1673982720210,"results":"477","hashOfConfig":"429"},{"size":7785,"mtime":1673982720290,"results":"478","hashOfConfig":"429"},{"size":3728,"mtime":1673982720202,"results":"479","hashOfConfig":"429"},{"size":344,"mtime":1673982720238,"results":"480","hashOfConfig":"429"},{"size":5296,"mtime":1673982720310,"results":"481","hashOfConfig":"429"},{"size":598,"mtime":1673982720238,"results":"482","hashOfConfig":"429"},{"size":666,"mtime":1673982720198,"results":"483","hashOfConfig":"429"},{"size":1595,"mtime":1673982720198,"results":"484","hashOfConfig":"429"},{"size":2216,"mtime":1673982720170,"results":"485","hashOfConfig":"429"},{"size":2494,"mtime":1673982720298,"results":"486","hashOfConfig":"429"},{"size":299,"mtime":1673982720282,"results":"487","hashOfConfig":"429"},{"size":632,"mtime":1673982720294,"results":"488","hashOfConfig":"429"},{"size":468,"mtime":1673982720274,"results":"489","hashOfConfig":"429"},{"size":1620,"mtime":1673982720174,"results":"490","hashOfConfig":"429"},{"size":3855,"mtime":1673982720330,"results":"491","hashOfConfig":"429"},{"size":278,"mtime":1673982720186,"results":"492","hashOfConfig":"429"},{"size":569,"mtime":1673982720194,"results":"493","hashOfConfig":"429"},{"size":1890,"mtime":1673982720234,"results":"494","hashOfConfig":"429"},{"size":1135,"mtime":1673982720246,"results":"495","hashOfConfig":"429"},{"size":393,"mtime":1673982720226,"results":"496","hashOfConfig":"429"},{"size":2511,"mtime":1673982720146,"results":"497","hashOfConfig":"429"},{"size":3023,"mtime":1673982720330,"results":"498","hashOfConfig":"429"},{"size":1039,"mtime":1673982720130,"results":"499","hashOfConfig":"429"},{"size":1416,"mtime":1673982720170,"results":"500","hashOfConfig":"429"},{"size":3454,"mtime":1673982720170,"results":"501","hashOfConfig":"429"},{"size":5925,"mtime":1673982720198,"results":"502","hashOfConfig":"429"},{"size":654,"mtime":1673982720198,"results":"503","hashOfConfig":"429"},{"size":1032,"mtime":1673982720186,"results":"504","hashOfConfig":"429"},{"size":6990,"mtime":1673982720158,"results":"505","hashOfConfig":"429"},{"size":359,"mtime":1673982720222,"results":"506","hashOfConfig":"429"},{"size":3107,"mtime":1673982720118,"results":"507","hashOfConfig":"429"},{"size":7284,"mtime":1673982720142,"results":"508","hashOfConfig":"429"},{"size":1386,"mtime":1673982720102,"results":"509","hashOfConfig":"429"},{"size":638,"mtime":1673982720330,"results":"510","hashOfConfig":"429"},{"size":8762,"mtime":1673982720298,"results":"511","hashOfConfig":"429"},{"size":12910,"mtime":1673982720226,"results":"512","hashOfConfig":"429"},{"size":1188,"mtime":1673982720218,"results":"513","hashOfConfig":"429"},{"size":1095,"mtime":1673982720114,"results":"514","hashOfConfig":"429"},{"size":2220,"mtime":1673982720154,"results":"515","hashOfConfig":"429"},{"size":647,"mtime":1673982720102,"results":"516","hashOfConfig":"429"},{"size":7244,"mtime":1673982720138,"results":"517","hashOfConfig":"429"},{"size":2265,"mtime":1673982720122,"results":"518","hashOfConfig":"429"},{"size":912,"mtime":1673982720170,"results":"519","hashOfConfig":"429"},{"size":1423,"mtime":1673982720162,"results":"520","hashOfConfig":"429"},{"size":1350,"mtime":1673982720166,"results":"521","hashOfConfig":"429"},{"size":3364,"mtime":1673982720166,"results":"522","hashOfConfig":"429"},{"size":4498,"mtime":1673982720166,"results":"523","hashOfConfig":"429"},{"size":976,"mtime":1673982720162,"results":"524","hashOfConfig":"429"},{"size":6766,"mtime":1673982720278,"results":"525","hashOfConfig":"429"},{"size":265,"mtime":1673982720186,"results":"526","hashOfConfig":"429"},{"size":979,"mtime":1673982720110,"results":"527","hashOfConfig":"429"},{"size":2577,"mtime":1673982720202,"results":"528","hashOfConfig":"429"},{"size":787,"mtime":1673982720214,"results":"529","hashOfConfig":"429"},{"size":272,"mtime":1673982720226,"results":"530","hashOfConfig":"429"},{"size":616,"mtime":1673982720218,"results":"531","hashOfConfig":"429"},{"size":8912,"mtime":1673982720130,"results":"532","hashOfConfig":"429"},{"size":3273,"mtime":1673982720122,"results":"533","hashOfConfig":"429"},{"size":8229,"mtime":1673982720098,"results":"534","hashOfConfig":"429"},{"size":4429,"mtime":1673982720150,"results":"535","hashOfConfig":"429"},{"size":2685,"mtime":1673982720138,"results":"536","hashOfConfig":"429"},{"size":686,"mtime":1673982720134,"results":"537","hashOfConfig":"429"},{"size":4932,"mtime":1673982720134,"results":"538","hashOfConfig":"429"},{"size":364,"mtime":1673982720218,"results":"539","hashOfConfig":"429"},{"size":1593,"mtime":1673982720142,"results":"540","hashOfConfig":"429"},{"size":1747,"mtime":1673982720138,"results":"541","hashOfConfig":"429"},{"size":499,"mtime":1673982720166,"results":"542","hashOfConfig":"429"},{"size":3927,"mtime":1673982720162,"results":"543","hashOfConfig":"429"},{"size":8030,"mtime":1673982720106,"results":"544","hashOfConfig":"429"},{"size":4158,"mtime":1673982720102,"results":"545","hashOfConfig":"429"},{"size":3652,"mtime":1673982720098,"results":"546","hashOfConfig":"429"},{"size":2972,"mtime":1673982720142,"results":"547","hashOfConfig":"429"},{"size":1866,"mtime":1673982720134,"results":"548","hashOfConfig":"429"},{"size":760,"mtime":1673982720226,"results":"549","hashOfConfig":"429"},{"size":1326,"mtime":1673982720218,"results":"550","hashOfConfig":"429"},{"size":3874,"mtime":1673982720118,"results":"551","hashOfConfig":"429"},{"size":7827,"mtime":1673982720146,"results":"552","hashOfConfig":"429"},{"size":1294,"mtime":1673982720146,"results":"553","hashOfConfig":"429"},{"size":1039,"mtime":1673982720130,"results":"554","hashOfConfig":"429"},{"size":466,"mtime":1673982720234,"results":"555","hashOfConfig":"429"},{"size":473,"mtime":1673982720150,"results":"556","hashOfConfig":"429"},{"size":1236,"mtime":1673982720166,"results":"557","hashOfConfig":"429"},{"size":644,"mtime":1673982720110,"results":"558","hashOfConfig":"429"},{"size":10899,"mtime":1673982720158,"results":"559","hashOfConfig":"429"},{"size":545,"mtime":1673982720222,"results":"560","hashOfConfig":"429"},{"size":3363,"mtime":1673982720154,"results":"561","hashOfConfig":"429"},{"size":3355,"mtime":1673982720158,"results":"562","hashOfConfig":"429"},{"size":2853,"mtime":1673982720126,"results":"563","hashOfConfig":"429"},{"size":11377,"mtime":1673982720094,"results":"564","hashOfConfig":"429"},{"size":2000,"mtime":1673982720094,"results":"565","hashOfConfig":"429"},{"size":1229,"mtime":1673982720094,"results":"566","hashOfConfig":"429"},{"size":621,"mtime":1673982720214,"results":"567","hashOfConfig":"429"},{"size":5745,"mtime":1673982720286,"results":"568","hashOfConfig":"429"},{"size":2366,"mtime":1673982720234,"results":"569","hashOfConfig":"429"},{"size":2260,"mtime":1673982720126,"results":"570","hashOfConfig":"429"},{"filePath":"571","messages":"572","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qhobjx",{"filePath":"573","messages":"574","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"575","messages":"576","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"577","messages":"578","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"579","messages":"580","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"581","messages":"582","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"583","messages":"584","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"585","messages":"586","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"587","messages":"588","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"589","messages":"590","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"591","messages":"592","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"593","messages":"594","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"595","messages":"596","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"597","messages":"598","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"599","messages":"600","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"601","messages":"602","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"603","messages":"604","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"605","messages":"606","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"607","messages":"608","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"609","messages":"610","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"611","messages":"612","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"613","messages":"614","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"615","messages":"616","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"617","messages":"618","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"619","messages":"620","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"621","messages":"622","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"623","messages":"624","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"625","messages":"626","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"627","messages":"628","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"629","messages":"630","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"631","messages":"632","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"633","messages":"634","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"635","messages":"636","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"637","messages":"638","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"639","messages":"640","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"641","messages":"642","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"643","messages":"644","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"645","messages":"646","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"647","messages":"648","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"649","messages":"650","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"651","messages":"652","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"653","messages":"654","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"655","messages":"656","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"657","messages":"658","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"659","messages":"660","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"661","messages":"662","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"663","messages":"664","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"665","messages":"666","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"667","messages":"668","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"669","messages":"670","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"671","messages":"672","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"673","messages":"674","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"675","messages":"676","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"677","messages":"678","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"679","messages":"680","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"681","messages":"682","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"683","messages":"684","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"685","messages":"686","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"687","messages":"688","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"689","messages":"690","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"691","messages":"692","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"693","messages":"694","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"695","messages":"696","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"697","messages":"698","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"699","messages":"700","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"701","messages":"702","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"703","messages":"704","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"705","messages":"706","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"707","messages":"708","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"709","messages":"710","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"711","messages":"712","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"713","messages":"714","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"715","messages":"716","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"717","messages":"718","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"719","messages":"720","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"721","messages":"722","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"723","messages":"724","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"725","messages":"726","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"727","messages":"728","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"729","messages":"730","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"731","messages":"732","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"733","messages":"734","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"735","messages":"736","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"737","messages":"738","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"739","messages":"740","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"741","messages":"742","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"743","messages":"744","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"745","messages":"746","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"747","messages":"748","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"749","messages":"750","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"751","messages":"752","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"753","messages":"754","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"755","messages":"756","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"757","messages":"758","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"759","messages":"760","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"761","messages":"762","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"763","messages":"764","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"765","messages":"766","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"767","messages":"768","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"769","messages":"770","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"771","messages":"772","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"773","messages":"774","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"775","messages":"776","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"777","messages":"778","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"779","messages":"780","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"781","messages":"782","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"783","messages":"784","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"785","messages":"786","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"787","messages":"788","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"789","messages":"790","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"791","messages":"792","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"793","messages":"794","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"795","messages":"796","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"797","messages":"798","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"799","messages":"800","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"801","messages":"802","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"803","messages":"804","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"805","messages":"806","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"807","messages":"808","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"809","messages":"810","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"811","messages":"812","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"813","messages":"814","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"815","messages":"816","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"817","messages":"818","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"819","messages":"820","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"821","messages":"822","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"823","messages":"824","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"825","messages":"826","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"827","messages":"828","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"829","messages":"830","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"831","messages":"832","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"833","messages":"834","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"835","messages":"836","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"837","messages":"838","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"839","messages":"840","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"841","messages":"842","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"843","messages":"844","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"845","messages":"846","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"847","messages":"848","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"849","messages":"850","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"851","messages":"852","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"853","messages":"854","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"855","messages":"856","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"103k59z",{"filePath":"857","messages":"858","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"859","messages":"860","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"861","messages":"862","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"863","messages":"864","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"865","messages":"866","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"867"},{"filePath":"868","messages":"869","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"870","messages":"871","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"872","messages":"873","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"874","messages":"875","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"876","messages":"877","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"878","messages":"879","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"880","messages":"881","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"882"},{"filePath":"883","messages":"884","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"885","messages":"886","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"887","messages":"888","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"889","messages":"890","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"891","messages":"892","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"893","messages":"894","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"895","messages":"896","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"897","messages":"898","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"899","messages":"900","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"901","messages":"902","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"903","messages":"904","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"905"},{"filePath":"906","messages":"907","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"908"},{"filePath":"909","messages":"910","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"911","messages":"912","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"913","messages":"914","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"915","messages":"916","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"917","messages":"918","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"919","messages":"920","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"921","messages":"922","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"923","messages":"924","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"925","messages":"926","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"927","messages":"928","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"929"},{"filePath":"930","messages":"931","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"932","messages":"933","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"934","messages":"935","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"936","messages":"937","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"938","messages":"939","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"940"},{"filePath":"941","messages":"942","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"943"},{"filePath":"944","messages":"945","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"946"},{"filePath":"947","messages":"948","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"949"},{"filePath":"950","messages":"951","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"952"},{"filePath":"953","messages":"954","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"955","messages":"956","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"957","messages":"958","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"959","messages":"960","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"961"},{"filePath":"962","messages":"963","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"964","messages":"965","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"966","messages":"967","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"968","messages":"969","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"970"},{"filePath":"971","messages":"972","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"973","messages":"974","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"975","messages":"976","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"977","messages":"978","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"979","messages":"980","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"981","messages":"982","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"983","messages":"984","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"985","messages":"986","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"987","messages":"988","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"989","messages":"990","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"991","messages":"992","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"993","messages":"994","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"995","messages":"996","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"997","messages":"998","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"999"},{"filePath":"1000","messages":"1001","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1002","messages":"1003","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1004","messages":"1005","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"1006"},{"filePath":"1007","messages":"1008","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1009","messages":"1010","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1011","messages":"1012","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1013","messages":"1014","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1015","messages":"1016","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1017","messages":"1018","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1019","messages":"1020","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1021","messages":"1022","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1023","messages":"1024","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1025","messages":"1026","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1027"},{"filePath":"1028","messages":"1029","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1030"},{"filePath":"1031","messages":"1032","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1033","messages":"1034","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1035","messages":"1036","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1037","messages":"1038","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1039","messages":"1040","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1041","messages":"1042","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1043","messages":"1044","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1045"},{"filePath":"1046","messages":"1047","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1048","messages":"1049","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1050","messages":"1051","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1052","messages":"1053","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1054","messages":"1055","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1056","messages":"1057","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1058","messages":"1059","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1060"},{"filePath":"1061","messages":"1062","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1063"},{"filePath":"1064","messages":"1065","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1066","messages":"1067","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1068","messages":"1069","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1070"},{"filePath":"1071","messages":"1072","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1073","messages":"1074","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1075"},{"filePath":"1076","messages":"1077","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1078","messages":"1079","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1080","messages":"1081","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1082","messages":"1083","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1084"},{"filePath":"1085","messages":"1086","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1087","messages":"1088","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1089","messages":"1090","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1091"},{"filePath":"1092","messages":"1093","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1094","messages":"1095","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1096","messages":"1097","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1098"},{"filePath":"1099","messages":"1100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1101","messages":"1102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1103","messages":"1104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1105","messages":"1106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1107","messages":"1108","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1109"},{"filePath":"1110","messages":"1111","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1112"},{"filePath":"1113","messages":"1114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1115","messages":"1116","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1117"},{"filePath":"1118","messages":"1119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1120","messages":"1121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1122","messages":"1123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1124","messages":"1125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1126","messages":"1127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1128","messages":"1129","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1130"},{"filePath":"1131","messages":"1132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1133","messages":"1134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1135","messages":"1136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1137","messages":"1138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1139","messages":"1140","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1141"},{"filePath":"1142","messages":"1143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1144","messages":"1145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1146","messages":"1147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1148","messages":"1149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1150","messages":"1151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1152","messages":"1153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1154","messages":"1155","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1156"},{"filePath":"1157","messages":"1158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1159","messages":"1160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1161","messages":"1162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1163","messages":"1164","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1165"},{"filePath":"1166","messages":"1167","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1168"},{"filePath":"1169","messages":"1170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/qualinfo/Dev/prexis/dexbr-ui/src/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/i18n.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/state/application/updater.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/App.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/state/transactions/updater.tsx",["1171"],"/home/qualinfo/Dev/prexis/dexbr-ui/src/state/user/updater.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/state/multicall/updater.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/state/index.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/constants/index.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/state/application/actions.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/useDebounce.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/useIsWindowVisible.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/theme/index.tsx",["1172"],"/home/qualinfo/Dev/prexis/dexbr-ui/src/state/transactions/actions.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/state/application/hooks.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/state/user/actions.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/state/multicall/actions.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/useContract.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/utils/chunkArray.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/utils/retry.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/theme/DarkModeQueryParamReader.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/AddLiquidity/redirects.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/MigrateV1/RemoveV1Exchange.tsx",["1173","1174","1175","1176"],"/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/MigrateV1/MigrateV1Exchange.tsx",["1177","1178","1179","1180","1181","1182","1183","1184","1185","1186","1187","1188","1189","1190","1191","1192","1193","1194","1195","1196"],"/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/Swap/redirects.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/analytics/GoogleAnalyticsReporter.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/state/application/reducer.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/state/transactions/reducer.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/state/user/reducer.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/state/multicall/reducer.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/state/mint/reducer.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/state/swap/reducer.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/state/burn/reducer.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/constants/tokens/mainnet.ts",["1197"],"/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/index.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/constants/abis/erc20.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/constants/abis/migrator.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/theme/components.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/state/user/hooks.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/MigrateV1/index.tsx",["1198","1199","1200","1201"],"/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/AddLiquidity/index.tsx",["1202","1203","1204","1205","1206"],"/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/Swap/index.tsx",["1207"],"/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/PoolFinder/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/Pool/index.tsx",["1208","1209","1210","1211","1212"],"/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/RemoveLiquidity/index.tsx",["1213"],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Web3ReactManager/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Popups/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Header/index.tsx",["1214","1215","1216","1217","1218","1219","1220"],"/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/MigrateV1/EmptyState.tsx",["1221"],"/home/qualinfo/Dev/prexis/dexbr-ui/src/state/wallet/hooks.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/state/multicall/hooks.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/AppBody.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/state/transactions/hooks.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/connectors/index.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/state/burn/actions.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/state/swap/actions.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/utils/index.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/constants/multicall/index.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/constants/v1/index.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/Tokens.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/utils/prices.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/useToggledVersion.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/utils/maxAmountSpend.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/state/swap/hooks.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/useSwapCallback.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/useENSAddress.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/useApproveCallback.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/data/V1.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/AddLiquidity/PoolPriceBar.tsx",["1222","1223","1224"],"/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/Pool/styleds.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/TokenLogo/index.tsx",["1225","1226","1227"],"/home/qualinfo/Dev/prexis/dexbr-ui/src/connectors/NetworkConnector.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/connectors/Fortmatic.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/useParsedQueryString.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/useENS.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/data/Allowances.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/state/mint/actions.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/Trades.ts",["1228"],"/home/qualinfo/Dev/prexis/dexbr-ui/src/state/burn/hooks.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Web3Status/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Row/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/swap/styleds.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/data/Reserves.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Column/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/constants/tokens/index.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/SearchModal/TokenSearchModal.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/swap/BetterTradeLink.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/useENSName.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/data/TotalSupply.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Menu/index.tsx",["1229"],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Card/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Settings/index.tsx",["1230","1231"],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/TxnPopup/index.tsx",["1232"],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/DoubleLogo/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Loader/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Slider/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/PositionCard/index.tsx",["1233","1234"],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/NavigationTabs/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/CurrencyInputPanel/index.tsx",["1235","1236"],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/ConfirmationModal/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/useSocksBalance.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Button/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/QuestionHelper/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/constants/tokens/goerli.ts",["1237"],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/SearchModal/sorting.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/SearchModal/filtering.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/TokenWarningCard/index.tsx",["1238","1239"],"/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/useInterval.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/SearchModal/SortButton.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/SearchModal/styleds.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/SearchModal/TokenList.tsx",["1240","1241","1242"],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/SearchModal/CommonBases.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/useToggle.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/NumericalInput/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/AddLiquidity/currencyId.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/WalletModal/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Identicon/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Tooltip/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Modal/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Toggle/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/SlippageTabs/index.tsx",["1243","1244","1245"],"/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/usePrevious.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/WalletModal/PendingView.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/WalletModal/Option.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/AccountDetails/index.tsx",["1246","1247"],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/Popover/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/AccountDetails/Transaction.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/AccountDetails/Copy.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/useCopyClipboard.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/swap/confirmPriceImpactWithoutFee.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/state/mint/hooks.ts",["1248","1249"],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/swap/TradePrice.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/swap/SwapModalHeader.tsx",["1250","1251","1252"],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/swap/SwapModalFooter.tsx",["1253","1254","1255","1256","1257","1258"],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/swap/AdvancedSwapDetailsDropdown.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/pages/AddLiquidity/ConfirmAddModalBottom.tsx",["1259","1260","1261","1262","1263","1264","1265","1266","1267"],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/PositionCard/V1.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/hooks/useLast.ts",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/AddressInputPanel/index.tsx",["1268","1269"],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/swap/FormattedPriceImpact.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/swap/AdvancedSwapDetails.tsx",["1270","1271","1272","1273","1274","1275"],"/home/qualinfo/Dev/prexis/dexbr-ui/src/components/swap/SwapRoute.tsx",["1276"],"/home/qualinfo/Dev/prexis/dexbr-interface/src/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/i18n.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/state/application/updater.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/App.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/state/user/updater.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/state/transactions/updater.tsx",["1277"],"import { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useAddPopup, useBlockNumber } from '../application/hooks'\nimport { AppDispatch, AppState } from '../index'\nimport { finalizeTransaction } from './actions'\n\nexport default function Updater() {\n  const { chainId, library } = useActiveWeb3React()\n\n  const lastBlockNumber = useBlockNumber()\n\n  const dispatch = useDispatch<AppDispatch>()\n  const transactions = useSelector<AppState, AppState['transactions']>(state => state.transactions)\n\n  const allTransactions = transactions[chainId ?? -1] ?? {}\n\n  // show popup on confirm\n  const addPopup = useAddPopup()\n\n  useEffect(() => {\n    if (!chainId || !library || !lastBlockNumber) return\n\n    Object.keys(allTransactions)\n      .filter(hash => !allTransactions[hash].receipt)\n      .forEach(hash => {\n        library\n          .getTransactionReceipt(hash)\n          .then(receipt => {\n            if (receipt) {\n              dispatch(\n                finalizeTransaction({\n                  chainId,\n                  hash,\n                  receipt: {\n                    blockHash: receipt.blockHash,\n                    blockNumber: receipt.blockNumber,\n                    contractAddress: receipt.contractAddress,\n                    from: receipt.from,\n                    status: receipt.status,\n                    to: receipt.to,\n                    transactionHash: receipt.transactionHash,\n                    transactionIndex: receipt.transactionIndex\n                  }\n                })\n              )\n\n              addPopup(\n                {\n                  txn: {\n                    hash,\n                    success: receipt.status === 1,\n                    summary: allTransactions[hash]?.summary\n                  }\n                },\n                hash\n              )\n            }\n          })\n          .catch(error => {\n            console.error(`failed to check transaction hash: ${hash}`, error)\n          })\n      })\n  }, [chainId, library, allTransactions, lastBlockNumber, dispatch, addPopup])\n\n  return null\n}\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/state/multicall/updater.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/state/index.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/useDebounce.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/useIsWindowVisible.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/state/application/actions.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/constants/index.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/theme/index.tsx",["1278"],"import { transparentize } from 'polished'\nimport React, { useMemo } from 'react'\nimport styled, {\n  ThemeProvider as StyledComponentsThemeProvider,\n  createGlobalStyle,\n  css,\n  DefaultTheme\n} from 'styled-components'\nimport { useIsDarkMode } from '../state/user/hooks'\nimport { Text, TextProps } from 'rebass'\nimport { Colors } from './styled'\nimport 'animate.css';\n\nimport Fundo from '../assets/images/fundo.png'\n\nexport * from './components'\n\nconst MEDIA_WIDTHS = {\n  upToExtraSmall: 500,\n  upToSmall: 600,\n  upToMedium: 960,\n  upToLarge: 1280\n}\n\nconst mediaWidthTemplates: { [width in keyof typeof MEDIA_WIDTHS]: typeof css } = Object.keys(MEDIA_WIDTHS).reduce(\n  (accumulator, size) => {\n    ;(accumulator as any)[size] = (a: any, b: any, c: any) => css`\n      @media (max-width: ${(MEDIA_WIDTHS as any)[size]}px) {\n        ${css(a, b, c)}\n      }\n    `\n    return accumulator\n  },\n  {}\n) as any\n\nconst white = '#FFFFFF'\nconst black = '#000000'\n\nexport function colors(darkMode: boolean): Colors {\n  return {\n    // base\n    white,\n    black,\n\n    // text\n    text1: darkMode ? '#FFFFFF' : '#000000ad',\n    text2: darkMode ? '#C3C5CB' : '#565A69',\n    text3: darkMode ? '#6C7284' : '#888D9B',\n    text4: darkMode ? '#565A69' : '#C3C5CB',\n    text5: darkMode ? '#2C2F36' : '#EDEEF2',\n\n    // backgrounds / greys\n    bg1: darkMode ? '#212429' : '#FFFFFF',\n    bg2: darkMode ? '#2C2F36' : '#F7F8FA',\n    bg3: darkMode ? '#40444F' : '#EDEEF2',\n    bg4: darkMode ? '#565A69' : '#CED0D9',\n    bg5: darkMode ? '#565A69' : '#888D9B',\n\n    //specialty colors\n    modalBG: darkMode ? 'rgba(0,0,0,0.85)' : 'rgba(0,0,0,0.85)',\n    advancedBG: darkMode ? 'rgba(0,0,0,0.1)' : 'rgba(0,0,0,0.1)',\n\n    //primary colors\n    primary1: darkMode ? '#2172E5' : '#ffc000',\n    primary2: darkMode ? '#3680E7' : '#FF8CC3',\n    primary3: darkMode ? '#4D8FEA' : '#FF99C9',\n    primary4: darkMode ? '#153d6f70' : '#fff',\n    primary5: darkMode ? '#153d6f70' : '#ffc000',\n\n    // color text\n    primaryText1: darkMode ? '#6da8ff' : '#000000ad',\n\n    // secondary colors\n    secondary1: darkMode ? '#2172E5' : '#ffc00052',\n    secondary2: darkMode ? '#17000b26' : '#F6DDE8',\n    secondary3: darkMode ? '#17000b26' : '#FDEAF1',\n\n    // other\n    red1: '#FF6871',\n    green1: '#27AE60',\n    yellow1: '#FFE270',\n    yellow2: '#F3841E'\n\n    // dont wanna forget these blue yet\n    // blue4: darkMode ? '#153d6f70' : '#C4D9F8',\n    // blue5: darkMode ? '#153d6f70' : '#EBF4FF',\n  }\n}\n\nexport function theme(darkMode: boolean): DefaultTheme {\n  return {\n    ...colors(darkMode),\n\n    grids: {\n      sm: 8,\n      md: 12,\n      lg: 24\n    },\n\n    //shadows\n    shadow1: darkMode ? '#000' : '#2F80ED',\n\n    // media queries\n    mediaWidth: mediaWidthTemplates,\n\n    // css snippets\n    flexColumnNoWrap: css`\n      display: flex;\n      flex-flow: column nowrap;\n    `,\n    flexRowNoWrap: css`\n      display: flex;\n      flex-flow: row nowrap;\n    `\n  }\n}\n\nexport default function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const darkMode = useIsDarkMode()\n\n  const themeObject = useMemo(() => theme(darkMode), [darkMode])\n\n  return <StyledComponentsThemeProvider theme={themeObject}>{children}</StyledComponentsThemeProvider>\n}\n\nconst TextWrapper = styled(Text)<{ color: keyof Colors }>`\n  color: ${({ color, theme }) => (theme as any)[color]};\n`\n\nexport const TYPE = {\n  main(props: TextProps) {\n    return <TextWrapper fontWeight={500} color={'text2'} {...props} />\n  },\n  link(props: TextProps) {\n    return <TextWrapper fontWeight={500} color={'primary1'} {...props} />\n  },\n  black(props: TextProps) {\n    return <TextWrapper fontWeight={500} color={'text1'} {...props} />\n  },\n  body(props: TextProps) {\n    return <TextWrapper fontWeight={400} fontSize={16} color={'text1'} {...props} />\n  },\n  largeHeader(props: TextProps) {\n    return <TextWrapper fontWeight={600} fontSize={24} {...props} />\n  },\n  mediumHeader(props: TextProps) {\n    return <TextWrapper fontWeight={500} fontSize={20} {...props} />\n  },\n  subHeader(props: TextProps) {\n    return <TextWrapper fontWeight={400} fontSize={14} color={'black'} {...props} />\n  },\n  blue(props: TextProps) {\n    return <TextWrapper fontWeight={500} color={'primary1'} {...props} />\n  },\n  yellow(props: TextProps) {\n    return <TextWrapper fontWeight={500} color={'yellow1'} {...props} />\n  },\n  darkGray(props: TextProps) {\n    return <TextWrapper fontWeight={500} color={'text3'} {...props} />\n  },\n  gray(props: TextProps) {\n    return <TextWrapper fontWeight={500} color={'bg3'} {...props} />\n  },\n  italic(props: TextProps) {\n    return <TextWrapper fontWeight={500} fontSize={12} fontStyle={'italic'} color={'black'} {...props} />\n  },\n  error({ error, ...props }: { error: boolean } & TextProps) {\n    return <TextWrapper fontWeight={500} color={error ? 'red1' : 'text2'} {...props} />\n  }\n}\n\nexport const FixedGlobalStyle = createGlobalStyle`\nhtml, input, textarea, button {\n  font-family: 'Inter', sans-serif;\n  letter-spacing: -0.018em;\n}\n@supports (font-variation-settings: normal) {\n  html, input, textarea, button {\n    font-family: 'Inter var', sans-serif;\n  }\n}\n\nhtml,\nbody {\n  margin: 0;\n  padding: 0;\n}\n\n* {\n  box-sizing: border-box;\n}\n\nbutton {\n  user-select: none;\n}\n\nhtml {\n  font-size: 16px;\n  font-variant: none;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n`\n\nexport const ThemedGlobalStyle = createGlobalStyle`\nhtml {\n  color: ${({ theme }) => theme.text1};\n  background-color: ${({ theme }) => theme.bg2};\n}\n\nbody {\n  min-height: 100vh;\n  \n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: center center;\n  background-image: url(${Fundo});\n}\n`\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/state/user/actions.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/state/transactions/actions.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/state/application/hooks.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/state/multicall/actions.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/useContract.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/utils/chunkArray.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/utils/retry.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/theme/DarkModeQueryParamReader.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/AddLiquidity/redirects.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/Swap/redirects.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/MigrateV1/RemoveV1Exchange.tsx",["1279","1280","1281","1282"],"import { TransactionResponse } from '@ethersproject/abstract-provider'\nimport { JSBI, Token, TokenAmount, WETH, Fraction, Percent } from 'dexbr-sdk'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport ReactGA from 'react-ga'\nimport { Redirect, RouteComponentProps } from 'react-router'\nimport { ButtonConfirmed } from '../../components/Button'\nimport { LightCard } from '../../components/Card'\nimport { AutoColumn } from '../../components/Column'\nimport QuestionHelper from '../../components/QuestionHelper'\nimport { AutoRow } from '../../components/Row'\nimport { DEFAULT_DEADLINE_FROM_NOW } from '../../constants'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useToken } from '../../hooks/Tokens'\nimport { useV1ExchangeContract } from '../../hooks/useContract'\nimport { NEVER_RELOAD, useSingleCallResult } from '../../state/multicall/hooks'\nimport { useIsTransactionPending, useTransactionAdder } from '../../state/transactions/hooks'\nimport { useTokenBalance, useETHBalances } from '../../state/wallet/hooks'\nimport { BackArrow, TYPE } from '../../theme'\nimport { isAddress } from '../../utils'\nimport { BodyWrapper } from '../AppBody'\nimport { EmptyState } from './EmptyState'\nimport { V1LiquidityInfo } from './MigrateV1Exchange'\nimport { AddressZero } from '@ethersproject/constants'\nimport { Dots } from '../../components/swap/styleds'\nimport { Contract } from '@ethersproject/contracts'\nimport { useTotalSupply } from '../../data/TotalSupply'\nimport { useTranslation } from 'react-i18next'\n\n\nconst WEI_DENOM = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(18))\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst ZERO_FRACTION = new Fraction(ZERO, ONE)\n\nfunction V1PairRemoval({\n  exchangeContract,\n  liquidityTokenAmount,\n  token\n}: {\n  exchangeContract: Contract\n  liquidityTokenAmount: TokenAmount\n  token: Token\n}) {\n  const { chainId } = useActiveWeb3React()\n  const totalSupply = useTotalSupply(liquidityTokenAmount.token)\n  const exchangeETHBalance = useETHBalances([liquidityTokenAmount.token.address])?.[liquidityTokenAmount.token.address]\n  const exchangeTokenBalance = useTokenBalance(liquidityTokenAmount.token.address, token)\n\n  const [confirmingRemoval, setConfirmingRemoval] = useState<boolean>(false)\n  const [pendingRemovalHash, setPendingRemovalHash] = useState<string | null>(null)\n\n  const shareFraction: Fraction = totalSupply ? new Percent(liquidityTokenAmount.raw, totalSupply.raw) : ZERO_FRACTION\n\n  const ethWorth: Fraction = exchangeETHBalance\n    ? new Fraction(shareFraction.multiply(exchangeETHBalance).quotient, WEI_DENOM)\n    : ZERO_FRACTION\n\n  const tokenWorth: TokenAmount = exchangeTokenBalance\n    ? new TokenAmount(token, shareFraction.multiply(exchangeTokenBalance.raw).quotient)\n    : new TokenAmount(token, ZERO)\n\n  const addTransaction = useTransactionAdder()\n  const isRemovalPending = useIsTransactionPending(pendingRemovalHash)\n\n  const remove = useCallback(() => {\n    if (!liquidityTokenAmount) return\n\n    setConfirmingRemoval(true)\n    exchangeContract\n      .removeLiquidity(\n        liquidityTokenAmount.raw.toString(),\n        1, // min_eth, this is safe because we're removing liquidity\n        1, // min_tokens, this is safe because we're removing liquidity\n        Math.floor(new Date().getTime() / 1000) + DEFAULT_DEADLINE_FROM_NOW\n      )\n      .then((response: TransactionResponse) => {\n        ReactGA.event({\n          category: 'Remove',\n          action: 'V1',\n          label: token?.symbol\n        })\n\n        addTransaction(response, {\n          summary: `Remove ${token.equals(WETH[chainId]) ? 'WETH' : token.symbol}/ETH V1 liquidity`\n        })\n        setPendingRemovalHash(response.hash)\n      })\n      .catch(error => {\n        console.error(error)\n        setConfirmingRemoval(false)\n      })\n  }, [exchangeContract, liquidityTokenAmount, token, chainId, addTransaction])\n\n  const noLiquidityTokens = !!liquidityTokenAmount && liquidityTokenAmount.equalTo(ZERO)\n\n  const isSuccessfullyRemoved = !!pendingRemovalHash && !!noLiquidityTokens\n\n  const { t } = useTranslation()\n\n\n  return (\n    <AutoColumn gap=\"20px\">\n      <TYPE.body my={9} style={{ fontWeight: 400 }}>\n        {t('This tool will remove your V1 liquidity and send the underlying assets to your wallet.')}\n      </TYPE.body>\n\n      <LightCard>\n        <V1LiquidityInfo\n          token={token}\n          liquidityTokenAmount={liquidityTokenAmount}\n          tokenWorth={tokenWorth}\n          ethWorth={ethWorth}\n        />\n\n        <div style={{ display: 'flex', marginTop: '1rem' }}>\n          <ButtonConfirmed\n            confirmed={isSuccessfullyRemoved}\n            disabled={isSuccessfullyRemoved || noLiquidityTokens || isRemovalPending || confirmingRemoval}\n            onClick={remove}\n          >\n            {isSuccessfullyRemoved ? t('Success') : isRemovalPending ? <Dots>{t('Removing')}</Dots> : t('Remove')}\n          </ButtonConfirmed>\n        </div>\n      </LightCard>\n      <TYPE.darkGray style={{ textAlign: 'center' }}>\n        {`Your Uniswap V1 ${\n          token.equals(WETH[chainId]) ? 'WETH' : token.symbol\n        }/ETH liquidity will be redeemed for underlying assets.`}\n      </TYPE.darkGray>\n    </AutoColumn>\n  )\n}\n\nexport default function RemoveV1Exchange({\n  match: {\n    params: { address }\n  }\n}: RouteComponentProps<{ address: string }>) {\n  const validatedAddress = isAddress(address)\n  const { chainId, account } = useActiveWeb3React()\n  const { t } = useTranslation()\n\n\n  const exchangeContract = useV1ExchangeContract(validatedAddress ? validatedAddress : undefined, true)\n  const tokenAddress = useSingleCallResult(exchangeContract, 'tokenAddress', undefined, NEVER_RELOAD)?.result?.[0]\n  const token = useToken(tokenAddress)\n\n  const liquidityToken: Token | undefined = useMemo(\n    () =>\n      validatedAddress && token\n        ? new Token(chainId, validatedAddress, 18, `UNI-V1-${token.symbol}`, 'Uniswap V1')\n        : undefined,\n    [chainId, validatedAddress, token]\n  )\n  const userLiquidityBalance = useTokenBalance(account, liquidityToken)\n\n  // redirect for invalid url params\n  if (!validatedAddress || tokenAddress === AddressZero) {\n    console.error('Invalid address in path', address)\n    return <Redirect to=\"/migrate/v1\" />\n  }\n\n\n  return (\n    <BodyWrapper style={{ padding: 24 }}>\n      <AutoColumn gap=\"16px\">\n        <AutoRow style={{ alignItems: 'center', justifyContent: 'space-between' }} gap=\"8px\">\n          <BackArrow to=\"/migrate/v1\" />\n          <TYPE.mediumHeader>{t('Remove V1 Liquidity')}</TYPE.mediumHeader>\n          <div>\n            <QuestionHelper text={t('Remove your Uniswap V1 liquidity tokens.')} />\n          </div>\n        </AutoRow>\n\n        {!account ? (\n          <TYPE.largeHeader>{t('You must connect an account.')}</TYPE.largeHeader>\n        ) : userLiquidityBalance && token ? (\n          <V1PairRemoval\n            exchangeContract={exchangeContract}\n            liquidityTokenAmount={userLiquidityBalance}\n            token={token}\n          />\n        ) : (\n          <EmptyState message={t('Loading...')} />\n        )}\n      </AutoColumn>\n    </BodyWrapper>\n  )\n}\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/MigrateV1/MigrateV1Exchange.tsx",["1283","1284","1285","1286","1287","1288","1289","1290","1291","1292","1293","1294","1295","1296","1297","1298","1299","1300","1301","1302"],"import { TransactionResponse } from '@ethersproject/abstract-provider'\nimport { ChainId, Fraction, JSBI, Percent, Token, TokenAmount, WETH } from 'dexbr-sdk'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport ReactGA from 'react-ga'\nimport { Redirect, RouteComponentProps } from 'react-router'\nimport { ButtonConfirmed } from '../../components/Button'\nimport { PinkCard, YellowCard, LightCard } from '../../components/Card'\nimport { AutoColumn } from '../../components/Column'\nimport QuestionHelper from '../../components/QuestionHelper'\nimport { AutoRow, RowBetween, RowFixed } from '../../components/Row'\nimport { Dots } from '../../components/swap/styleds'\nimport { DEFAULT_DEADLINE_FROM_NOW, INITIAL_ALLOWED_SLIPPAGE } from '../../constants'\nimport { MIGRATOR_ADDRESS } from '../../constants/abis/migrator'\nimport { usePair } from '../../data/Reserves'\nimport { useTotalSupply } from '../../data/TotalSupply'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useToken } from '../../hooks/Tokens'\nimport { ApprovalState, useApproveCallback } from '../../hooks/useApproveCallback'\nimport { useV1ExchangeContract, useV2MigratorContract } from '../../hooks/useContract'\nimport { NEVER_RELOAD, useSingleCallResult } from '../../state/multicall/hooks'\nimport { useIsTransactionPending, useTransactionAdder } from '../../state/transactions/hooks'\nimport { useETHBalances, useTokenBalance } from '../../state/wallet/hooks'\nimport { TYPE, ExternalLink, BackArrow } from '../../theme'\nimport { isAddress, getEtherscanLink } from '../../utils'\nimport { BodyWrapper } from '../AppBody'\nimport { EmptyState } from './EmptyState'\nimport TokenLogo from '../../components/TokenLogo'\nimport { AddressZero } from '@ethersproject/constants'\nimport { Text } from 'rebass'\nimport { useTranslation } from 'react-i18next'\n\n\nconst POOL_TOKEN_AMOUNT_MIN = new Fraction(JSBI.BigInt(1), JSBI.BigInt(1000000))\nconst WEI_DENOM = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(18))\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst ZERO_FRACTION = new Fraction(ZERO, ONE)\nconst ALLOWED_OUTPUT_MIN_PERCENT = new Percent(JSBI.BigInt(10000 - INITIAL_ALLOWED_SLIPPAGE), JSBI.BigInt(10000))\n\nfunction FormattedPoolTokenAmount({ tokenAmount }: { tokenAmount: TokenAmount }) {\n  return (\n    <>\n      {tokenAmount.equalTo(JSBI.BigInt(0))\n        ? '0'\n        : tokenAmount.greaterThan(POOL_TOKEN_AMOUNT_MIN)\n        ? tokenAmount.toSignificant(4)\n        : `<${POOL_TOKEN_AMOUNT_MIN.toSignificant(1)}`}\n    </>\n  )\n}\n\nexport function V1LiquidityInfo({\n  token,\n  liquidityTokenAmount,\n  tokenWorth,\n  ethWorth\n}: {\n  token: Token\n  liquidityTokenAmount: TokenAmount\n  tokenWorth: TokenAmount\n  ethWorth: Fraction\n}) {\n  const { chainId } = useActiveWeb3React()\n\n  return (\n    <>\n      <AutoRow style={{ justifyContent: 'flex-start', width: 'fit-content' }}>\n        <TokenLogo size=\"24px\" address={token.address} />\n        <div style={{ marginLeft: '.75rem' }}>\n          <TYPE.mediumHeader>\n            {<FormattedPoolTokenAmount tokenAmount={liquidityTokenAmount} />}{' '}\n            {token.equals(WETH[chainId]) ? 'WETH' : token.symbol}/ETH\n          </TYPE.mediumHeader>\n        </div>\n      </AutoRow>\n\n      <RowBetween my=\"1rem\">\n        <Text fontSize={16} fontWeight={500}>\n          Pooled {token.equals(WETH[chainId]) ? 'WETH' : token.symbol}:\n        </Text>\n        <RowFixed>\n          <Text fontSize={16} fontWeight={500} marginLeft={'6px'}>\n            {tokenWorth.toSignificant(4)}\n          </Text>\n          <TokenLogo size=\"20px\" style={{ marginLeft: '8px' }} address={token.address} />\n        </RowFixed>\n      </RowBetween>\n      <RowBetween mb=\"1rem\">\n        <Text fontSize={16} fontWeight={500}>\n          Pooled ETH:\n        </Text>\n        <RowFixed>\n          <Text fontSize={16} fontWeight={500} marginLeft={'6px'}>\n            {ethWorth.toSignificant(4)}\n          </Text>\n          <TokenLogo size=\"20px\" style={{ marginLeft: '8px' }} address={WETH[chainId].address} />\n        </RowFixed>\n      </RowBetween>\n    </>\n  )\n}\n\nfunction V1PairMigration({ liquidityTokenAmount, token }: { liquidityTokenAmount: TokenAmount; token: Token }) {\n  const { account, chainId } = useActiveWeb3React()\n  const totalSupply = useTotalSupply(liquidityTokenAmount.token)\n  const exchangeETHBalance = useETHBalances([liquidityTokenAmount.token.address])?.[liquidityTokenAmount.token.address]\n  const exchangeTokenBalance = useTokenBalance(liquidityTokenAmount.token.address, token)\n\n  const v2Pair = usePair(WETH[chainId as ChainId], token)\n  const isFirstLiquidityProvider: boolean = v2Pair === null\n\n  const v2SpotPrice = v2Pair?.reserveOf(token)?.divide(v2Pair?.reserveOf(WETH[chainId as ChainId]))\n\n  const [confirmingMigration, setConfirmingMigration] = useState<boolean>(false)\n  const [pendingMigrationHash, setPendingMigrationHash] = useState<string | null>(null)\n\n  const shareFraction: Fraction = totalSupply ? new Percent(liquidityTokenAmount.raw, totalSupply.raw) : ZERO_FRACTION\n\n  const ethWorth: Fraction = exchangeETHBalance\n    ? new Fraction(shareFraction.multiply(exchangeETHBalance).quotient, WEI_DENOM)\n    : ZERO_FRACTION\n\n  const tokenWorth: TokenAmount = exchangeTokenBalance\n    ? new TokenAmount(token, shareFraction.multiply(exchangeTokenBalance.raw).quotient)\n    : new TokenAmount(token, ZERO)\n\n  const [approval, approve] = useApproveCallback(liquidityTokenAmount, MIGRATOR_ADDRESS)\n\n  const v1SpotPrice =\n    exchangeTokenBalance && exchangeETHBalance\n      ? exchangeTokenBalance.divide(new Fraction(exchangeETHBalance, WEI_DENOM))\n      : null\n\n  const priceDifferenceFraction: Fraction | undefined =\n    v1SpotPrice && v2SpotPrice\n      ? v1SpotPrice\n          .divide(v2SpotPrice)\n          .multiply('100')\n          .subtract('100')\n      : undefined\n\n  const priceDifferenceAbs: Fraction | undefined = priceDifferenceFraction?.lessThan(ZERO)\n    ? priceDifferenceFraction?.multiply('-1')\n    : priceDifferenceFraction\n\n  const minAmountETH: JSBI | undefined =\n    v2SpotPrice && tokenWorth\n      ? tokenWorth\n          .divide(v2SpotPrice)\n          .multiply(WEI_DENOM)\n          .multiply(ALLOWED_OUTPUT_MIN_PERCENT).quotient\n      : ethWorth?.numerator\n\n  const minAmountToken: JSBI | undefined =\n    v2SpotPrice && ethWorth\n      ? ethWorth\n          .multiply(v2SpotPrice)\n          .multiply(JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(token.decimals)))\n          .multiply(ALLOWED_OUTPUT_MIN_PERCENT).quotient\n      : tokenWorth?.numerator\n\n  const addTransaction = useTransactionAdder()\n  const isMigrationPending = useIsTransactionPending(pendingMigrationHash)\n\n  const migrator = useV2MigratorContract()\n  const migrate = useCallback(() => {\n    if (!minAmountToken || !minAmountETH) return\n\n    setConfirmingMigration(true)\n    migrator\n      .migrate(\n        token.address,\n        minAmountToken.toString(),\n        minAmountETH.toString(),\n        account,\n        Math.floor(new Date().getTime() / 1000) + DEFAULT_DEADLINE_FROM_NOW\n      )\n      .then((response: TransactionResponse) => {\n        ReactGA.event({\n          category: 'Migrate',\n          action: 'V1->V2',\n          label: token?.symbol\n        })\n\n        addTransaction(response, {\n          summary: `Migrate ${token.symbol} liquidity to V2`\n        })\n        setPendingMigrationHash(response.hash)\n      })\n      .catch(() => {\n        setConfirmingMigration(false)\n      })\n  }, [minAmountToken, minAmountETH, migrator, token, account, addTransaction])\n\n  const noLiquidityTokens = !!liquidityTokenAmount && liquidityTokenAmount.equalTo(ZERO)\n\n  const largePriceDifference = !!priceDifferenceAbs && !priceDifferenceAbs.lessThan(JSBI.BigInt(5))\n\n  const isSuccessfullyMigrated = !!pendingMigrationHash && !!noLiquidityTokens\n  const { t } = useTranslation()\n\n\n  return (\n    <AutoColumn gap=\"20px\">\n      <TYPE.body my={9} style={{ fontWeight: 400 }}>\n        {t('This tool will safely migrate your V1 liquidity to V2 with minimal price risk. The process is completely trustless thanks to the')}{' '}\n        <ExternalLink href={getEtherscanLink(chainId, MIGRATOR_ADDRESS, 'address')}>\n          <TYPE.blue display=\"inline\">Uniswap migration contract↗</TYPE.blue>\n        </ExternalLink>\n        .\n      </TYPE.body>\n\n      {!isFirstLiquidityProvider && largePriceDifference ? (\n        <YellowCard>\n          <TYPE.body style={{ marginBottom: 8, fontWeight: 400 }}>\n            It{\"'\"}s best to deposit liquidity into Uniswap V2 at a price you believe is correct. If the V2 price seems incorrect, you can either make a swap to move the price or wait for someone else to do so.\n          </TYPE.body>\n          <AutoColumn gap=\"8px\">\n            <RowBetween>\n              <TYPE.body>V1 Price:</TYPE.body>\n              <TYPE.black>\n                {v1SpotPrice?.toSignificant(6)} {token.symbol}/ETH\n              </TYPE.black>\n            </RowBetween>\n            <RowBetween>\n              <div />\n              <TYPE.black>\n                {v1SpotPrice?.invert()?.toSignificant(6)} ETH/{token.symbol}\n              </TYPE.black>\n            </RowBetween>\n\n            <RowBetween>\n              <TYPE.body>V2 Price:</TYPE.body>\n              <TYPE.black>\n                {v2SpotPrice?.toSignificant(6)} {token.symbol}/ETH\n              </TYPE.black>\n            </RowBetween>\n            <RowBetween>\n              <div />\n              <TYPE.black>\n                {v2SpotPrice?.invert()?.toSignificant(6)} ETH/{token.symbol}\n              </TYPE.black>\n            </RowBetween>\n\n            <RowBetween>\n              <TYPE.body color=\"inherit\">{t('Price Difference:')}</TYPE.body>\n              <TYPE.black color=\"inherit\">{priceDifferenceAbs.toSignificant(4)}%</TYPE.black>\n            </RowBetween>\n          </AutoColumn>\n        </YellowCard>\n      ) : null}\n\n      {isFirstLiquidityProvider && (\n        <PinkCard>\n          <TYPE.body style={{ marginBottom: 8, fontWeight: 400 }}>\n          {t('You are the first liquidity provider for this pair on Uniswap V2. Your liquidity will be migrated at the current V1 price. Your transaction cost also includes the gas to create the pool.')}\n          </TYPE.body>\n\n          <AutoColumn gap=\"8px\">\n            <RowBetween>\n              <TYPE.body>V1 Price:</TYPE.body>\n              <TYPE.black>\n                {v1SpotPrice?.toSignificant(6)} {token.symbol}/ETH\n              </TYPE.black>\n            </RowBetween>\n            <RowBetween>\n              <div />\n              <TYPE.black>\n                {v1SpotPrice?.invert()?.toSignificant(6)} ETH/{token.symbol}\n              </TYPE.black>\n            </RowBetween>\n          </AutoColumn>\n        </PinkCard>\n      )}\n\n      <LightCard>\n        <V1LiquidityInfo\n          token={token}\n          liquidityTokenAmount={liquidityTokenAmount}\n          tokenWorth={tokenWorth}\n          ethWorth={ethWorth}\n        />\n\n        <div style={{ display: 'flex', marginTop: '1rem' }}>\n          <AutoColumn gap=\"12px\" style={{ flex: '1', marginRight: 12 }}>\n            <ButtonConfirmed\n              confirmed={approval === ApprovalState.APPROVED}\n              disabled={approval !== ApprovalState.NOT_APPROVED}\n              onClick={approve}\n            >\n              {approval === ApprovalState.PENDING ? (\n                <Dots>{t('Approving')}</Dots>\n              ) : approval === ApprovalState.APPROVED ? (\n                t('Approved')\n              ) : (\n                t('Approve')\n              )}\n            </ButtonConfirmed>\n          </AutoColumn>\n          <AutoColumn gap=\"12px\" style={{ flex: '1' }}>\n            <ButtonConfirmed\n              confirmed={isSuccessfullyMigrated}\n              disabled={\n                isSuccessfullyMigrated ||\n                noLiquidityTokens ||\n                isMigrationPending ||\n                approval !== ApprovalState.APPROVED ||\n                confirmingMigration\n              }\n              onClick={migrate}\n            >\n              {isSuccessfullyMigrated ? t('Success') : isMigrationPending ? <Dots>{t('Migrating')}</Dots> : t('Migrate')}\n            </ButtonConfirmed>\n          </AutoColumn>\n        </div>\n      </LightCard>\n      <TYPE.darkGray style={{ textAlign: 'center' }}>\n        {`Your Uniswap V1 ${token.symbol}/ETH liquidity will become Uniswap V2 ${token.symbol}/ETH liquidity.`}\n      </TYPE.darkGray>\n    </AutoColumn>\n  )\n}\n\nexport default function MigrateV1Exchange({\n  history,\n  match: {\n    params: { address }\n  }\n}: RouteComponentProps<{ address: string }>) {\n  const validatedAddress = isAddress(address)\n  const { chainId, account } = useActiveWeb3React()\n\n  const exchangeContract = useV1ExchangeContract(validatedAddress ? validatedAddress : undefined)\n  const tokenAddress = useSingleCallResult(exchangeContract, 'tokenAddress', undefined, NEVER_RELOAD)?.result?.[0]\n\n  const token = useToken(tokenAddress)\n  const { t } = useTranslation()\n\n\n  const liquidityToken: Token | undefined = useMemo(\n    () =>\n      validatedAddress && token\n        ? new Token(chainId, validatedAddress, 18, `UNI-V1-${token.symbol}`, 'Uniswap V1')\n        : undefined,\n    [chainId, validatedAddress, token]\n  )\n  const userLiquidityBalance = useTokenBalance(account, liquidityToken)\n\n  // redirect for invalid url params\n  if (!validatedAddress || tokenAddress === AddressZero) {\n    console.error('Invalid address in path', address)\n    return <Redirect to=\"/migrate/v1\" />\n  }\n\n  return (\n    <BodyWrapper style={{ padding: 24 }}>\n      <AutoColumn gap=\"16px\">\n        <AutoRow style={{ alignItems: 'center', justifyContent: 'space-between' }} gap=\"8px\">\n          <BackArrow to=\"/migrate/v1\" />\n          <TYPE.mediumHeader>{t('Migrate V1 Liquidity')}</TYPE.mediumHeader>\n          <div>\n            <QuestionHelper text={t('Migrate your liquidity tokens from Uniswap V1 to Uniswap V2.')} />\n          </div>\n        </AutoRow>\n\n        {!account ? (\n          <TYPE.largeHeader>{t('You must connect an account.')}</TYPE.largeHeader>\n        ) : validatedAddress && token?.equals(WETH[chainId]) ? (\n          <>\n            <TYPE.body my={9} style={{ fontWeight: 400 }}>\n            {t('Because Uniswap V2 uses WETH under the hood, your Uniswap V1 WETH/ETH liquidity cannot be migrated. You may want to remove your liquidity instead.')}\n            </TYPE.body>\n\n            <ButtonConfirmed\n              onClick={() => {\n                history.push(`/remove/v1/${validatedAddress}`)\n              }}\n            >\n              {t('Remove')}\n            </ButtonConfirmed>\n          </>\n        ) : userLiquidityBalance && token ? (\n          <V1PairMigration liquidityTokenAmount={userLiquidityBalance} token={token} />\n        ) : (\n          <EmptyState message={t('Loading...')} />\n        )}\n      </AutoColumn>\n    </BodyWrapper>\n  )\n}\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/analytics/GoogleAnalyticsReporter.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/state/application/reducer.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/state/user/reducer.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/state/transactions/reducer.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/state/multicall/reducer.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/state/mint/reducer.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/state/swap/reducer.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/state/burn/reducer.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/index.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/constants/tokens/mainnet.ts",["1303"],"import { Token, ChainId } from 'dexbr-sdk'\n\nexport const DAI = new Token(ChainId.MAINNET, '0x6B175474E89094C44Da98b954EedeAC495271d0F', 18, 'DAI', 'Dai Stablecoin')\nexport const USDC = new Token(ChainId.MAINNET, '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48', 6, 'USDC', 'USD//C')\nexport const USDT = new Token(ChainId.MAINNET, '0xdAC17F958D2ee523a2206206994597C13D831ec7', 6, 'USDT', 'Tether USD')\nexport const COMP = new Token(ChainId.MAINNET, '0xc00e94Cb662C3520282E6f5717214004A7f26888', 18, 'COMP', 'Compound')\nexport const MKR = new Token(ChainId.MAINNET, '0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2', 18, 'MKR', 'Maker')\n\nexport default [\n  new Token(ChainId.MAINNET, '0xB6eD7644C69416d67B522e20bC294A9a9B405B31', 8, '0xBTC', '0xBitcoin Token'),\n  new Token(ChainId.MAINNET, '0xfC1E690f61EFd961294b3e1Ce3313fBD8aa4f85d', 18, 'aDAI', 'Aave Interest bearing DAI'),\n  new Token(ChainId.MAINNET, '0x737F98AC8cA59f2C68aD658E3C3d8C8963E40a4c', 18, 'AMN', 'Amon'),\n  new Token(ChainId.MAINNET, '0xD46bA6D942050d489DBd938a2C909A5d5039A161', 9, 'AMPL', 'Ampleforth'),\n  new Token(ChainId.MAINNET, '0xcD62b1C403fa761BAadFC74C525ce2B51780b184', 18, 'ANJ', 'Aragon Network Juror'),\n  new Token(ChainId.MAINNET, '0x960b236A07cf122663c4303350609A66A7B288C0', 18, 'ANT', 'Aragon Network Token'),\n  new Token(ChainId.MAINNET, '0x27054b13b1B798B345b591a4d22e6562d47eA75a', 4, 'AST', 'AirSwap Token'),\n  new Token(ChainId.MAINNET, '0xBA11D00c5f74255f56a5E366F4F77f5A186d7f55', 18, 'BAND', 'BandToken'),\n  new Token(ChainId.MAINNET, '0x0D8775F648430679A709E98d2b0Cb6250d2887EF', 18, 'BAT', 'Basic Attention Token'),\n  new Token(ChainId.MAINNET, '0xba100000625a3754423978a60c9317c58a424e3D', 18, 'BAL', 'Balancer'),\n  new Token(ChainId.MAINNET, '0x107c4504cd79C5d2696Ea0030a8dD4e92601B82e', 18, 'BLT', 'Bloom Token'),\n  new Token(ChainId.MAINNET, '0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C', 18, 'BNT', 'Bancor Network Token'),\n  new Token(ChainId.MAINNET, '0x0327112423F3A68efdF1fcF402F6c5CB9f7C33fd', 18, 'BTC++', 'PieDAO BTC++'),\n  new Token(ChainId.MAINNET, '0x56d811088235F11C8920698a204A5010a788f4b3', 18, 'BZRX', 'bZx Protocol Token'),\n  new Token(ChainId.MAINNET, '0x4F9254C83EB525f9FCf346490bbb3ed28a81C667', 18, 'CELR', 'CelerToken'),\n  new Token(ChainId.MAINNET, '0xF5DCe57282A584D2746FaF1593d3121Fcac444dC', 8, 'cSAI', 'Compound Dai'),\n  new Token(ChainId.MAINNET, '0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643', 8, 'cDAI', 'Compound Dai'),\n  new Token(ChainId.MAINNET, '0x39AA39c021dfbaE8faC545936693aC917d5E7563', 8, 'cUSDC', 'Compound USD Coin'),\n  new Token(ChainId.MAINNET, '0xaaAEBE6Fe48E54f431b0C390CfaF0b017d09D42d', 4, 'CEL', 'Celsius'),\n  new Token(ChainId.MAINNET, '0x06AF07097C9Eeb7fD685c692751D5C66dB49c215', 18, 'CHAI', 'Chai'),\n  COMP,\n  new Token(ChainId.MAINNET, '0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359', 18, 'SAI', 'Dai Stablecoin v1.0 (SAI)'),\n  DAI,\n  new Token(ChainId.MAINNET, '0x0Cf0Ee63788A0849fE5297F3407f701E122cC023', 18, 'DATA', 'Streamr DATAcoin'),\n  new Token(ChainId.MAINNET, '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A', 9, 'DGD', 'DigixDAO'),\n  new Token(ChainId.MAINNET, '0x4f3AfEC4E5a3F2A6a1A411DEF7D7dFe50eE057bF', 9, 'DGX', 'Digix Gold Token'),\n  new Token(\n    ChainId.MAINNET,\n    '0xc719d010B63E5bbF2C0551872CD5316ED26AcD83',\n    18,\n    'DIP',\n    'Decentralized Insurance Protocol'\n  ),\n  new Token(ChainId.MAINNET, '0xC0F9bD5Fa5698B6505F643900FFA515Ea5dF54A9', 18, 'DONUT', 'Donut'),\n  new Token(ChainId.MAINNET, '0x86FADb80d8D2cff3C3680819E4da99C10232Ba0F', 18, 'EBASE', 'EURBASE Stablecoin'),\n  new Token(ChainId.MAINNET, '0xF629cBd94d3791C9250152BD8dfBDF380E2a3B9c', 18, 'ENJ', 'Enjin Coin'),\n  new Token(ChainId.MAINNET, '0x06f65b8CfCb13a9FE37d836fE9708dA38Ecb29B2', 18, 'FAME', 'SAINT FAME: Genesis Shirt'),\n  new Token(ChainId.MAINNET, '0x4946Fcea7C692606e8908002e55A582af44AC121', 18, 'FOAM', 'FOAM Token'),\n  new Token(ChainId.MAINNET, '0x419D0d8BdD9aF5e606Ae2232ed285Aff190E711b', 8, 'FUN', 'FunFair'),\n  new Token(ChainId.MAINNET, '0x4a57E687b9126435a9B19E4A802113e266AdeBde', 18, 'FXC', 'Flexacoin'),\n  new Token(ChainId.MAINNET, '0x543Ff227F64Aa17eA132Bf9886cAb5DB55DCAddf', 18, 'GEN', 'DAOstack'),\n  new Token(ChainId.MAINNET, '0x6810e776880C02933D47DB1b9fc05908e5386b96', 18, 'GNO', 'Gnosis Token'),\n  new Token(ChainId.MAINNET, '0x12B19D3e2ccc14Da04FAe33e63652ce469b3F2FD', 12, 'GRID', 'GRID Token'),\n  new Token(ChainId.MAINNET, '0x0000000000b3F879cb30FE243b4Dfee438691c04', 2, 'GST2', 'Gastoken.io'),\n  new Token(ChainId.MAINNET, '0xF1290473E210b2108A85237fbCd7b6eb42Cc654F', 18, 'HEDG', 'HedgeTrade'),\n  new Token(ChainId.MAINNET, '0x6c6EE5e31d828De241282B9606C8e98Ea48526E2', 18, 'HOT', 'HoloToken'),\n  new Token(ChainId.MAINNET, '0x493C57C4763932315A328269E1ADaD09653B9081', 18, 'iDAI', 'Fulcrum DAI iToken'),\n  new Token(ChainId.MAINNET, '0x14094949152EDDBFcd073717200DA82fEd8dC960', 18, 'iSAI', 'Fulcrum SAI iToken '),\n  new Token(ChainId.MAINNET, '0x6fB3e0A217407EFFf7Ca062D46c26E5d60a14d69', 18, 'IOTX', 'IoTeX Network'),\n  new Token(ChainId.MAINNET, '0x4Cd988AfBad37289BAAf53C13e98E2BD46aAEa8c', 18, 'KEY', 'KEY'),\n  new Token(ChainId.MAINNET, '0xdd974D5C2e2928deA5F71b9825b8b646686BD200', 18, 'KNC', 'Kyber Network Crystal'),\n  new Token(ChainId.MAINNET, '0x514910771AF9Ca656af840dff83E8264EcF986CA', 18, 'LINK', 'ChainLink Token'),\n  new Token(ChainId.MAINNET, '0xBBbbCA6A901c926F240b89EacB641d8Aec7AEafD', 18, 'LRC', 'LoopringCoin V2'),\n  new Token(ChainId.MAINNET, '0x80fB784B7eD66730e8b1DBd9820aFD29931aab03', 18, 'LEND', 'EthLend Token'),\n  new Token(ChainId.MAINNET, '0xA4e8C3Ec456107eA67d3075bF9e3DF3A75823DB0', 18, 'LOOM', 'LoomToken'),\n  new Token(ChainId.MAINNET, '0x58b6A8A3302369DAEc383334672404Ee733aB239', 18, 'LPT', 'Livepeer Token'),\n  new Token(ChainId.MAINNET, '0xD29F0b5b3F50b07Fe9a9511F7d86F4f4bAc3f8c4', 18, 'LQD', 'Liquidity.Network Token'),\n  new Token(ChainId.MAINNET, '0x0F5D2fB29fb7d3CFeE444a200298f468908cC942', 18, 'MANA', 'Decentraland MANA'),\n  new Token(ChainId.MAINNET, '0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0', 18, 'MATIC', 'Matic Token'),\n  new Token(ChainId.MAINNET, '0x8888889213DD4dA823EbDD1e235b09590633C150', 18, 'MBC', 'Marblecoin'),\n  new Token(ChainId.MAINNET, '0xd15eCDCF5Ea68e3995b2D0527A0aE0a3258302F8', 18, 'MCX', 'MachiX Token'),\n  new Token(ChainId.MAINNET, '0xa3d58c4E56fedCae3a7c43A725aeE9A71F0ece4e', 18, 'MET', 'Metronome'),\n  new Token(ChainId.MAINNET, '0x80f222a749a2e18Eb7f676D371F19ad7EFEEe3b7', 18, 'MGN', 'Magnolia Token'),\n  MKR,\n  new Token(ChainId.MAINNET, '0xec67005c4E498Ec7f55E092bd1d35cbC47C91892', 18, 'MLN', 'Melon Token'),\n  new Token(ChainId.MAINNET, '0x957c30aB0426e0C93CD8241E2c60392d08c6aC8e', 0, 'MOD', 'Modum Token'),\n  new Token(ChainId.MAINNET, '0xe2f2a5C287993345a840Db3B0845fbC70f5935a5', 18, 'mUSD', 'mStable USD'),\n  new Token(ChainId.MAINNET, '0xB62132e35a6c13ee1EE0f84dC5d40bad8d815206', 18, 'NEXO', 'Nexo'),\n  new Token(ChainId.MAINNET, '0x1776e1F26f98b1A5dF9cD347953a26dd3Cb46671', 18, 'NMR', 'Numeraire'),\n  new Token(ChainId.MAINNET, '0x985dd3D42De1e256d09e1c10F112bCCB8015AD41', 18, 'OCEAN', 'OceanToken'),\n  new Token(ChainId.MAINNET, '0x4575f41308EC1483f3d399aa9a2826d74Da13Deb', 18, 'OXT', 'Orchid'),\n  new Token(ChainId.MAINNET, '0xD56daC73A4d6766464b38ec6D91eB45Ce7457c44', 18, 'PAN', 'Panvala pan'),\n  new Token(ChainId.MAINNET, '0x8E870D67F660D95d5be530380D0eC0bd388289E1', 18, 'PAX', 'PAX'),\n  new Token(ChainId.MAINNET, '0x45804880De22913dAFE09f4980848ECE6EcbAf78', 18, 'PAXG', 'Paxos Gold'),\n  new Token(ChainId.MAINNET, '0x93ED3FBe21207Ec2E8f2d3c3de6e058Cb73Bc04d', 18, 'PNK', 'Pinakion'),\n  new Token(ChainId.MAINNET, '0x6758B7d441a9739b98552B373703d8d3d14f9e62', 18, 'POA20', 'POA ERC20 on Foundation'),\n  new Token(ChainId.MAINNET, '0x687BfC3E73f6af55F0CccA8450114D107E781a0e', 18, 'QCH', 'QChi'),\n  new Token(ChainId.MAINNET, '0x4a220E6096B25EADb88358cb44068A3248254675', 18, 'QNT', 'Quant'),\n  new Token(ChainId.MAINNET, '0x99ea4dB9EE77ACD40B119BD1dC4E33e1C070b80d', 18, 'QSP', 'Quantstamp Token'),\n  new Token(ChainId.MAINNET, '0xF970b8E36e23F7fC3FD752EeA86f8Be8D83375A6', 18, 'RCN', 'Ripio Credit Network Token'),\n  new Token(ChainId.MAINNET, '0x255Aa6DF07540Cb5d3d297f0D0D4D84cb52bc8e6', 18, 'RDN', 'Raiden Token'),\n  new Token(ChainId.MAINNET, '0x408e41876cCCDC0F92210600ef50372656052a38', 18, 'REN', 'Republic Token'),\n  new Token(ChainId.MAINNET, '0x459086F2376525BdCebA5bDDA135e4E9d3FeF5bf', 8, 'renBCH', 'renBCH'),\n  new Token(ChainId.MAINNET, '0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D', 8, 'renBTC', 'renBTC'),\n  new Token(ChainId.MAINNET, '0x1C5db575E2Ff833E46a2E9864C22F4B22E0B37C2', 8, 'renZEC', 'renZEC'),\n  new Token(ChainId.MAINNET, '0x1985365e9f78359a9B6AD760e32412f4a445E862', 18, 'REPv1', 'Augur v1 Reputation'),\n  new Token(ChainId.MAINNET, '0x9469D013805bFfB7D3DEBe5E7839237e535ec483', 18, 'RING', 'Darwinia Network Native Token'),\n  new Token(ChainId.MAINNET, '0x607F4C5BB672230e8672085532f7e901544a7375', 9, 'RLC', 'iEx.ec Network Token'),\n  new Token(ChainId.MAINNET, '0xB4EFd85c19999D84251304bDA99E90B92300Bd93', 18, 'RPL', 'Rocket Pool'),\n  new Token(ChainId.MAINNET, '0x4156D3342D5c385a87D264F90653733592000581', 8, 'SALT', 'Salt'),\n  new Token(ChainId.MAINNET, '0x7C5A0CE9267ED19B22F8cae653F198e3E8daf098', 18, 'SAN', 'SANtiment network token'),\n  new Token(ChainId.MAINNET, '0x5e74C9036fb86BD7eCdcb084a0673EFc32eA31cb', 18, 'sETH', 'Synth sETH'),\n  new Token(ChainId.MAINNET, '0x3A9FfF453d50D4Ac52A6890647b823379ba36B9E', 18, 'SHUF', 'Shuffle.Monster V3'),\n  new Token(ChainId.MAINNET, '0x744d70FDBE2Ba4CF95131626614a1763DF805B9E', 18, 'SNT', 'Status Network Token'),\n  new Token(ChainId.MAINNET, '0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F', 18, 'SNX', 'Synthetix Network Token'),\n  new Token(ChainId.MAINNET, '0x23B608675a2B2fB1890d3ABBd85c5775c51691d5', 18, 'SOCKS', 'Unisocks Edition 0'),\n  new Token(ChainId.MAINNET, '0x42d6622deCe394b54999Fbd73D108123806f6a18', 18, 'SPANK', 'SPANK'),\n  new Token(ChainId.MAINNET, '0x0Ae055097C6d159879521C384F1D2123D1f195e6', 18, 'STAKE', 'STAKE'),\n  new Token(ChainId.MAINNET, '0xB64ef51C888972c908CFacf59B47C1AfBC0Ab8aC', 8, 'STORJ', 'StorjToken'),\n  new Token(ChainId.MAINNET, '0x57Ab1ec28D129707052df4dF418D58a2D46d5f51', 18, 'sUSD', 'Synth sUSD'),\n  new Token(ChainId.MAINNET, '0x261EfCdD24CeA98652B9700800a13DfBca4103fF', 18, 'sXAU', 'Synth sXAU'),\n  new Token(ChainId.MAINNET, '0x8CE9137d39326AD0cD6491fb5CC0CbA0e089b6A9', 18, 'SXP', 'Swipe'),\n  new Token(ChainId.MAINNET, '0x00006100F7090010005F1bd7aE6122c3C2CF0090', 18, 'TAUD', 'TrueAUD'),\n  new Token(ChainId.MAINNET, '0x00000100F2A2bd000715001920eB70D229700085', 18, 'TCAD', 'TrueCAD'),\n  new Token(ChainId.MAINNET, '0x00000000441378008EA67F4284A57932B1c000a5', 18, 'TGBP', 'TrueGBP'),\n  new Token(ChainId.MAINNET, '0x0000852600CEB001E08e00bC008be620d60031F2', 18, 'THKD', 'TrueHKD'),\n  new Token(ChainId.MAINNET, '0xaAAf91D9b90dF800Df4F55c205fd6989c977E73a', 8, 'TKN', 'Monolith TKN'),\n  new Token(ChainId.MAINNET, '0x0Ba45A8b5d5575935B8158a88C631E9F9C95a2e5', 18, 'TRB', 'Tellor Tributes'),\n  new Token(ChainId.MAINNET, '0xCb94be6f13A1182E4A4B6140cb7bf2025d28e41B', 6, 'TRST', 'Trustcoin'),\n  new Token(ChainId.MAINNET, '0x2C537E5624e4af88A7ae4060C022609376C8D0EB', 6, 'TRYB', 'BiLira'),\n  new Token(ChainId.MAINNET, '0x0000000000085d4780B73119b644AE5ecd22b376', 18, 'TUSD', 'TrueUSD'),\n  new Token(ChainId.MAINNET, '0x8400D94A5cb0fa0D041a3788e395285d61c9ee5e', 8, 'UBT', 'UniBright'),\n  new Token(ChainId.MAINNET, '0x04Fa0d235C4abf4BcF4787aF4CF447DE572eF828', 18, 'UMA', 'UMA Voting Token v1'),\n  USDC,\n  new Token(ChainId.MAINNET, '0xA4Bdb11dc0a2bEC88d24A3aa1E6Bb17201112eBe', 6, 'USDS', 'StableUSD'),\n  USDT,\n  new Token(ChainId.MAINNET, '0xeb269732ab75A6fD61Ea60b06fE994cD32a83549', 18, 'USDx', 'dForce'),\n  new Token(ChainId.MAINNET, '0x9A48BD0EC040ea4f1D3147C025cd4076A2e71e3e', 18, 'USD++', 'PieDAO USD++'),\n  new Token(ChainId.MAINNET, '0x8f3470A7388c05eE4e7AF3d01D8C722b0FF52374', 18, 'VERI', 'Veritaseum'),\n  new Token(ChainId.MAINNET, '0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599', 8, 'WBTC', 'Wrapped BTC'),\n  new Token(ChainId.MAINNET, '0x09fE5f0236F0Ea5D930197DCE254d77B04128075', 18, 'WCK', 'Wrapped CryptoKitties'),\n  new Token(ChainId.MAINNET, '0xB4272071eCAdd69d933AdcD19cA99fe80664fc08', 18, 'XCHF', 'CryptoFranc'),\n  new Token(ChainId.MAINNET, '0x0f7F961648aE6Db43C75663aC7E5414Eb79b5704', 18, 'XIO', 'XIO Network'),\n  new Token(ChainId.MAINNET, '0xE41d2489571d322189246DaFA5ebDe1F4699F498', 18, 'ZRX', '0x Protocol Token')\n]\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/constants/abis/erc20.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/constants/abis/migrator.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/theme/components.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/state/user/hooks.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/MigrateV1/index.tsx",["1304","1305","1306","1307"],"import { JSBI, Token } from 'dexbr-sdk'\nimport React, { useCallback, useContext, useMemo, useState, useEffect } from 'react'\nimport { ThemeContext } from 'styled-components'\nimport { AutoColumn } from '../../components/Column'\nimport { AutoRow } from '../../components/Row'\nimport { SearchInput } from '../../components/SearchModal/styleds'\nimport { useAllTokenV1Exchanges } from '../../data/V1'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useToken, useAllTokens } from '../../hooks/Tokens'\nimport { useTokenBalancesWithLoadingIndicator } from '../../state/wallet/hooks'\nimport { BackArrow, TYPE } from '../../theme'\nimport { LightCard } from '../../components/Card'\nimport { BodyWrapper } from '../AppBody'\nimport { EmptyState } from './EmptyState'\nimport V1PositionCard from '../../components/PositionCard/V1'\nimport QuestionHelper from '../../components/QuestionHelper'\nimport { Dots } from '../../components/swap/styleds'\nimport { useAddUserToken } from '../../state/user/hooks'\nimport { isDefaultToken, isCustomAddedToken } from '../../utils'\nimport { useTranslation } from 'react-i18next'\n\n\nexport default function MigrateV1() {\n  const theme = useContext(ThemeContext)\n  const { account, chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n\n\n  const [tokenSearch, setTokenSearch] = useState<string>('')\n  const handleTokenSearchChange = useCallback(e => setTokenSearch(e.target.value), [setTokenSearch])\n\n  // automatically add the search token\n  const token = useToken(tokenSearch)\n  const isDefault = isDefaultToken(token)\n  const allTokens = useAllTokens()\n  const isCustomAdded = isCustomAddedToken(allTokens, token)\n  const addToken = useAddUserToken()\n  useEffect(() => {\n    if (token && !isDefault && !isCustomAdded) {\n      addToken(token)\n    }\n  }, [token, isDefault, isCustomAdded, addToken])\n\n  // get V1 LP balances\n  const V1Exchanges = useAllTokenV1Exchanges()\n  const V1LiquidityTokens: Token[] = useMemo(() => {\n    return Object.keys(V1Exchanges).map(\n      exchangeAddress => new Token(chainId, exchangeAddress, 18, 'UNI-V1', 'Uniswap V1')\n    )\n  }, [chainId, V1Exchanges])\n  const [V1LiquidityBalances, V1LiquidityBalancesLoading] = useTokenBalancesWithLoadingIndicator(\n    account,\n    V1LiquidityTokens\n  )\n  const allV1PairsWithLiquidity = V1LiquidityTokens.filter(V1LiquidityToken => {\n    return (\n      V1LiquidityBalances?.[V1LiquidityToken.address] &&\n      JSBI.greaterThan(V1LiquidityBalances[V1LiquidityToken.address].raw, JSBI.BigInt(0))\n    )\n  }).map(V1LiquidityToken => {\n    return (\n      <V1PositionCard\n        key={V1LiquidityToken.address}\n        token={V1Exchanges[V1LiquidityToken.address]}\n        V1LiquidityBalance={V1LiquidityBalances[V1LiquidityToken.address]}\n      />\n    )\n  })\n\n  // should never always be false, because a V1 exhchange exists for WETH on all testnets\n  const isLoading = Object.keys(V1Exchanges)?.length === 0 || V1LiquidityBalancesLoading\n\n  return (\n    <BodyWrapper style={{ padding: 24 }}>\n      <AutoColumn gap=\"16px\">\n        <AutoRow style={{ alignItems: 'center', justifyContent: 'space-between' }} gap=\"8px\">\n          <BackArrow to=\"/pool\" />\n          <TYPE.mediumHeader>{t('Migrate V1 Liquidity')}</TYPE.mediumHeader>\n          <div>\n            <QuestionHelper text={t('Migrate your liquidity tokens from Uniswap V1 to Uniswap V2.')} />\n          </div>\n        </AutoRow>\n\n        <TYPE.body style={{ marginBottom: 8, fontWeight: 400 }}>\n        {t('For each pool shown below, click migrate to remove your liquidity from Uniswap V1 and deposit it into Uniswap V2.')}\n        </TYPE.body>\n\n        {!account ? (\n          <LightCard padding=\"40px\">\n            <TYPE.body color={theme.text3} textAlign=\"center\">\n            {t('Connect to a wallet to view your V1 liquidity.')}\n            </TYPE.body>\n          </LightCard>\n        ) : isLoading ? (\n          <LightCard padding=\"40px\">\n            <TYPE.body color={theme.text3} textAlign=\"center\">\n              <Dots>{t('Loading')}</Dots>\n            </TYPE.body>\n          </LightCard>\n        ) : (\n          <>\n            <AutoRow>\n              <SearchInput\n                value={tokenSearch}\n                onChange={handleTokenSearchChange}\n                placeholder={t('Enter a token address to find liquidity')}\n              />\n            </AutoRow>\n            {allV1PairsWithLiquidity?.length > 0 ? (\n              <>{allV1PairsWithLiquidity}</>\n            ) : (\n              <EmptyState message={t('No V1 Liquidity found.')} />\n            )}\n          </>\n        )}\n      </AutoColumn>\n    </BodyWrapper>\n  )\n}\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/AddLiquidity/index.tsx",["1308","1309","1310","1311","1312"],"import { BigNumber } from '@ethersproject/bignumber'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { ChainId, Token, TokenAmount, WETH } from 'dexbr-sdk'\nimport React, { useCallback, useContext, useState } from 'react'\nimport { Plus } from 'react-feather'\nimport ReactGA from 'react-ga'\nimport { RouteComponentProps } from 'react-router-dom'\nimport { Text } from 'rebass'\nimport { ThemeContext } from 'styled-components'\nimport { ButtonError, ButtonLight, ButtonPrimary } from '../../components/Button'\nimport { BlueCard, GreyCard, LightCard } from '../../components/Card'\nimport { AutoColumn, ColumnCenter } from '../../components/Column'\nimport ConfirmationModal from '../../components/ConfirmationModal'\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\nimport DoubleLogo from '../../components/DoubleLogo'\nimport { AddRemoveTabs } from '../../components/NavigationTabs'\nimport { MinimalPositionCard } from '../../components/PositionCard'\nimport Row, { RowBetween, RowFlat } from '../../components/Row'\n\nimport { ROUTER_ADDRESS } from '../../constants'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useToken } from '../../hooks/Tokens'\nimport { ApprovalState, useApproveCallback } from '../../hooks/useApproveCallback'\nimport { useWalletModalToggle } from '../../state/application/hooks'\nimport { Field } from '../../state/mint/actions'\nimport { useDerivedMintInfo, useMintActionHandlers, useMintState } from '../../state/mint/hooks'\n\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport { useIsExpertMode, useUserDeadline, useUserSlippageTolerance } from '../../state/user/hooks'\nimport { TYPE } from '../../theme'\nimport { calculateGasMargin, calculateSlippageAmount, getRouterContract } from '../../utils'\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\nimport AppBody from '../AppBody'\nimport { Dots, Wrapper } from '../Pool/styleds'\nimport { ConfirmAddModalBottom } from './ConfirmAddModalBottom'\nimport { currencyId } from './currencyId'\nimport { PoolPriceBar } from './PoolPriceBar'\nimport { useTranslation } from 'react-i18next'\n\n\nfunction useTokenByCurrencyId(chainId: ChainId | undefined, currencyId: string | undefined): Token | undefined {\n  const isETH = currencyId?.toUpperCase() === 'ETH'\n  const token = useToken(isETH ? undefined : currencyId)\n  return isETH && chainId ? WETH[chainId] : token ?? undefined\n}\n\nexport default function AddLiquidity({\n  match: {\n    params: { currencyIdA, currencyIdB }\n  },\n  history\n}: RouteComponentProps<{ currencyIdA?: string; currencyIdB?: string }>) {\n  const { account, chainId, library } = useActiveWeb3React()\n  const theme = useContext(ThemeContext)\n\n  const tokenA = useTokenByCurrencyId(chainId, currencyIdA)\n  const tokenB = useTokenByCurrencyId(chainId, currencyIdB)\n\n  // toggle wallet when disconnected\n  const toggleWalletModal = useWalletModalToggle()\n\n  const expertMode = useIsExpertMode()\n\n  // mint state\n  const { independentField, typedValue, otherTypedValue } = useMintState()\n  const {\n    dependentField,\n    tokens,\n    pair,\n    tokenBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error\n  } = useDerivedMintInfo(tokenA ?? undefined, tokenB ?? undefined)\n  const { onUserInput } = useMintActionHandlers(noLiquidity)\n\n  const handleTokenAInput = useCallback(\n    (field: string, value: string) => {\n      return onUserInput(Field.TOKEN_A, value)\n    },\n    [onUserInput]\n  )\n  const handleTokenBInput = useCallback(\n    (field: string, value: string) => {\n      return onUserInput(Field.TOKEN_B, value)\n    },\n    [onUserInput]\n  )\n\n  const isValid = !error\n\n  // modal and loading\n  const [showConfirm, setShowConfirm] = useState<boolean>(false)\n  const [attemptingTxn, setAttemptingTxn] = useState<boolean>(false) // clicked confirm\n\n  // txn values\n  const [deadline] = useUserDeadline() // custom from users settings\n  const [allowedSlippage] = useUserSlippageTolerance() // custom from users\n  const [txHash, setTxHash] = useState<string>('')\n\n  // get formatted amounts\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: noLiquidity ? otherTypedValue : parsedAmounts[dependentField]?.toSignificant(6) ?? ''\n  }\n\n  // get the max amounts user can add\n  const maxAmounts: { [field in Field]?: TokenAmount } = [Field.TOKEN_A, Field.TOKEN_B].reduce((accumulator, field) => {\n    return {\n      ...accumulator,\n      [field]: maxAmountSpend(tokenBalances[field])\n    }\n  }, {})\n\n  const atMaxAmounts: { [field in Field]?: TokenAmount } = [Field.TOKEN_A, Field.TOKEN_B].reduce(\n    (accumulator, field) => {\n      return {\n        ...accumulator,\n        [field]: maxAmounts[field]?.equalTo(parsedAmounts[field] ?? '0')\n      }\n    },\n    {}\n  )\n\n  // check whether the user has approved the router on the tokens\n  const [approvalA, approveACallback] = useApproveCallback(parsedAmounts[Field.TOKEN_A], ROUTER_ADDRESS)\n  const [approvalB, approveBCallback] = useApproveCallback(parsedAmounts[Field.TOKEN_B], ROUTER_ADDRESS)\n\n  const addTransaction = useTransactionAdder()\n\n  async function onAdd() {\n    if (!chainId || !library || !account) return\n    const router = getRouterContract(chainId, library, account)\n\n    const { [Field.TOKEN_A]: parsedAmountA, [Field.TOKEN_B]: parsedAmountB } = parsedAmounts\n    if (!parsedAmountA || !parsedAmountB || !tokenA || !tokenB) {\n      return\n    }\n\n    const amountsMin = {\n      [Field.TOKEN_A]: calculateSlippageAmount(parsedAmountA, noLiquidity ? 0 : allowedSlippage)[0],\n      [Field.TOKEN_B]: calculateSlippageAmount(parsedAmountB, noLiquidity ? 0 : allowedSlippage)[0]\n    }\n\n    const deadlineFromNow = Math.ceil(Date.now() / 1000) + deadline\n\n    let estimate,\n      method: (...args: any) => Promise<TransactionResponse>,\n      args: Array<string | string[] | number>,\n      value: BigNumber | null\n    if (tokenA.equals(WETH[chainId]) || tokenB.equals(WETH[chainId])) {\n      const tokenBIsETH = tokenB.equals(WETH[chainId])\n      estimate = router.estimateGas.addLiquidityETH\n      method = router.addLiquidityETH\n      args = [\n        (tokenBIsETH ? tokenA : tokenB).address, // token\n        (tokenBIsETH ? parsedAmountA : parsedAmountB).raw.toString(), // token desired\n        amountsMin[tokenBIsETH ? Field.TOKEN_A : Field.TOKEN_B].toString(), // token min\n        amountsMin[tokenBIsETH ? Field.TOKEN_B : Field.TOKEN_A].toString(), // eth min\n        account,\n        deadlineFromNow\n      ]\n      value = BigNumber.from((tokenBIsETH ? parsedAmountB : parsedAmountA).raw.toString())\n    } else {\n      estimate = router.estimateGas.addLiquidity\n      method = router.addLiquidity\n      args = [\n        tokenA.address,\n        tokenB.address,\n        parsedAmountA.raw.toString(),\n        parsedAmountB.raw.toString(),\n        amountsMin[Field.TOKEN_A].toString(),\n        amountsMin[Field.TOKEN_B].toString(),\n        account,\n        deadlineFromNow\n      ]\n      value = null\n    }\n\n    setAttemptingTxn(true)\n    await estimate(...args, value ? { value } : {})\n      .then(estimatedGasLimit =>\n        method(...args, {\n          ...(value ? { value } : {}),\n          gasLimit: calculateGasMargin(estimatedGasLimit)\n        }).then(response => {\n          setAttemptingTxn(false)\n\n          addTransaction(response, {\n            summary:\n              t('Add ') +\n              parsedAmounts[Field.TOKEN_A]?.toSignificant(3) +\n              ' ' +\n              tokens[Field.TOKEN_A]?.symbol +\n              t(' and ') +\n              parsedAmounts[Field.TOKEN_B]?.toSignificant(3) +\n              ' ' +\n              tokens[Field.TOKEN_B]?.symbol\n          })\n\n          setTxHash(response.hash)\n\n          ReactGA.event({\n            category: 'Liquidity',\n            action: 'Add',\n            label: [tokens[Field.TOKEN_A]?.symbol, tokens[Field.TOKEN_B]?.symbol].join('/')\n          })\n        })\n      )\n      .catch(error => {\n        setAttemptingTxn(false)\n        // we only care if the error is something _other_ than the user rejected the tx\n        if (error?.code !== 4001) {\n          console.error(error)\n        }\n      })\n  }\n\n  const modalHeader = () => {\n    return noLiquidity ? (\n      <AutoColumn gap=\"20px\">\n        <LightCard mt=\"20px\" borderRadius=\"20px\">\n          <RowFlat>\n            <Text fontSize=\"48px\" fontWeight={500} lineHeight=\"42px\" marginRight={10}>\n              {tokens[Field.TOKEN_A]?.symbol + '/' + tokens[Field.TOKEN_B]?.symbol}\n            </Text>\n            <DoubleLogo a0={tokens[Field.TOKEN_A]?.address} a1={tokens[Field.TOKEN_B]?.address} size={30} />\n          </RowFlat>\n        </LightCard>\n      </AutoColumn>\n    ) : (\n      <AutoColumn gap=\"20px\">\n        <RowFlat style={{ marginTop: '20px' }}>\n          <Text fontSize=\"48px\" fontWeight={500} lineHeight=\"42px\" marginRight={10}>\n            {liquidityMinted?.toSignificant(6)}\n          </Text>\n          <DoubleLogo a0={tokens[Field.TOKEN_A]?.address} a1={tokens[Field.TOKEN_B]?.address} size={30} />\n        </RowFlat>\n        <Row>\n          <Text fontSize=\"24px\">\n            {tokens[Field.TOKEN_A]?.symbol + '/' + tokens[Field.TOKEN_B]?.symbol + ' Pool Tokens'}\n          </Text>\n        </Row>\n        <TYPE.italic fontSize={12} textAlign=\"left\" padding={'8px 0 0 0 '}>\n          {`Output is estimated. If the price changes by more than ${allowedSlippage /\n            100}% your transaction will revert.`}\n        </TYPE.italic>\n      </AutoColumn>\n    )\n  }\n\n  const modalBottom = () => {\n    return (\n      <ConfirmAddModalBottom\n        price={price}\n        tokens={tokens}\n        parsedAmounts={parsedAmounts}\n        noLiquidity={noLiquidity}\n        onAdd={onAdd}\n        poolTokenPercentage={poolTokenPercentage}\n      />\n    )\n  }\n\n  const pendingText = `Supplying ${parsedAmounts[Field.TOKEN_A]?.toSignificant(6)} ${\n    tokens[Field.TOKEN_A]?.symbol\n  } and ${parsedAmounts[Field.TOKEN_B]?.toSignificant(6)} ${tokens[Field.TOKEN_B]?.symbol}`\n\n  const handleTokenASelect = useCallback(\n    (tokenAddress: string) => {\n      const [tokenAId, tokenBId] = [\n        currencyId(chainId, tokenAddress),\n        tokenB ? currencyId(chainId, tokenB.address) : undefined\n      ]\n      if (tokenAId === tokenBId) {\n        history.push(`/add/${tokenAId}/${tokenA ? currencyId(chainId, tokenA.address) : ''}`)\n      } else {\n        history.push(`/add/${tokenAId}/${tokenBId}`)\n      }\n    },\n    [chainId, tokenB, history, tokenA]\n  )\n  const handleTokenBSelect = useCallback(\n    (tokenAddress: string) => {\n      const [tokenAId, tokenBId] = [\n        tokenA ? currencyId(chainId, tokenA.address) : undefined,\n        currencyId(chainId, tokenAddress)\n      ]\n      if (tokenAId === tokenBId) {\n        history.push(`/add/${tokenB ? currencyId(chainId, tokenB.address) : ''}/${tokenAId}`)\n      } else {\n        history.push(`/add/${currencyIdA ? currencyIdA : 'ETH'}/${currencyId(chainId, tokenAddress)}`)\n      }\n    },\n    [tokenA, chainId, history, tokenB, currencyIdA]\n  )\n\n  const { t } = useTranslation()\n\n\n  return (\n    <>\n      <AppBody>\n        <AddRemoveTabs adding={true} />\n        <Wrapper>\n          <ConfirmationModal\n            isOpen={showConfirm}\n            onDismiss={() => {\n              setShowConfirm(false)\n              // if there was a tx hash, we want to clear the input\n              if (txHash) {\n                onUserInput(Field.TOKEN_A, '')\n              }\n              setTxHash('')\n            }}\n            attemptingTxn={attemptingTxn}\n            hash={txHash}\n            topContent={() => modalHeader()}\n            bottomContent={modalBottom}\n            pendingText={pendingText}\n            title={noLiquidity ? t('You are creating a pool') : t('You will receive')}\n          />\n          <AutoColumn gap=\"20px\">\n            {noLiquidity && (\n              <ColumnCenter>\n                <BlueCard>\n                  <AutoColumn gap=\"10px\">\n                    <TYPE.link fontWeight={600} color={'primaryText1'}>\n                    {t('You are the first liquidity provider.')}\n                    </TYPE.link>\n                    <TYPE.link fontWeight={400} color={'primaryText1'}>\n                      {t('The ratio of tokens you add will set the price of this pool.')}\n                    </TYPE.link>\n                    <TYPE.link fontWeight={400} color={'primaryText1'}>\n                      {t('Once you are happy with the rate click supply to review.')}\n                    </TYPE.link>\n                  </AutoColumn>\n                </BlueCard>\n              </ColumnCenter>\n            )}\n            <CurrencyInputPanel\n              field={Field.TOKEN_A}\n              value={formattedAmounts[Field.TOKEN_A]}\n              onUserInput={handleTokenAInput}\n              onMax={() => {\n                onUserInput(Field.TOKEN_A, maxAmounts[Field.TOKEN_A]?.toExact() ?? '')\n              }}\n              onTokenSelection={handleTokenASelect}\n              showMaxButton={!atMaxAmounts[Field.TOKEN_A]}\n              token={tokens[Field.TOKEN_A]}\n              pair={pair}\n              id=\"add-liquidity-input-tokena\"\n              showCommonBases\n            />\n            <ColumnCenter>\n              <Plus size=\"16\" color={theme.text2} />\n            </ColumnCenter>\n            <CurrencyInputPanel\n              field={Field.TOKEN_B}\n              value={formattedAmounts[Field.TOKEN_B]}\n              onUserInput={handleTokenBInput}\n              onTokenSelection={handleTokenBSelect}\n              onMax={() => {\n                onUserInput(Field.TOKEN_B, maxAmounts[Field.TOKEN_B]?.toExact() ?? '')\n              }}\n              showMaxButton={!atMaxAmounts[Field.TOKEN_B]}\n              token={tokens[Field.TOKEN_B]}\n              pair={pair}\n              id=\"add-liquidity-input-tokenb\"\n              showCommonBases\n            />\n            {tokens[Field.TOKEN_A] && tokens[Field.TOKEN_B] && (\n              <>\n                <GreyCard padding=\"0px\" borderRadius={'20px'}>\n                  <RowBetween padding=\"1rem\">\n                    <TYPE.subHeader fontWeight={500} fontSize={14}>\n                      {noLiquidity ? t('Initial prices') : t('Prices')} {t('and pool share')}\n                    </TYPE.subHeader>\n                  </RowBetween>{' '}\n                  <LightCard padding=\"1rem\" borderRadius={'20px'}>\n                    <PoolPriceBar\n                      tokens={tokens}\n                      poolTokenPercentage={poolTokenPercentage}\n                      noLiquidity={noLiquidity}\n                      price={price}\n                    />\n                  </LightCard>\n                </GreyCard>\n              </>\n            )}\n\n            {!account ? (\n              <ButtonLight onClick={toggleWalletModal}>Connect Wallet</ButtonLight>\n            ) : (\n              <AutoColumn gap={'md'}>\n                {(approvalA === ApprovalState.NOT_APPROVED ||\n                  approvalA === ApprovalState.PENDING ||\n                  approvalB === ApprovalState.NOT_APPROVED ||\n                  approvalB === ApprovalState.PENDING) &&\n                  isValid && (\n                    <RowBetween>\n                      {approvalA !== ApprovalState.APPROVED && (\n                        <ButtonPrimary\n                          onClick={approveACallback}\n                          disabled={approvalA === ApprovalState.PENDING}\n                          width={approvalB !== ApprovalState.APPROVED ? '48%' : '100%'}\n                        >\n                          {approvalA === ApprovalState.PENDING ? (\n                            <Dots>{t('Approving')} {tokens[Field.TOKEN_A]?.symbol}</Dots>\n                          ) : (\n                            t('Approve ') + tokens[Field.TOKEN_A]?.symbol\n                          )}\n                        </ButtonPrimary>\n                      )}\n                      {approvalB !== ApprovalState.APPROVED && (\n                        <ButtonPrimary\n                          onClick={approveBCallback}\n                          disabled={approvalB === ApprovalState.PENDING}\n                          width={approvalA !== ApprovalState.APPROVED ? '48%' : '100%'}\n                        >\n                          {approvalB === ApprovalState.PENDING ? (\n                            <Dots>{t('Approving')} {tokens[Field.TOKEN_B]?.symbol}</Dots>\n                          ) : (\n                            t('Approve ') + tokens[Field.TOKEN_B]?.symbol\n                          )}\n                        </ButtonPrimary>\n                      )}\n                    </RowBetween>\n                  )}\n                <ButtonError\n                  onClick={() => {\n                    expertMode ? onAdd() : setShowConfirm(true)\n                  }}\n                  disabled={!isValid || approvalA !== ApprovalState.APPROVED || approvalB !== ApprovalState.APPROVED}\n                  error={!isValid && !!parsedAmounts[Field.TOKEN_A] && !!parsedAmounts[Field.TOKEN_B]}\n                >\n                  <Text fontSize={20} fontWeight={500}>\n                    {error ?? t('Supply')}\n                  </Text>\n                </ButtonError>\n              </AutoColumn>\n            )}\n          </AutoColumn>\n        </Wrapper>\n      </AppBody>\n\n      {pair && !noLiquidity ? (\n        <AutoColumn style={{ minWidth: '20rem', marginTop: '1rem' }}>\n          <MinimalPositionCard pair={pair} />\n        </AutoColumn>\n      ) : null}\n    </>\n  )\n}\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/Pool/index.tsx",["1313","1314","1315","1316","1317"],"import React, { useContext } from 'react'\nimport { ThemeContext } from 'styled-components'\nimport { Pair } from 'dexbr-sdk'\nimport { Link } from 'react-router-dom'\nimport { SwapPoolTabs } from '../../components/NavigationTabs'\n\nimport Question from '../../components/QuestionHelper'\nimport FullPositionCard from '../../components/PositionCard'\nimport { useUserHasLiquidityInAllTokens } from '../../data/V1'\nimport { useTokenBalancesWithLoadingIndicator } from '../../state/wallet/hooks'\nimport { StyledInternalLink, TYPE } from '../../theme'\nimport { Text } from 'rebass'\nimport { LightCard } from '../../components/Card'\nimport { RowBetween } from '../../components/Row'\nimport { ButtonPrimary, ButtonSecondary, ButtonLight } from '../../components/Button'\nimport { AutoColumn } from '../../components/Column'\n\nimport { useActiveWeb3React } from '../../hooks'\nimport { usePairs } from '../../data/Reserves'\nimport { useAllDummyPairs } from '../../state/user/hooks'\nimport AppBody from '../AppBody'\nimport { Dots } from '../../components/swap/styleds'\nimport { useTranslation } from 'react-i18next'\n\n\nexport default function Pool() {\n  const theme = useContext(ThemeContext)\n  const { account } = useActiveWeb3React()\n  const { t } = useTranslation()\n\n\n  // fetch the user's balances of all tracked V2 LP tokens\n  const v2DummyPairs = useAllDummyPairs()\n  const [v2PairsBalances, fetchingV2PairBalances] = useTokenBalancesWithLoadingIndicator(\n    account ?? undefined,\n    v2DummyPairs?.map(p => p.liquidityToken)\n  )\n  // fetch the reserves for all V2 pools in which the user has a balance\n  const v2DummyPairsWithABalance = v2DummyPairs.filter(dummyPair =>\n    v2PairsBalances[dummyPair.liquidityToken.address]?.greaterThan('0')\n  )\n  const v2Pairs = usePairs(\n    v2DummyPairsWithABalance.map(V2DummyPairWithABalance => [\n      V2DummyPairWithABalance.token0,\n      V2DummyPairWithABalance.token1\n    ])\n  )\n  const v2IsLoading =\n    fetchingV2PairBalances || v2Pairs?.length < v2DummyPairsWithABalance.length || v2Pairs?.some(V2Pair => !V2Pair)\n\n  const allV2PairsWithLiquidity = v2Pairs\n    .filter((v2Pair): v2Pair is Pair => Boolean(v2Pair))\n    .map(V2Pair => <FullPositionCard key={V2Pair.liquidityToken.address} pair={V2Pair} />)\n\n  const hasV1Liquidity = useUserHasLiquidityInAllTokens()\n\n  return (\n    <>\n      <AppBody>\n        <SwapPoolTabs active={'pool'} />\n        <AutoColumn gap=\"lg\" justify=\"center\">\n          <ButtonLight id=\"join-pool-button\" as={Link} style={{ padding: 16 }} to=\"/add/ETH\">\n            <Text fontWeight={500} fontSize={20}>\n              {t('Add Liquidity')}\n            </Text>\n          </ButtonLight>\n\n          <AutoColumn gap=\"12px\" style={{ width: '100%' }}>\n            <RowBetween padding={'0 8px'}>\n              <Text color={theme.text1} fontWeight={500}>\n              {t('Your Liquidity')}\n              </Text>\n              <Question text={t('When you add liquidity, you are given pool tokens that represent your share. If you don’t see a pool you joined in this list, try importing a pool below.')} />\n            </RowBetween>\n\n            {!account ? (\n              <LightCard padding=\"40px\">\n                <TYPE.body color={theme.text3} textAlign=\"center\">\n                {t('Connect to a wallet to view your liquidity.')}\n                </TYPE.body>\n              </LightCard>\n            ) : v2IsLoading ? (\n              <LightCard padding=\"40px\">\n                <TYPE.body color={theme.text3} textAlign=\"center\">\n                  <Dots>{t('Loading')}</Dots>\n                </TYPE.body>\n              </LightCard>\n            ) : allV2PairsWithLiquidity?.length > 0 ? (\n              <>{allV2PairsWithLiquidity}</>\n            ) : (\n              <LightCard padding=\"40px\">\n                <TYPE.body color={theme.text3} textAlign=\"center\">\n                {t(' No liquidity found.')}\n                </TYPE.body>\n              </LightCard>\n            )}\n\n            <div>\n              <Text textAlign=\"center\" fontSize={14} style={{ padding: '.5rem 0 .5rem 0' }}>\n                {hasV1Liquidity ? t('Uniswap V1 liquidity found!') : t(\"Don't see a pool you joined?\")}{' '}\n                <StyledInternalLink id=\"import-pool-link\" to={hasV1Liquidity ? '/migrate/v1' : '/find'}>\n                  {hasV1Liquidity ? t('Migrate now.') : t('Import it.')}\n                </StyledInternalLink>\n              </Text>\n            </div>\n          </AutoColumn>\n        </AutoColumn>\n      </AppBody>\n\n      {/* <div style={{ display: 'flex', alignItems: 'center', marginTop: '1.5rem' }}>\n        <ButtonSecondary as={Link} style={{ width: 'initial' }} to=\"/migrate/v1\">\n          Migrate V1 Liquidity\n        </ButtonSecondary>\n      </div> */}\n    </>\n  )\n}\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/RemoveLiquidity/index.tsx",["1318"],"import { splitSignature } from '@ethersproject/bytes'\nimport { Contract } from '@ethersproject/contracts'\nimport { Percent, WETH } from 'dexbr-sdk'\nimport React, { useCallback, useContext, useState } from 'react'\nimport { ArrowDown, Plus } from 'react-feather'\nimport ReactGA from 'react-ga'\nimport { RouteComponentProps } from 'react-router'\nimport { Text } from 'rebass'\nimport { ThemeContext } from 'styled-components'\nimport { ButtonPrimary, ButtonLight, ButtonError, ButtonConfirmed } from '../../components/Button'\nimport { LightCard } from '../../components/Card'\nimport { AutoColumn, ColumnCenter } from '../../components/Column'\nimport ConfirmationModal from '../../components/ConfirmationModal'\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\nimport DoubleLogo from '../../components/DoubleLogo'\nimport { AddRemoveTabs } from '../../components/NavigationTabs'\nimport { MinimalPositionCard } from '../../components/PositionCard'\nimport Row, { RowBetween, RowFixed } from '../../components/Row'\n\nimport Slider from '../../components/Slider'\nimport TokenLogo from '../../components/TokenLogo'\nimport { ROUTER_ADDRESS } from '../../constants'\nimport { useActiveWeb3React } from '../../hooks'\nimport { usePairContract } from '../../hooks/useContract'\n\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport { TYPE } from '../../theme'\nimport { calculateGasMargin, calculateSlippageAmount, getRouterContract } from '../../utils'\nimport AppBody from '../AppBody'\nimport { ClickableText, MaxButton, Wrapper } from '../Pool/styleds'\nimport { useApproveCallback, ApprovalState } from '../../hooks/useApproveCallback'\nimport { Dots } from '../../components/swap/styleds'\nimport { useDefaultsFromURLMatchParams, useBurnActionHandlers } from '../../state/burn/hooks'\nimport { useDerivedBurnInfo, useBurnState } from '../../state/burn/hooks'\nimport { Field } from '../../state/burn/actions'\nimport { useWalletModalToggle } from '../../state/application/hooks'\nimport { useUserDeadline, useUserSlippageTolerance } from '../../state/user/hooks'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { useTranslation } from 'react-i18next'\n\n\nexport default function RemoveLiquidity({ match: { params } }: RouteComponentProps<{ tokens: string }>) {\n  useDefaultsFromURLMatchParams(params)\n\n  const { t } = useTranslation()\n\n\n  const { account, chainId, library } = useActiveWeb3React()\n  const theme = useContext(ThemeContext)\n\n  // toggle wallet when disconnected\n  const toggleWalletModal = useWalletModalToggle()\n\n  // burn state\n  const { independentField, typedValue } = useBurnState()\n  const { tokens, pair, route, parsedAmounts, error } = useDerivedBurnInfo()\n  const { onUserInput: _onUserInput } = useBurnActionHandlers()\n  const isValid = !error\n\n  // modal and loading\n  const [showConfirm, setShowConfirm] = useState<boolean>(false)\n  const [showDetailed, setShowDetailed] = useState<boolean>(false)\n  const [attemptingTxn, setAttemptingTxn] = useState(false) // clicked confirm\n\n  // txn values\n  const [txHash, setTxHash] = useState<string>('')\n  const [deadline] = useUserDeadline()\n  const [allowedSlippage] = useUserSlippageTolerance()\n\n  const formattedAmounts = {\n    [Field.LIQUIDITY_PERCENT]: parsedAmounts[Field.LIQUIDITY_PERCENT].equalTo('0')\n      ? '0'\n      : parsedAmounts[Field.LIQUIDITY_PERCENT].lessThan(new Percent('1', '100'))\n      ? '<1'\n      : parsedAmounts[Field.LIQUIDITY_PERCENT].toFixed(0),\n    [Field.LIQUIDITY]:\n      independentField === Field.LIQUIDITY ? typedValue : parsedAmounts[Field.LIQUIDITY]?.toSignificant(6) ?? '',\n    [Field.TOKEN_A]:\n      independentField === Field.TOKEN_A ? typedValue : parsedAmounts[Field.TOKEN_A]?.toSignificant(6) ?? '',\n    [Field.TOKEN_B]:\n      independentField === Field.TOKEN_B ? typedValue : parsedAmounts[Field.TOKEN_B]?.toSignificant(6) ?? ''\n  }\n\n  const atMaxAmount = parsedAmounts[Field.LIQUIDITY_PERCENT]?.equalTo(new Percent('1'))\n\n  // pair contract\n  const pairContract: Contract = usePairContract(pair?.liquidityToken?.address)\n\n  // allowance handling\n  const [signatureData, setSignatureData] = useState<{ v: number; r: string; s: string; deadline: number }>(null)\n  const [approval, approveCallback] = useApproveCallback(parsedAmounts[Field.LIQUIDITY], ROUTER_ADDRESS)\n  async function onAttemptToApprove() {\n    // try to gather a signature for permission\n    const nonce = await pairContract.nonces(account)\n    const deadlineForSignature: number = Math.ceil(Date.now() / 1000) + deadline\n\n    const EIP712Domain = [\n      { name: 'name', type: 'string' },\n      { name: 'version', type: 'string' },\n      { name: 'chainId', type: 'uint256' },\n      { name: 'verifyingContract', type: 'address' }\n    ]\n    const domain = {\n      name: 'Uniswap V2',\n      version: '1',\n      chainId: chainId,\n      verifyingContract: pair.liquidityToken.address\n    }\n    const Permit = [\n      { name: 'owner', type: 'address' },\n      { name: 'spender', type: 'address' },\n      { name: 'value', type: 'uint256' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' }\n    ]\n    const message = {\n      owner: account,\n      spender: ROUTER_ADDRESS,\n      value: parsedAmounts[Field.LIQUIDITY].raw.toString(),\n      nonce: nonce.toHexString(),\n      deadline: deadlineForSignature\n    }\n    const data = JSON.stringify({\n      types: {\n        EIP712Domain,\n        Permit\n      },\n      domain,\n      primaryType: 'Permit',\n      message\n    })\n\n    library\n      .send('eth_signTypedData_v4', [account, data])\n      .then(splitSignature)\n      .then(signature => {\n        setSignatureData({\n          v: signature.v,\n          r: signature.r,\n          s: signature.s,\n          deadline: deadlineForSignature\n        })\n      })\n      .catch(error => {\n        // for all errors other than 4001 (EIP-1193 user rejected request), fall back to manual approve\n        if (error?.code !== 4001) {\n          approveCallback()\n        }\n      })\n  }\n\n  // wrapped onUserInput to clear signatures\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      setSignatureData(null)\n      return _onUserInput(field, typedValue)\n    },\n    [_onUserInput]\n  )\n\n  // tx sending\n  const addTransaction = useTransactionAdder()\n  async function onRemove() {\n    const router = getRouterContract(chainId, library, account)\n\n    const amountsMin = {\n      [Field.TOKEN_A]: calculateSlippageAmount(parsedAmounts[Field.TOKEN_A], allowedSlippage)[0],\n      [Field.TOKEN_B]: calculateSlippageAmount(parsedAmounts[Field.TOKEN_B], allowedSlippage)[0]\n    }\n\n    const tokenBIsETH = tokens[Field.TOKEN_B].equals(WETH[chainId])\n    const oneTokenIsETH = tokens[Field.TOKEN_A].equals(WETH[chainId]) || tokenBIsETH\n\n    const deadlineFromNow = Math.ceil(Date.now() / 1000) + deadline\n\n    let methodNames: string[], args: Array<string | string[] | number | boolean>\n    // we have approval, use normal remove liquidity\n    if (approval === ApprovalState.APPROVED) {\n      // removeLiquidityETH\n      if (oneTokenIsETH) {\n        methodNames = ['removeLiquidityETH', 'removeLiquidityETHSupportingFeeOnTransferTokens']\n        args = [\n          tokens[tokenBIsETH ? Field.TOKEN_A : Field.TOKEN_B].address,\n          parsedAmounts[Field.LIQUIDITY].raw.toString(),\n          amountsMin[tokenBIsETH ? Field.TOKEN_A : Field.TOKEN_B].toString(),\n          amountsMin[tokenBIsETH ? Field.TOKEN_B : Field.TOKEN_A].toString(),\n          account,\n          deadlineFromNow\n        ]\n      }\n      // removeLiquidity\n      else {\n        methodNames = ['removeLiquidity']\n        args = [\n          tokens[Field.TOKEN_A].address,\n          tokens[Field.TOKEN_B].address,\n          parsedAmounts[Field.LIQUIDITY].raw.toString(),\n          amountsMin[Field.TOKEN_A].toString(),\n          amountsMin[Field.TOKEN_B].toString(),\n          account,\n          deadlineFromNow\n        ]\n      }\n    }\n    // we have a signataure, use permit versions of remove liquidity\n    else if (signatureData !== null) {\n      // removeLiquidityETHWithPermit\n      if (oneTokenIsETH) {\n        methodNames = ['removeLiquidityETHWithPermit', 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens']\n        args = [\n          tokens[tokenBIsETH ? Field.TOKEN_A : Field.TOKEN_B].address,\n          parsedAmounts[Field.LIQUIDITY].raw.toString(),\n          amountsMin[tokenBIsETH ? Field.TOKEN_A : Field.TOKEN_B].toString(),\n          amountsMin[tokenBIsETH ? Field.TOKEN_B : Field.TOKEN_A].toString(),\n          account,\n          signatureData.deadline,\n          false,\n          signatureData.v,\n          signatureData.r,\n          signatureData.s\n        ]\n      }\n      // removeLiquidityETHWithPermit\n      else {\n        methodNames = ['removeLiquidityWithPermit']\n        args = [\n          tokens[Field.TOKEN_A].address,\n          tokens[Field.TOKEN_B].address,\n          parsedAmounts[Field.LIQUIDITY].raw.toString(),\n          amountsMin[Field.TOKEN_A].toString(),\n          amountsMin[Field.TOKEN_B].toString(),\n          account,\n          signatureData.deadline,\n          false,\n          signatureData.v,\n          signatureData.r,\n          signatureData.s\n        ]\n      }\n    } else {\n      console.error(t('Attempting to confirm without approval or a signature. Please contact support.'))\n    }\n\n    const safeGasEstimates = await Promise.all(\n      methodNames.map(methodName =>\n        router.estimateGas[methodName](...args)\n          .then(calculateGasMargin)\n          .catch(error => {\n            console.error(`estimateGas failed for ${methodName}`, error)\n          })\n      )\n    )\n\n    const indexOfSuccessfulEstimation = safeGasEstimates.findIndex(safeGasEstimate =>\n      BigNumber.isBigNumber(safeGasEstimate)\n    )\n\n    // all estimations failed...\n    if (indexOfSuccessfulEstimation === -1) {\n      console.error(t('This transaction would fail. Please contact support.'))\n    } else {\n      const methodName = methodNames[indexOfSuccessfulEstimation]\n      const safeGasEstimate = safeGasEstimates[indexOfSuccessfulEstimation]\n\n      setAttemptingTxn(true)\n      await router[methodName](...args, {\n        gasLimit: safeGasEstimate\n      })\n        .then(response => {\n          setAttemptingTxn(false)\n\n          addTransaction(response, {\n            summary:\n              t('Remove ') +\n              parsedAmounts[Field.TOKEN_A]?.toSignificant(3) +\n              ' ' +\n              tokens[Field.TOKEN_A]?.symbol +\n              t(' and ') +\n              parsedAmounts[Field.TOKEN_B]?.toSignificant(3) +\n              ' ' +\n              tokens[Field.TOKEN_B]?.symbol\n          })\n\n          setTxHash(response.hash)\n\n          ReactGA.event({\n            category: 'Liquidity',\n            action: 'Remove',\n            label: [tokens[Field.TOKEN_A]?.symbol, tokens[Field.TOKEN_B]?.symbol].join('/')\n          })\n        })\n        .catch(error => {\n          setAttemptingTxn(false)\n          // we only care if the error is something _other_ than the user rejected the tx\n          if (error?.code !== 4001) {\n            console.error(error)\n          }\n        })\n    }\n  }\n\n  function modalHeader() {\n    return (\n      <AutoColumn gap={'md'} style={{ marginTop: '20px' }}>\n        <RowBetween align=\"flex-end\">\n          <Text fontSize={24} fontWeight={500}>\n            {parsedAmounts[Field.TOKEN_A]?.toSignificant(6)}\n          </Text>\n          <RowFixed gap=\"4px\">\n            <TokenLogo address={tokens[Field.TOKEN_A]?.address} size={'24px'} />\n            <Text fontSize={24} fontWeight={500} style={{ marginLeft: '10px' }}>\n              {tokens[Field.TOKEN_A]?.symbol}\n            </Text>\n          </RowFixed>\n        </RowBetween>\n        <RowFixed>\n          <Plus size=\"16\" color={theme.text2} />\n        </RowFixed>\n        <RowBetween align=\"flex-end\">\n          <Text fontSize={24} fontWeight={500}>\n            {parsedAmounts[Field.TOKEN_B]?.toSignificant(6)}\n          </Text>\n          <RowFixed gap=\"4px\">\n            <TokenLogo address={tokens[Field.TOKEN_B]?.address} size={'24px'} />\n            <Text fontSize={24} fontWeight={500} style={{ marginLeft: '10px' }}>\n              {tokens[Field.TOKEN_B]?.symbol}\n            </Text>\n          </RowFixed>\n        </RowBetween>\n\n        <TYPE.italic fontSize={12} color={theme.text2} textAlign=\"left\" padding={'12px 0 0 0'}>\n          {`Output is estimated. If the price changes by more than ${allowedSlippage /\n            100}% your transaction will revert.`}\n        </TYPE.italic>\n      </AutoColumn>\n    )\n  }\n\n  function modalBottom() {\n    return (\n      <>\n        <RowBetween>\n          <Text color={theme.text2} fontWeight={500} fontSize={16}>\n            {'UNI ' + tokens[Field.TOKEN_A]?.symbol + '/' + tokens[Field.TOKEN_B]?.symbol} Burned\n          </Text>\n          <RowFixed>\n            <DoubleLogo\n              a0={tokens[Field.TOKEN_A]?.address || ''}\n              a1={tokens[Field.TOKEN_B]?.address || ''}\n              margin={true}\n            />\n            <Text fontWeight={500} fontSize={16}>\n              {parsedAmounts[Field.LIQUIDITY]?.toSignificant(6)}\n            </Text>\n          </RowFixed>\n        </RowBetween>\n        {route && (\n          <>\n            <RowBetween>\n              <Text color={theme.text2} fontWeight={500} fontSize={16}>\n                {t('Price')}\n              </Text>\n              <Text fontWeight={500} fontSize={16} color={theme.text1}>\n                1 {tokens[Field.TOKEN_A]?.symbol} = {route.midPrice.toSignificant(6)} {tokens[Field.TOKEN_B]?.symbol}\n              </Text>\n            </RowBetween>\n            <RowBetween>\n              <div />\n              <Text fontWeight={500} fontSize={16} color={theme.text1}>\n                1 {tokens[Field.TOKEN_B]?.symbol} = {route.midPrice.invert().toSignificant(6)}{' '}\n                {tokens[Field.TOKEN_A]?.symbol}\n              </Text>\n            </RowBetween>\n          </>\n        )}\n        <ButtonPrimary disabled={!(approval === ApprovalState.APPROVED || signatureData !== null)} onClick={onRemove}>\n          <Text fontWeight={500} fontSize={20}>\n          {t('Confirm')}\n          </Text>\n        </ButtonPrimary>\n      </>\n    )\n  }\n\n  const pendingText = `Removing ${parsedAmounts[Field.TOKEN_A]?.toSignificant(6)} ${\n    tokens[Field.TOKEN_A]?.symbol\n  } and ${parsedAmounts[Field.TOKEN_B]?.toSignificant(6)} ${tokens[Field.TOKEN_B]?.symbol}`\n\n  const liquidityPercentChangeCallback = useCallback(\n    (value: number) => {\n      onUserInput(Field.LIQUIDITY_PERCENT, value.toString())\n    },\n    [onUserInput]\n  )\n\n  return (\n    <>\n      <AppBody>\n        <AddRemoveTabs adding={false} />\n        <Wrapper>\n          <ConfirmationModal\n            isOpen={showConfirm}\n            onDismiss={() => {\n              setShowConfirm(false)\n              setSignatureData(null) // important that we clear signature data to avoid bad sigs\n              // if there was a tx hash, we want to clear the input\n              if (txHash) {\n                onUserInput(Field.LIQUIDITY_PERCENT, '0')\n              }\n              setTxHash('')\n            }}\n            attemptingTxn={attemptingTxn}\n            hash={txHash ? txHash : ''}\n            topContent={modalHeader}\n            bottomContent={modalBottom}\n            pendingText={pendingText}\n            title={t('You will receive')}\n          />\n          <AutoColumn gap=\"md\">\n            <LightCard>\n              <AutoColumn gap=\"20px\">\n                <RowBetween>\n                  <Text fontWeight={500}>{t('Amount')}</Text>\n                  <ClickableText\n                    fontWeight={500}\n                    onClick={() => {\n                      setShowDetailed(!showDetailed)\n                    }}\n                  >\n                    {showDetailed ? t('Simple') : t('Detailed')}\n                  </ClickableText>\n                </RowBetween>\n                <Row style={{ alignItems: 'flex-end' }}>\n                  <Text fontSize={72} fontWeight={500}>\n                    {formattedAmounts[Field.LIQUIDITY_PERCENT]}%\n                  </Text>\n                </Row>\n                {!showDetailed && (\n                  <>\n                    <Slider\n                      value={Number.parseInt(parsedAmounts[Field.LIQUIDITY_PERCENT].toFixed(0))}\n                      onChange={liquidityPercentChangeCallback}\n                    />\n                    <RowBetween>\n                      <MaxButton onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '25')} width=\"20%\">\n                        25%\n                      </MaxButton>\n                      <MaxButton onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '50')} width=\"20%\">\n                        50%\n                      </MaxButton>\n                      <MaxButton onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '75')} width=\"20%\">\n                        75%\n                      </MaxButton>\n                      <MaxButton onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')} width=\"20%\">\n                        Max\n                      </MaxButton>\n                    </RowBetween>\n                  </>\n                )}\n              </AutoColumn>\n            </LightCard>\n            {!showDetailed && (\n              <>\n                <ColumnCenter>\n                  <ArrowDown size=\"16\" color={theme.text2} />\n                </ColumnCenter>\n                <LightCard>\n                  <AutoColumn gap=\"10px\">\n                    <RowBetween>\n                      <Text fontSize={24} fontWeight={500}>\n                        {formattedAmounts[Field.TOKEN_A] || '-'}\n                      </Text>\n                      <RowFixed>\n                        <TokenLogo address={tokens[Field.TOKEN_A]?.address} style={{ marginRight: '12px' }} />\n                        <Text fontSize={24} fontWeight={500} id=\"remove-liquidity-tokena-symbol\">\n                          {tokens[Field.TOKEN_A]?.symbol}\n                        </Text>\n                      </RowFixed>\n                    </RowBetween>\n                    <RowBetween>\n                      <Text fontSize={24} fontWeight={500}>\n                        {formattedAmounts[Field.TOKEN_B] || '-'}\n                      </Text>\n                      <RowFixed>\n                        <TokenLogo address={tokens[Field.TOKEN_B]?.address} style={{ marginRight: '12px' }} />\n                        <Text fontSize={24} fontWeight={500} id=\"remove-liquidity-tokenb-symbol\">\n                          {tokens[Field.TOKEN_B]?.symbol}\n                        </Text>\n                      </RowFixed>\n                    </RowBetween>\n                  </AutoColumn>\n                </LightCard>\n              </>\n            )}\n\n            {showDetailed && (\n              <>\n                <CurrencyInputPanel\n                  field={Field.LIQUIDITY}\n                  value={formattedAmounts[Field.LIQUIDITY]}\n                  onUserInput={onUserInput}\n                  onMax={() => {\n                    onUserInput(Field.LIQUIDITY_PERCENT, '100')\n                  }}\n                  showMaxButton={!atMaxAmount}\n                  disableTokenSelect\n                  token={pair?.liquidityToken}\n                  isExchange={true}\n                  pair={pair}\n                  id=\"liquidity-amount\"\n                />\n                <ColumnCenter>\n                  <ArrowDown size=\"16\" color={theme.text2} />\n                </ColumnCenter>\n                <CurrencyInputPanel\n                  hideBalance={true}\n                  field={Field.TOKEN_A}\n                  value={formattedAmounts[Field.TOKEN_A]}\n                  onUserInput={onUserInput}\n                  onMax={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}\n                  showMaxButton={!atMaxAmount}\n                  token={tokens[Field.TOKEN_A]}\n                  label={t('Output')}\n                  disableTokenSelect\n                  id=\"remove-liquidity-tokena\"\n                />\n                <ColumnCenter>\n                  <Plus size=\"16\" color={theme.text2} />\n                </ColumnCenter>\n                <CurrencyInputPanel\n                  hideBalance={true}\n                  field={Field.TOKEN_B}\n                  value={formattedAmounts[Field.TOKEN_B]}\n                  onUserInput={onUserInput}\n                  onMax={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}\n                  showMaxButton={!atMaxAmount}\n                  token={tokens[Field.TOKEN_B]}\n                  label={t('Output')}\n                  disableTokenSelect\n                  id=\"remove-liquidity-tokenb\"\n                />\n              </>\n            )}\n            {route && (\n              <div style={{ padding: '10px 20px' }}>\n                <RowBetween>\n                {t('Price')}:\n                  <div>\n                    1 {tokens[Field.TOKEN_A]?.symbol} = {route.midPrice.toSignificant(6)}{' '}\n                    {tokens[Field.TOKEN_B]?.symbol}\n                  </div>\n                </RowBetween>\n                <RowBetween>\n                  <div />\n                  <div>\n                    1 {tokens[Field.TOKEN_B]?.symbol} = {route.midPrice.invert().toSignificant(6)}{' '}\n                    {tokens[Field.TOKEN_A]?.symbol}\n                  </div>\n                </RowBetween>\n              </div>\n            )}\n            <div style={{ position: 'relative' }}>\n              {!account ? (\n                <ButtonLight onClick={toggleWalletModal}>{t('Connect Wallet')}</ButtonLight>\n              ) : (\n                <RowBetween>\n                  <ButtonConfirmed\n                    onClick={onAttemptToApprove}\n                    confirmed={approval === ApprovalState.APPROVED || signatureData !== null}\n                    disabled={approval !== ApprovalState.NOT_APPROVED || signatureData !== null}\n                    mr=\"0.5rem\"\n                    fontWeight={500}\n                    fontSize={16}\n                  >\n                    {approval === ApprovalState.PENDING ? (\n                      <Dots>{t('Approving')}</Dots>\n                    ) : approval === ApprovalState.APPROVED || signatureData !== null ? (\n                      t('Approved')\n                    ) : (\n                      t('Approve')\n                    )}\n                  </ButtonConfirmed>\n                  <ButtonError\n                    onClick={() => {\n                      setShowConfirm(true)\n                    }}\n                    disabled={!isValid || (signatureData === null && approval !== ApprovalState.APPROVED)}\n                    error={!isValid && !!parsedAmounts[Field.TOKEN_A] && !!parsedAmounts[Field.TOKEN_B]}\n                  >\n                    <Text fontSize={16} fontWeight={500}>\n                      {error || t('Remove')}\n                    </Text>\n                  </ButtonError>\n                </RowBetween>\n              )}\n            </div>\n          </AutoColumn>\n        </Wrapper>\n      </AppBody>\n\n      {pair ? (\n        <AutoColumn style={{ minWidth: '20rem', marginTop: '1rem' }}>\n          <MinimalPositionCard pair={pair} />\n        </AutoColumn>\n      ) : null}\n    </>\n  )\n}\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/Swap/index.tsx",["1319"],"import { JSBI, TokenAmount } from 'dexbr-sdk'\nimport React, { useContext, useState, useEffect, useCallback } from 'react'\nimport { ArrowDown } from 'react-feather'\nimport ReactGA from 'react-ga'\nimport { Text } from 'rebass'\nimport { ThemeContext } from 'styled-components'\nimport AddressInputPanel from '../../components/AddressInputPanel'\nimport { ButtonError, ButtonLight, ButtonPrimary } from '../../components/Button'\nimport Card, { GreyCard } from '../../components/Card'\nimport { AutoColumn } from '../../components/Column'\nimport ConfirmationModal from '../../components/ConfirmationModal'\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\nimport { SwapPoolTabs } from '../../components/NavigationTabs'\nimport { AutoRow, RowBetween } from '../../components/Row'\nimport AdvancedSwapDetailsDropdown from '../../components/swap/AdvancedSwapDetailsDropdown'\nimport confirmPriceImpactWithoutFee from '../../components/swap/confirmPriceImpactWithoutFee'\nimport { ArrowWrapper, BottomGrouping, Dots, Wrapper } from '../../components/swap/styleds'\nimport SwapModalFooter from '../../components/swap/SwapModalFooter'\nimport SwapModalHeader from '../../components/swap/SwapModalHeader'\nimport TradePrice from '../../components/swap/TradePrice'\nimport BetterTradeLink from '../../components/swap/BetterTradeLink'\nimport { TokenWarningCards } from '../../components/TokenWarningCard'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useApproveCallbackFromTrade, ApprovalState } from '../../hooks/useApproveCallback'\nimport useENSAddress from '../../hooks/useENSAddress'\nimport { useSwapCallback } from '../../hooks/useSwapCallback'\nimport { useWalletModalToggle, useToggleSettingsMenu } from '../../state/application/hooks'\nimport { useExpertModeManager, useUserSlippageTolerance, useUserDeadline } from '../../state/user/hooks'\n\nimport { INITIAL_ALLOWED_SLIPPAGE, BETTER_TRADE_LINK_THRESHOLD } from '../../constants'\nimport { getTradeVersion, isTradeBetter } from '../../data/V1'\nimport useToggledVersion, { Version } from '../../hooks/useToggledVersion'\nimport { Field } from '../../state/swap/actions'\n\nimport { \n  useDefaultsFromURLSearch,\n  useDerivedSwapInfo,\n  useSwapActionHandlers,\n  useSwapState\n} from '../../state/swap/hooks'\nimport { CursorPointer, LinkStyledButton, TYPE } from '../../theme'\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\nimport { computeSlippageAdjustedAmounts, computeTradePriceBreakdown, warningSeverity } from '../../utils/prices'\nimport AppBody from '../AppBody'\nimport { ClickableText } from '../Pool/styleds'\nimport { useTranslation } from 'react-i18next'\n\nexport default function Swap() {\n  useDefaultsFromURLSearch()\n\n  const { t } = useTranslation()\n  const { account } = useActiveWeb3React()\n  const theme = useContext(ThemeContext)\n\n  // toggle wallet when disconnected\n  const toggleWalletModal = useWalletModalToggle()\n\n  // for expert mode\n  const toggleSettings = useToggleSettingsMenu()\n  const [expertMode] = useExpertModeManager()\n\n  // get custom setting values for user\n  const [deadline] = useUserDeadline()\n  const [allowedSlippage] = useUserSlippageTolerance()\n\n  // swap state\n  const { independentField, typedValue, recipient } = useSwapState()\n  const { v1Trade, v2Trade, tokenBalances, parsedAmount, tokens, error } = useDerivedSwapInfo()\n  const { address: recipientAddress } = useENSAddress(recipient)\n  const toggledVersion = useToggledVersion()\n  const trade =\n    {\n      [Version.v1]: v1Trade,\n      [Version.v2]: v2Trade\n    }[toggledVersion] ?? undefined\n\n  const betterTradeLinkVersion: Version | undefined =\n    toggledVersion === Version.v2 && isTradeBetter(v2Trade, v1Trade, BETTER_TRADE_LINK_THRESHOLD)\n      ? Version.v1\n      : toggledVersion === Version.v1 && isTradeBetter(v1Trade, v2Trade)\n      ? Version.v2\n      : undefined\n\n  const parsedAmounts = {\n    [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade?.inputAmount,\n    [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade?.outputAmount\n  }\n\n  const { onSwitchTokens, onTokenSelection, onUserInput, onChangeRecipient } = useSwapActionHandlers()\n  const isValid = !error\n  const dependentField: Field = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT\n\n  const handleTypeInput = useCallback(\n    (field, value) => {\n      onUserInput(Field.INPUT, value)\n    },\n    [onUserInput]\n  )\n  const handleTypeOutput = useCallback(\n    (field, value) => {\n      onUserInput(Field.OUTPUT, value)\n    },\n    [onUserInput]\n  )\n\n  // modal and loading\n  const [showConfirm, setShowConfirm] = useState<boolean>(false) // show confirmation modal\n  const [attemptingTxn, setAttemptingTxn] = useState<boolean>(false) // waiting for user confirmaion/rejection\n  const [txHash, setTxHash] = useState<string>('')\n\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: parsedAmounts[dependentField]?.toSignificant(6) ?? ''\n  }\n\n  const route = trade?.route\n  const userHasSpecifiedInputOutput = Boolean(\n    tokens[Field.INPUT] && tokens[Field.OUTPUT] && parsedAmounts[independentField]?.greaterThan(JSBI.BigInt(0))\n  )\n  const noRoute = !route\n\n  // check whether the user has approved the router on the input token\n  const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage)\n\n  // check if user has gone through approval process, used to show two step buttons, reset on token change\n  const [approvalSubmitted, setApprovalSubmitted] = useState<boolean>(false)\n\n  // mark when a user has submitted an approval, reset onTokenSelection for input field\n  useEffect(() => {\n    if (approval === ApprovalState.PENDING) {\n      setApprovalSubmitted(true)\n    }\n  }, [approval, approvalSubmitted])\n\n  const maxAmountInput: TokenAmount | undefined = maxAmountSpend(tokenBalances[Field.INPUT])\n  const atMaxAmountInput = Boolean(maxAmountInput && parsedAmounts[Field.INPUT]?.equalTo(maxAmountInput))\n\n  const slippageAdjustedAmounts = computeSlippageAdjustedAmounts(trade, allowedSlippage)\n\n  // the callback to execute the swap\n  const swapCallback = useSwapCallback(trade, allowedSlippage, deadline, recipient)\n\n  const { priceImpactWithoutFee, realizedLPFee } = computeTradePriceBreakdown(trade)\n\n  function onSwap() {\n    if (priceImpactWithoutFee && !confirmPriceImpactWithoutFee(priceImpactWithoutFee)) {\n      return\n    }\n    if (!swapCallback) {\n      return\n    }\n    setAttemptingTxn(true)\n    swapCallback()\n      .then(hash => {\n        setAttemptingTxn(false)\n        setTxHash(hash)\n\n        ReactGA.event({\n          category: 'Swap',\n          action:\n            recipient === null\n              ? 'Swap w/o Send'\n              : (recipientAddress ?? recipient) === account\n              ? 'Swap w/o Send + recipient'\n              : 'Swap w/ Send',\n          label: [trade?.inputAmount?.token?.symbol, trade?.outputAmount?.token?.symbol, getTradeVersion(trade)].join(\n            '/'\n          )\n        })\n      })\n      .catch(error => {\n        setAttemptingTxn(false)\n        // we only care if the error is something _other_ than the user rejected the tx\n        if (error?.code !== 4001) {\n          console.error(error)\n        }\n      })\n  }\n\n  // errors\n  const [showInverted, setShowInverted] = useState<boolean>(false)\n\n  // warnings on slippage\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee)\n\n  // show approve flow when: no error on inputs, not approved or pending, or approved in current session\n  // never show if price impact is above threshold in non expert mode\n  const showApproveFlow =\n    !error &&\n    (approval === ApprovalState.NOT_APPROVED ||\n      approval === ApprovalState.PENDING ||\n      (approvalSubmitted && approval === ApprovalState.APPROVED)) &&\n    !(priceImpactSeverity > 3 && !expertMode)\n\n  function modalHeader() {\n    return (\n      <SwapModalHeader\n        tokens={tokens}\n        formattedAmounts={formattedAmounts}\n        slippageAdjustedAmounts={slippageAdjustedAmounts}\n        priceImpactSeverity={priceImpactSeverity}\n        independentField={independentField}\n        recipient={recipient}\n      />\n    )\n  }\n\n  function modalBottom() {\n    return (\n      <SwapModalFooter\n        confirmText={priceImpactSeverity > 2 ? t('Swap Anyway') : t('Confirm Swap')}\n        showInverted={showInverted}\n        severity={priceImpactSeverity}\n        setShowInverted={setShowInverted}\n        onSwap={onSwap}\n        realizedLPFee={realizedLPFee}\n        parsedAmounts={parsedAmounts}\n        priceImpactWithoutFee={priceImpactWithoutFee}\n        slippageAdjustedAmounts={slippageAdjustedAmounts}\n        trade={trade}\n      />\n    )\n  }\n\n  // text to show while loading\n  const pendingText = `Swapping ${parsedAmounts[Field.INPUT]?.toSignificant(6)} ${\n    tokens[Field.INPUT]?.symbol\n  } for ${parsedAmounts[Field.OUTPUT]?.toSignificant(6)} ${tokens[Field.OUTPUT]?.symbol}`\n\n  return (\n    <>\n      <TokenWarningCards tokens={tokens} />\n      <AppBody>\n        <SwapPoolTabs active={'swap'} />\n        <Wrapper id=\"swap-page\">\n          <ConfirmationModal\n            isOpen={showConfirm}\n            title=\"Confirm Swap\"\n            onDismiss={() => {\n              setShowConfirm(false)\n              // if there was a tx hash, we want to clear the input\n              if (txHash) {\n                onUserInput(Field.INPUT, '')\n              }\n              setTxHash('')\n            }}\n            attemptingTxn={attemptingTxn}\n            hash={txHash}\n            topContent={modalHeader}\n            bottomContent={modalBottom}\n            pendingText={pendingText}\n          />\n\n          <AutoColumn gap={'md'}>\n            <CurrencyInputPanel\n              field={Field.INPUT}\n              label={independentField === Field.OUTPUT ? t('From (estimated)') : t('From')}\n              value={formattedAmounts[Field.INPUT]}\n              showMaxButton={!atMaxAmountInput}\n              token={tokens[Field.INPUT]}\n              onUserInput={handleTypeInput}\n              onMax={() => {\n                maxAmountInput && onUserInput(Field.INPUT, maxAmountInput.toExact())\n              }}\n              onTokenSelection={address => {\n                setApprovalSubmitted(false) // reset 2 step UI for approvals\n                onTokenSelection(Field.INPUT, address)\n              }}\n              otherSelectedTokenAddress={tokens[Field.OUTPUT]?.address}\n              id=\"swap-currency-input\"\n            />\n\n            <CursorPointer>\n              <AutoColumn justify=\"space-between\">\n                <AutoRow justify=\"space-between\" style={{ padding: '0 1rem' }}>\n                  <ArrowWrapper clickable>\n                    <ArrowDown\n                      size=\"16\"\n                      onClick={() => {\n                        setApprovalSubmitted(false) // reset 2 step UI for approvals\n                        onSwitchTokens()\n                      }}\n                      color={tokens[Field.INPUT] && tokens[Field.OUTPUT] ? theme.primary1 : theme.text2}\n                    />\n                  </ArrowWrapper>\n                  {recipient === null ? (\n                    <LinkStyledButton id=\"add-recipient-button\" onClick={() => onChangeRecipient('')}>\n                      {t('+ add recipient (optional)')}\n                    </LinkStyledButton>\n                  ) : null}\n                </AutoRow>\n              </AutoColumn>\n            </CursorPointer>\n            <CurrencyInputPanel\n              field={Field.OUTPUT}\n              value={formattedAmounts[Field.OUTPUT]}\n              onUserInput={handleTypeOutput}\n              label={independentField === Field.INPUT ? t('To (estimated)') : t('To')}\n              showMaxButton={false}\n              token={tokens[Field.OUTPUT]}\n              onTokenSelection={address => onTokenSelection(Field.OUTPUT, address)}\n              otherSelectedTokenAddress={tokens[Field.INPUT]?.address}\n              id=\"swap-currency-output\"\n            />\n\n            {recipient !== null ? (\n              <>\n                <AutoRow justify=\"space-between\" style={{ padding: '0 1rem' }}>\n                  <ArrowWrapper clickable={false}>\n                    <ArrowDown size=\"16\" color={theme.text2} />\n                  </ArrowWrapper>\n                  <LinkStyledButton id=\"remove-recipient-button\" onClick={() => onChangeRecipient(null)}>\n                    {t('- remove recipient')}\n                  </LinkStyledButton>\n                </AutoRow>\n                <AddressInputPanel id=\"recipient\" value={recipient} onChange={onChangeRecipient} />\n              </>\n            ) : null}\n\n            <Card padding={'.25rem .75rem 0 .75rem'} borderRadius={'20px'}>\n              <AutoColumn gap=\"4px\">\n                <RowBetween align=\"center\">\n                  <Text fontWeight={500} fontSize={14} color={theme.text2}>\n                    {t('Price')}\n                  </Text>\n                  <TradePrice\n                    inputToken={tokens[Field.INPUT]}\n                    outputToken={tokens[Field.OUTPUT]}\n                    price={trade?.executionPrice}\n                    showInverted={showInverted}\n                    setShowInverted={setShowInverted}\n                  />\n                </RowBetween>\n\n                {allowedSlippage !== INITIAL_ALLOWED_SLIPPAGE && (\n                  <RowBetween align=\"center\">\n                    <ClickableText fontWeight={500} fontSize={14} color={theme.text2} onClick={toggleSettings}>\n                      {t('Slippage Tolerance')}\n                    </ClickableText>\n                    <ClickableText fontWeight={500} fontSize={14} color={theme.text2} onClick={toggleSettings}>\n                      {allowedSlippage ? allowedSlippage / 100 : '-'}%\n                    </ClickableText>\n                  </RowBetween>\n                )}\n              </AutoColumn>\n            </Card>\n          </AutoColumn>\n          <BottomGrouping>\n            {!account ? (\n              <ButtonLight onClick={toggleWalletModal}>{t('Connect Wallet')}</ButtonLight>\n            ) : noRoute && userHasSpecifiedInputOutput ? (\n              <GreyCard style={{ textAlign: 'center' }}>\n                <TYPE.main mb=\"4px\">{t('Insufficient liquidity for this trade.')}</TYPE.main>\n              </GreyCard>\n            ) : showApproveFlow ? (\n              <RowBetween>\n                <ButtonPrimary\n                  onClick={approveCallback}\n                  disabled={approval !== ApprovalState.NOT_APPROVED || approvalSubmitted}\n                  width=\"48%\"\n                  altDisbaledStyle={approval === ApprovalState.PENDING} // show solid button while waiting\n                >\n                  {approval === ApprovalState.PENDING ? (\n                    <Dots>{t('Approving')}</Dots>\n                  ) : approvalSubmitted && approval === ApprovalState.APPROVED ? (\n                    t('Approved')\n                  ) : (\n                    t('Approve ') + tokens[Field.INPUT]?.symbol\n                  )}\n                </ButtonPrimary>\n                <ButtonError\n                  onClick={() => {\n                    expertMode ? onSwap() : setShowConfirm(true)\n                  }}\n                  width=\"48%\"\n                  id=\"swap-button\"\n                  disabled={!isValid || approval !== ApprovalState.APPROVED || (priceImpactSeverity > 3 && !expertMode)}\n                  error={isValid && priceImpactSeverity > 2}\n                >\n                  <Text fontSize={16} fontWeight={500}>\n                    {priceImpactSeverity > 3 && !expertMode\n                      ? `Price Impact High`\n                      : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`}\n                  </Text>\n                </ButtonError>\n              </RowBetween>\n            ) : (\n              <ButtonError\n                onClick={() => {\n                  expertMode ? onSwap() : setShowConfirm(true)\n                }}\n                id=\"swap-button\"\n                disabled={!isValid || (priceImpactSeverity > 3 && !expertMode)}\n                error={isValid && priceImpactSeverity > 2}\n              >\n                <Text fontSize={20} fontWeight={500}>\n                  {error\n                    ? error\n                    : priceImpactSeverity > 3 && !expertMode\n                    ? t(`Price Impact Too High`)\n                    : `Swap${priceImpactSeverity > 2 ? t(' Anyway') : ''}`}\n                </Text>\n              </ButtonError>\n            )}\n            {betterTradeLinkVersion && <BetterTradeLink version={betterTradeLinkVersion} />}\n          </BottomGrouping>\n        </Wrapper>\n      </AppBody>\n\n      <AdvancedSwapDetailsDropdown trade={trade} />\n    </>\n  )\n}\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/PoolFinder/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Popups/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Web3ReactManager/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Header/index.tsx",["1320","1321","1322","1323","1324","1325","1326"],"import { ChainId, WETH } from 'dexbr-sdk'\nimport React from 'react'\nimport { isMobile } from 'react-device-detect'\nimport { Text } from 'rebass'\n\nimport styled from 'styled-components'\n\nimport Logo from '../../assets/svg/logo-dexbr.svg'\nimport LogoDark from '../../assets/svg/logo-white-dexbr.svg'\nimport Wordmark from '../../assets/svg/wordmark.svg'\nimport WordmarkDark from '../../assets/svg/wordmark_white.svg'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useDarkModeManager } from '../../state/user/hooks'\nimport { useTokenBalanceTreatingWETHasETH } from '../../state/wallet/hooks'\n\nimport { YellowCard } from '../Card'\nimport Settings from '../Settings'\nimport Menu from '../Menu'\n\nimport Row, { RowBetween } from '../Row'\nimport Web3Status from '../Web3Status'\nimport VersionSwitch from './VersionSwitch'\n\nimport { useTranslation } from 'react-i18next'\n\n\nconst HeaderFrame = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n  width: 100%;\n  top: 0;\n  position: absolute;\n  z-index: 2;\n  ${({ theme }) => theme.mediaWidth.upToExtraSmall`\n    padding: 12px 0 0 0;\n    width: calc(100%);\n    position: relative;\n  `};\n`\n\nconst HeaderElement = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst HeaderElementWrap = styled.div`\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaWidth.upToSmall`\n    margin-top: 0.5rem;\n`};\n`\n\nconst Title = styled.a`\n  display: flex;\n  align-items: center;\n  pointer-events: auto;\n\n  :hover {\n    cursor: pointer;\n  }\n`\n\nconst TitleText = styled(Row)`\n  width: fit-content;\n  white-space: nowrap;\n  ${({ theme }) => theme.mediaWidth.upToExtraSmall`\n    display: none;\n  `};\n`\n\nconst AccountElement = styled.div<{ active: boolean }>`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  background-color: ${({ theme, active }) => (!active ? theme.bg1 : theme.bg3)};\n  white-space: nowrap;\n  width: 100%;\n\n  :focus {\n    border: 1px solid blue;\n  }\n`\n\nconst TestnetWrapper = styled.div`\n  white-space: nowrap;\n  width: fit-content;\n  margin-left: 10px;\n  pointer-events: auto;\n`\n\nconst NetworkCard = styled(YellowCard)`\n  width: fit-content;\n  margin-right: 10px;\n  padding: 8px 12px;\n`\n\nconst UniIcon = styled.div`\n  transition: transform 0.3s ease;\n  ${`\n    img { \n      width: 11rem;\n      margin-top: -65px;\n      margin-left: 150px;\n    }\n  `};\n`\n\nconst HeaderControls = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaWidth.upToSmall`\n    flex-direction: column;\n    align-items: flex-end;\n  `};\n`\n\nconst BalanceText = styled(Text)`\n  ${({ theme }) => theme.mediaWidth.upToExtraSmall`\n    display: none;\n  `};\n`\n\nconst Nav = styled.div`\n  margin-top: 10px;\n  // margin-left: 8%;\n  // @media screen and (max-height: 300px){\n  //   margin-top:40px;\n  // }\n`\n\nconst NavA = styled.a`\n  color: white;\n  font-size: 16px;\n  text-decoration: none;\n  font-weight: bold;\n  padding: 0px 30px 20px 0;\n  position: relative;\n  \n  :after{\n    content:\"\";\n    position: absolute;\n    background-color: #fff;\n    height: 3px;\n    width: 100%;\n    left: 0; \n    bottom: -20px;\n    visibility: hidden;\n    -webkit-transform: scaleX(0);\n    transform: scaleX(0);\n    -webkit-transition: all 0.3s ease-in-out 0s;\n    transition: all 0.3s ease-in-out 0s;\n  }\n\n  :hover:after{\n    visibility: visible;\n    -webkit-transform: scaleX(1);\n    transform: scaleX(1);\n    \n  }\n`\nconst MobileMenu = styled.div`\ndisplay: none;\ncursor: pointer;\nwidth: 32px;\n  height: 2px;\n  background: #fff;\n  margin: 8px;\n  transition: 0.3s;\n\n`\n\nconst NETWORK_LABELS: { [chainId in ChainId]: string | null } = {\n  [ChainId.MAINNET]: null,\n  [ChainId.GÖRLI]: 'Görli'\n}\n\n\nexport default function Header() {\n  const { account, chainId } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  const userEthBalance = useTokenBalanceTreatingWETHasETH(account, WETH[chainId])\n  const [isDark] = useDarkModeManager()\n\n  return (\n    <HeaderFrame>\n      <RowBetween style={{ alignItems: 'flex-start' }} padding=\"1rem 1rem 0 1rem\">\n        <HeaderElement>\n          <Title href=\".\">\n            <UniIcon>\n              <img src={ Logo} alt=\"logo\" />\n            </UniIcon>\n          </Title>\n        </HeaderElement>\n\n  \n    \n        <HeaderControls>\n        <Nav>\n          <NavA href=\"https://www.mpjunior.com.br/labs/dexbr/\"> {t('Home')}</NavA>\n          <NavA href=\"https://www.mpjunior.com.br/labs/dexbr/sobre-nos/\">{t('DexBR')}</NavA>\n          <NavA href=\"https://www.mpjunior.com.br/labs/dexbr/sobre-nos/#\">{t('Articles and News')}</NavA>\n          <NavA href=\"https://www.mpjunior.com.br/labs/dexbr/sobre-nos/#\">{t('FAQ')}</NavA>\n          <NavA href=\"https://www.mpjunior.com.br/labs/dexbr/contato/\">{t('Contact')}</NavA>\n        </Nav>\n\n          <HeaderElement>\n            <TestnetWrapper>\n              {!isMobile && NETWORK_LABELS[chainId] && <NetworkCard>{NETWORK_LABELS[chainId]}</NetworkCard>}\n            </TestnetWrapper>\n            <AccountElement active={!!account} style={{ pointerEvents: 'auto' }}>\n              {account && userEthBalance ? (\n                <BalanceText style={{ flexShrink: 0 }} pl=\"0.75rem\" pr=\"0.5rem\" fontWeight={500}>\n                  {userEthBalance?.toSignificant(4)} ETH\n                </BalanceText>\n              ) : null}\n              <Web3Status />\n            </AccountElement>\n          </HeaderElement>\n          <HeaderElementWrap>\n            {/* <VersionSwitch /> */}\n            <Settings />\n            <Menu />\n          </HeaderElementWrap>\n        </HeaderControls>\n      </RowBetween>\n    </HeaderFrame>\n  )\n}\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/useApproveCallback.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/state/multicall/hooks.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/Tokens.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/MigrateV1/EmptyState.tsx",["1327"],"import React from 'react'\nimport { AutoColumn } from '../../components/Column'\nimport { TYPE } from '../../theme'\n\nexport function EmptyState({ message }: { message: string }) {\n  return (\n    <AutoColumn style={{ minHeight: 200, justifyContent: 'center', alignItems: 'center' }}>\n      <TYPE.body>{message}</TYPE.body>\n    </AutoColumn>\n  )\n}\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/state/wallet/hooks.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/AppBody.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/data/TotalSupply.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/data/Reserves.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/swap/styleds.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/state/transactions/hooks.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/state/mint/actions.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/state/swap/actions.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/state/burn/actions.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/connectors/index.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/utils/index.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/constants/multicall/index.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/constants/v1/index.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/AddLiquidity/PoolPriceBar.tsx",["1328","1329","1330"],"import { Fraction, Percent, Token } from 'dexbr-sdk'\nimport React, { useContext } from 'react'\nimport { Text } from 'rebass'\nimport { ThemeContext } from 'styled-components'\nimport { AutoColumn } from '../../components/Column'\nimport { AutoRow } from '../../components/Row'\nimport { ONE_BIPS } from '../../constants'\nimport { Field } from '../../state/mint/actions'\nimport { TYPE } from '../../theme'\nimport { useTranslation } from 'react-i18next'\n\n\nexport const PoolPriceBar = ({\n  tokens,\n  noLiquidity,\n  poolTokenPercentage,\n  price\n}: {\n  tokens: { [field in Field]?: Token }\n  noLiquidity?: boolean\n  poolTokenPercentage?: Percent\n  price?: Fraction\n}) => {\n  const theme = useContext(ThemeContext)\n  const { t } = useTranslation()\n\n  return (\n    <AutoColumn gap=\"md\">\n      <AutoRow justify=\"space-around\" gap=\"4px\">\n        <AutoColumn justify=\"center\">\n          <TYPE.black>{price?.toSignificant(6) ?? '0'}</TYPE.black>\n          <Text fontWeight={500} fontSize={14} color={theme.text2} pt={1}>\n            {tokens[Field.TOKEN_B]?.symbol} per {tokens[Field.TOKEN_A]?.symbol}\n          </Text>\n        </AutoColumn>\n        <AutoColumn justify=\"center\">\n          <TYPE.black>{price?.invert().toSignificant(6) ?? '0'}</TYPE.black>\n          <Text fontWeight={500} fontSize={14} color={theme.text2} pt={1}>\n            {tokens[Field.TOKEN_A]?.symbol} per {tokens[Field.TOKEN_B]?.symbol}\n          </Text>\n        </AutoColumn>\n        <AutoColumn justify=\"center\">\n          <TYPE.black>\n            {noLiquidity && price\n              ? '100'\n              : (poolTokenPercentage?.lessThan(ONE_BIPS) ? '<0.01' : poolTokenPercentage?.toFixed(2)) ?? '0'}\n            %\n          </TYPE.black>\n          <Text fontWeight={500} fontSize={14} color={theme.text2} pt={1}>\n            {t('Share of Pool')}\n          </Text>\n        </AutoColumn>\n      </AutoRow>\n    </AutoColumn>\n  )\n}\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/Pool/styleds.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/useToggledVersion.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/TokenLogo/index.tsx",["1331","1332","1333"],"import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { isAddress } from '../../utils'\nimport { useActiveWeb3React } from '../../hooks'\nimport { WETH } from 'dexbr-sdk'\n\nimport EthereumLogo from '../../assets/images/ethereum-logo.png'\nimport DefaultTokenIcon from '../../assets/images/tokens/default-token-icon.png'\nimport USDCLogo from '../../assets/images/tokens/usdc-icon.png'\nimport DextLogo from '../../assets/images/tokens/dexbr-icon.svg'\n\nconst getTokenLogoURL = address => {\n  // Return token logo by address.\n  switch(address){\n    case \"0x50a6505C9B5F6837CA69724F204Ffe21B2ca7806\": \n      return USDCLogo\n    case \"0xcbB27cE87aBef0Fda2049148Aa4B4820E6db40fc\":\n      return DextLogo\n  }\n\n  // WETH icon return.\n  return `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/${address}/logo.png`\n}\nconst NO_LOGO_ADDRESSES: { [tokenAddress: string]: true } = {\n  [\"0x50a6505C9B5F6837CA69724F204Ffe21B2ca7806\"]: true,\n  [\"0xcbB27cE87aBef0Fda2049148Aa4B4820E6db40fc\"]: true\n}\n\nconst Image = styled.img<{ size: string }>`\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n  background-color: white;\n  box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.075);\n`\n\nconst Emoji = styled.span<{ size?: string }>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: ${({ size }) => size};\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n  margin-bottom: -4px;\n`\n\nconst StyledEthereumLogo = styled.img<{ size: string }>`\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n  box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.075);\n`\n\nexport default function TokenLogo({\n  address,\n  size = '24px',\n  ...rest\n}: {\n  address?: string\n  size?: string\n  style?: React.CSSProperties\n}) {\n  const [, refresh] = useState<number>(0)\n  const { chainId } = useActiveWeb3React()\n\n  let path = ''\n  const validated = isAddress(address)\n  // hard code to show ETH instead of WETH in UI\n  if (validated === WETH[chainId].address) {\n    return <StyledEthereumLogo src={EthereumLogo} size={size} {...rest} />\n  } else if (NO_LOGO_ADDRESSES[address] && validated) {\n    path = getTokenLogoURL(validated)\n  } else {\n    return (\n      <Image src={DefaultTokenIcon} {...rest} size={size} />\n    )\n  }\n\n  return (\n    <Image\n      {...rest}\n      // alt={address}\n      src={path}\n      size={size}\n      onError={() => {\n        NO_LOGO_ADDRESSES[address] = true\n        refresh(i => i + 1)\n      }}\n    />\n  )\n}\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/utils/prices.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Row/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/connectors/Fortmatic.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/connectors/NetworkConnector.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/data/V1.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/data/Allowances.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/constants/tokens/index.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Web3Status/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/useParsedQueryString.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Menu/index.tsx",["1334"],"import React, { useRef, useEffect } from 'react'\nimport { Info, BookOpen, Code, PieChart, MessageCircle } from 'react-feather'\nimport styled from 'styled-components'\nimport { ReactComponent as MenuIcon } from '../../assets/images/menu.svg'\nimport useToggle from '../../hooks/useToggle'\n\nimport { ExternalLink } from '../../theme'\nimport { useTranslation } from 'react-i18next'\n\n\nconst StyledMenuIcon = styled(MenuIcon)`\n  path {\n    stroke: ${({ theme }) => theme.text1};\n  }\n`\n\nconst StyledMenuButton = styled.button`\n  width: 100%;\n  height: 100%;\n  border: none;\n  background-color: transparent;\n  margin: 0;\n  padding: 0;\n  height: 35px;\n  background-color: ${({ theme }) => theme.bg3};\n\n  padding: 0.15rem 0.5rem;\n\n  :hover,\n  :focus {\n    cursor: pointer;\n    outline: none;\n    background-color: ${({ theme }) => theme.bg4};\n  }\n\n  svg {\n    margin-top: 2px;\n  }\n`\n\nconst StyledMenu = styled.div`\n  margin-left: 0.5rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  border: none;\n  text-align: left;\n`\n\nconst MenuFlyout = styled.span`\n  min-width: 8.125rem;\n  background-color: ${({ theme }) => theme.bg3};\n  box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.01), 0px 4px 8px rgba(0, 0, 0, 0.04), 0px 16px 24px rgba(0, 0, 0, 0.04),\n    0px 24px 32px rgba(0, 0, 0, 0.01);\n  padding: 0.5rem;\n  display: flex;\n  flex-direction: column;\n  font-size: 1rem;\n  position: absolute;\n  top: 3rem;\n  right: 0rem;\n  z-index: 100;\n`\n\nconst MenuItem = styled(ExternalLink)`\n  flex: 1;\n  padding: 0.5rem 0.5rem;\n  color: ${({ theme }) => theme.text2};\n  :hover {\n    color: ${({ theme }) => theme.text1};\n    cursor: pointer;\n    text-decoration: none;\n  }\n  > svg {\n    margin-right: 8px;\n  }\n`\n\nexport default function Menu() {\n  const node = useRef<HTMLDivElement>()\n  const [open, toggle] = useToggle(false)\n  const { t } = useTranslation()\n\n\n  useEffect(() => {\n    const handleClickOutside = e => {\n      if (node.current?.contains(e.target) ?? false) {\n        return\n      }\n      toggle()\n    }\n\n    if (open) {\n      document.addEventListener('mousedown', handleClickOutside)\n    } else {\n      document.removeEventListener('mousedown', handleClickOutside)\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside)\n    }\n  }, [open, toggle])\n\n  return (\n    <StyledMenu ref={node}>\n      <StyledMenuButton onClick={toggle}>\n        <StyledMenuIcon />\n      </StyledMenuButton>\n      {open && (\n        <MenuFlyout>\n          <MenuItem id=\"link\" href=\"\">\n            <Info size={14} />\n            {t('About')}\n          </MenuItem>\n          <MenuItem id=\"link\" href=\"https://prexis-labs.gitbook.io/dex-br/\">\n            <BookOpen size={14} />\n            {t('Docs')}\n          </MenuItem>\n          <MenuItem id=\"link\" href=\"https://github.com/prexislabs/dexbr-interface\">\n            <Code size={14} />\n            {t('Code')}\n          </MenuItem>\n          <MenuItem id=\"link\" href=\"\">\n            <MessageCircle size={14} />\n            {t('Discord')}\n          </MenuItem>\n        </MenuFlyout>\n      )}\n    </StyledMenu>\n  )\n}\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Settings/index.tsx",["1335","1336"],"import React, { useRef, useEffect, useContext, useState } from 'react'\nimport { Settings, X } from 'react-feather'\nimport styled from 'styled-components'\n\nimport {\n  useUserSlippageTolerance,\n  useExpertModeManager,\n  useUserDeadline,\n  useDarkModeManager\n} from '../../state/user/hooks'\nimport SlippageTabs from '../SlippageTabs'\nimport { RowFixed, RowBetween } from '../Row'\nimport { TYPE } from '../../theme'\nimport QuestionHelper from '../QuestionHelper'\nimport Toggle from '../Toggle'\nimport { ThemeContext } from 'styled-components'\nimport { AutoColumn } from '../Column'\nimport { ButtonError } from '../Button'\nimport { useSettingsMenuOpen, useToggleSettingsMenu } from '../../state/application/hooks'\nimport { Text } from 'rebass'\nimport Modal from '../Modal'\n\nimport { useTranslation } from 'react-i18next'\n\n\nconst StyledMenuIcon = styled(Settings)`\n  height: 20px;\n  width: 20px;\n\n  > * {\n    stroke: ${({ theme }) => theme.text1};\n  }\n`\n\nconst StyledCloseIcon = styled(X)`\n  height: 20px;\n  width: 20px;\n  :hover {\n    cursor: pointer;\n  }\n\n  > * {\n    stroke: ${({ theme }) => theme.text1};\n  }\n`\n\nconst StyledMenuButton = styled.button`\n  position: relative;\n  width: 100%;\n  height: 100%;\n  border: none;\n  background-color: transparent;\n  margin: 0;\n  padding: 0;\n  height: 35px;\n  background-color: ${({ theme }) => theme.bg3};\n\n  padding: 0.15rem 0.5rem;\n\n  :hover,\n  :focus {\n    cursor: pointer;\n    outline: none;\n    background-color: ${({ theme }) => theme.bg4};\n  }\n\n  svg {\n    margin-top: 2px;\n  }\n`\nconst EmojiWrapper = styled.div`\n  position: absolute;\n  bottom: -6px;\n  right: 0px;\n  font-size: 14px;\n`\n\nconst StyledMenu = styled.div`\n  margin-left: 0.5rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  border: none;\n  text-align: left;\n`\n\nconst MenuFlyout = styled.span`\n  min-width: 20.125rem;\n  background-color: ${({ theme }) => theme.bg1};\n  box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.01), 0px 4px 8px rgba(0, 0, 0, 0.04), 0px 16px 24px rgba(0, 0, 0, 0.04),\n    0px 24px 32px rgba(0, 0, 0, 0.01);\n  display: flex;\n  flex-direction: column;\n  font-size: 1rem;\n  position: absolute;\n  top: 3rem;\n  right: 0rem;\n  z-index: 100;\n\n  ${({ theme }) => theme.mediaWidth.upToExtraSmall`\n    min-width: 18.125rem;\n    right: -46px;\n  `};\n`\n\nconst Break = styled.div`\n  width: 100%;\n  height: 1px;\n  background-color: ${({ theme }) => theme.bg3};\n`\n\nconst ModalContentWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 2rem 0;\n  background-color: ${({ theme }) => theme.bg2};\n`\n\nexport default function SettingsTab() {\n  const node = useRef<HTMLDivElement>()\n  const open = useSettingsMenuOpen()\n  const toggle = useToggleSettingsMenu()\n\n  const theme = useContext(ThemeContext)\n  const [userSlippageTolerance, setUserslippageTolerance] = useUserSlippageTolerance()\n\n  const [deadline, setDeadline] = useUserDeadline()\n\n  const [expertMode, toggleExpertMode] = useExpertModeManager()\n\n  const [darkMode, toggleDarkMode] = useDarkModeManager()\n\n  const { t } = useTranslation()\n\n\n  // show confirmation view before turning on\n  const [showConfirmation, setShowConfirmation] = useState(false)\n\n  useEffect(() => {\n    const handleClickOutside = e => {\n      if (node.current?.contains(e.target) ?? false) {\n        return\n      }\n      toggle()\n    }\n\n    if (open) {\n      document.addEventListener('mousedown', handleClickOutside)\n    } else {\n      document.removeEventListener('mousedown', handleClickOutside)\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside)\n    }\n  }, [open, toggle])\n\n  return (\n    <StyledMenu ref={node}>\n      <Modal isOpen={showConfirmation} onDismiss={() => setShowConfirmation(false)} maxHeight={100}>\n        <ModalContentWrapper>\n          <AutoColumn gap=\"lg\">\n            <RowBetween style={{ padding: '0 2rem' }}>\n              <div />\n              <Text fontWeight={500} fontSize={20}>\n              {t('Are you sure?')}\n              </Text>\n              <StyledCloseIcon onClick={() => setShowConfirmation(false)} />\n            </RowBetween>\n            <Break />\n            <AutoColumn gap=\"lg\" style={{ padding: '0 2rem' }}>\n              <Text fontWeight={500} fontSize={20}>\n              {t('Expert mode turns off the confirm transaction prompt and allows high slippage trades that often result in bad rates and lost funds.')}\n              </Text>\n              <Text fontWeight={600} fontSize={20}>\n                {t('ONLY USE THIS MODE IF YOU KNOW WHAT YOU ARE DOING.')}\n              </Text>\n              <ButtonError\n                error={true}\n                padding={'12px'}\n                onClick={() => {\n                  if (window.prompt(`Please type the word \"confirm\" to enable expert mode.`) === 'confirm') {\n                    toggleExpertMode()\n                    setShowConfirmation(false)\n                  }\n                }}\n              >\n                <Text fontSize={20} fontWeight={500}>\n                {t('Turn On Expert Mode')}\n                </Text>\n              </ButtonError>\n            </AutoColumn>\n          </AutoColumn>\n        </ModalContentWrapper>\n      </Modal>\n      <StyledMenuButton onClick={toggle}>\n        <StyledMenuIcon />\n        {expertMode && (\n          <EmojiWrapper>\n            <span role=\"img\" aria-label=\"wizard-icon\">\n              🧙\n            </span>\n          </EmojiWrapper>\n        )}\n      </StyledMenuButton>\n      {open && (\n        <MenuFlyout>\n          <AutoColumn gap=\"md\" style={{ padding: '1rem' }}>\n            <Text fontWeight={600} fontSize={14}>\n              {t('Transaction Settings')}\n            </Text>\n            <SlippageTabs\n              rawSlippage={userSlippageTolerance}\n              setRawSlippage={setUserslippageTolerance}\n              deadline={deadline}\n              setDeadline={setDeadline}\n            />\n            <Text fontWeight={600} fontSize={14}>\n              {t('Interface Settings')}\n            </Text>\n            <RowBetween>\n              <RowFixed>\n                <TYPE.black fontWeight={400} fontSize={14} color={theme.text2}>\n                {t('Toggle Expert Mode')}\n                </TYPE.black>\n                <QuestionHelper text={t('Bypasses confirmation modals and allows high slippage trades. Use at your own risk.')} />\n                <div ></div>\n              </RowFixed>\n              <Toggle\n                isActive={expertMode}\n                toggle={\n                  expertMode\n                    ? () => {\n                        toggleExpertMode()\n                        setShowConfirmation(false)\n                      }\n                    : () => {\n                        toggle()\n                        setShowConfirmation(true)\n                      }\n                }\n              />\n            </RowBetween>\n            <RowBetween>\n              <RowFixed>\n                <TYPE.black fontWeight={400} fontSize={14} color={theme.text2}>\n                {t('Toggle Dark Mode')}\n                </TYPE.black>\n              </RowFixed>\n              <Toggle isActive={darkMode} toggle={toggleDarkMode} />\n            </RowBetween>\n          </AutoColumn>\n        </MenuFlyout>\n      )}\n    </StyledMenu>\n  )\n}\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Card/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/utils/maxAmountSpend.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/state/swap/hooks.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/useSwapCallback.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/useENSAddress.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Loader/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/TxnPopup/index.tsx",["1337"],"import React, { useCallback, useContext, useState } from 'react'\nimport { AlertCircle, CheckCircle } from 'react-feather'\n\nimport styled, { ThemeContext } from 'styled-components'\n\nimport { useActiveWeb3React } from '../../hooks'\nimport useInterval from '../../hooks/useInterval'\nimport { useRemovePopup } from '../../state/application/hooks'\nimport { TYPE } from '../../theme'\n\nimport { ExternalLink } from '../../theme/components'\nimport { getEtherscanLink } from '../../utils'\nimport { AutoColumn } from '../Column'\nimport { AutoRow } from '../Row'\nimport { useTranslation } from 'react-i18next'\n\n\nconst Fader = styled.div<{ count: number }>`\n  position: absolute;\n  bottom: 0px;\n  left: 0px;\n  width: ${({ count }) => `calc(100% - (100% / ${150 / count}))`};\n  height: 2px;\n  background-color: ${({ theme }) => theme.bg3};\n  transition: width 100ms linear;\n`\n\nconst delay = 100\n\nexport default function TxnPopup({\n  hash,\n  success,\n  summary,\n  popKey\n}: {\n  hash: string\n  success?: boolean\n  summary?: string\n  popKey?: string\n}) {\n  const { chainId } = useActiveWeb3React()\n  const [count, setCount] = useState(1)\n  const { t } = useTranslation()\n\n  const [isRunning, setIsRunning] = useState(true)\n  const removePopup = useRemovePopup()\n\n  const removeThisPopup = useCallback(() => removePopup(popKey), [popKey, removePopup])\n\n  useInterval(\n    () => {\n      count > 150 ? removeThisPopup() : setCount(count + 1)\n    },\n    isRunning ? delay : null\n  )\n\n  const handleMouseEnter = useCallback(() => setIsRunning(false), [])\n  const handleMouseLeave = useCallback(() => setIsRunning(true), [])\n\n  const theme = useContext(ThemeContext)\n\n  return (\n    <AutoRow onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\n      <div style={{ paddingRight: 16 }}>\n        {success ? <CheckCircle color={theme.green1} size={24} /> : <AlertCircle color={theme.red1} size={24} />}\n      </div>\n      <AutoColumn gap=\"8px\">\n        <TYPE.body fontWeight={500}>{summary ?? 'Hash: ' + hash.slice(0, 8) + '...' + hash.slice(58, 65)}</TYPE.body>\n        <ExternalLink href={getEtherscanLink(chainId, hash, 'transaction')}>{t('')}</ExternalLink>\n      </AutoColumn>\n      <Fader count={count} />\n    </AutoRow>\n  )\n}\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Column/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/SearchModal/TokenSearchModal.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/NumericalInput/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/swap/confirmPriceImpactWithoutFee.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/swap/BetterTradeLink.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/swap/TradePrice.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/swap/SwapModalHeader.tsx",["1338","1339","1340"],"import { Token, TokenAmount } from 'dexbr-sdk'\nimport React, { useContext } from 'react'\nimport { ArrowDown } from 'react-feather'\nimport { Text } from 'rebass'\nimport { ThemeContext } from 'styled-components'\nimport { Field } from '../../state/swap/actions'\nimport { TYPE } from '../../theme'\nimport { isAddress, shortenAddress } from '../../utils'\nimport { AutoColumn } from '../Column'\nimport { RowBetween, RowFixed } from '../Row'\nimport TokenLogo from '../TokenLogo'\nimport { TruncatedText } from './styleds'\nimport { useTranslation } from 'react-i18next'\n\n\nexport default function SwapModalHeader({\n  tokens,\n  formattedAmounts,\n  slippageAdjustedAmounts,\n  priceImpactSeverity,\n  independentField,\n  recipient\n}: {\n  tokens: { [field in Field]?: Token }\n  formattedAmounts: { [field in Field]?: string }\n  slippageAdjustedAmounts: { [field in Field]?: TokenAmount }\n  priceImpactSeverity: number\n  independentField: Field\n  recipient: string | null\n}) {\n  const theme = useContext(ThemeContext)\n  const { t } = useTranslation()\n\n\n  return (\n    <AutoColumn gap={'md'} style={{ marginTop: '20px' }}>\n      <RowBetween align=\"flex-end\">\n        <TruncatedText fontSize={24} fontWeight={500}>\n          {formattedAmounts[Field.INPUT]}\n        </TruncatedText>\n        <RowFixed gap=\"4px\">\n          <TokenLogo address={tokens[Field.INPUT]?.address} size={'24px'} />\n          <Text fontSize={24} fontWeight={500} style={{ marginLeft: '10px' }}>\n            {tokens[Field.INPUT]?.symbol}\n          </Text>\n        </RowFixed>\n      </RowBetween>\n      <RowFixed>\n        <ArrowDown size=\"16\" color={theme.text2} />\n      </RowFixed>\n      <RowBetween align=\"flex-end\">\n        <TruncatedText fontSize={24} fontWeight={500} color={priceImpactSeverity > 2 ? theme.red1 : ''}>\n          {formattedAmounts[Field.OUTPUT]}\n        </TruncatedText>\n        <RowFixed gap=\"4px\">\n          <TokenLogo address={tokens[Field.OUTPUT]?.address} size={'24px'} />\n          <Text fontSize={24} fontWeight={500} style={{ marginLeft: '10px' }}>\n            {tokens[Field.OUTPUT]?.symbol}\n          </Text>\n        </RowFixed>\n      </RowBetween>\n      <AutoColumn justify=\"flex-start\" gap=\"sm\" style={{ padding: '12px 0 0 0px' }}>\n        {independentField === Field.INPUT ? (\n          <TYPE.italic textAlign=\"left\" style={{ width: '100%' }}>\n            {t('Output is estimated. You will receive at least ')}\n            <b>\n              {slippageAdjustedAmounts[Field.OUTPUT]?.toSignificant(6)} {tokens[Field.OUTPUT]?.symbol}\n            </b>\n            {t(' or the transaction will revert.')}\n          </TYPE.italic>\n        ) : (\n          <TYPE.italic textAlign=\"left\" style={{ width: '100%' }}>\n            {t('Input is estimated. You will sell at most ')}\n            <b>\n              {slippageAdjustedAmounts[Field.INPUT]?.toSignificant(6)} {tokens[Field.INPUT]?.symbol}\n            </b>\n            {t(' or the transaction will revert.')}\n          </TYPE.italic>\n        )}\n      </AutoColumn>\n      {recipient !== null ? (\n        <AutoColumn justify=\"flex-start\" gap=\"sm\" style={{ padding: '12px 0 0 0px' }}>\n          <TYPE.main>\n          {t('Output will be sent to')}{' '}\n            <b title={recipient}>{isAddress(recipient) ? shortenAddress(recipient) : recipient}</b>\n          </TYPE.main>\n        </AutoColumn>\n      ) : null}\n    </AutoColumn>\n  )\n}\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/swap/SwapModalFooter.tsx",["1341","1342","1343","1344","1345","1346"],"import { Percent, TokenAmount, Trade, TradeType } from 'dexbr-sdk'\nimport React, { useContext } from 'react'\nimport { Repeat } from 'react-feather'\nimport { Text } from 'rebass'\nimport { ThemeContext } from 'styled-components'\nimport { Field } from '../../state/swap/actions'\nimport { TYPE } from '../../theme'\nimport { formatExecutionPrice } from '../../utils/prices'\nimport { ButtonError } from '../Button'\nimport { AutoColumn } from '../Column'\nimport QuestionHelper from '../QuestionHelper'\nimport { AutoRow, RowBetween, RowFixed } from '../Row'\nimport FormattedPriceImpact from './FormattedPriceImpact'\nimport { StyledBalanceMaxMini } from './styleds'\nimport { useTranslation } from 'react-i18next'\n\n\nexport default function SwapModalFooter({\n  trade,\n  showInverted,\n  setShowInverted,\n  severity,\n  slippageAdjustedAmounts,\n  onSwap,\n  parsedAmounts,\n  realizedLPFee,\n  priceImpactWithoutFee,\n  confirmText\n}: {\n  trade?: Trade\n  showInverted: boolean\n  setShowInverted: (inverted: boolean) => void\n  severity: number\n  slippageAdjustedAmounts?: { [field in Field]?: TokenAmount }\n  onSwap: () => any\n  parsedAmounts?: { [field in Field]?: TokenAmount }\n  realizedLPFee?: TokenAmount\n  priceImpactWithoutFee?: Percent\n  confirmText: string\n}) {\n  const theme = useContext(ThemeContext)\n  const { t } = useTranslation()\n\n\n  if (!trade) {\n    return null\n  }\n\n  return (\n    <>\n      <AutoColumn gap=\"0px\">\n        <RowBetween align=\"center\">\n          <Text fontWeight={400} fontSize={14} color={theme.black}>\n            {t('Price')}\n          </Text>\n          <Text\n            fontWeight={500}\n            fontSize={14}\n            color={theme.text1}\n            style={{\n              justifyContent: 'center',\n              alignItems: 'center',\n              display: 'flex',\n              textAlign: 'right',\n              paddingLeft: '10px'\n            }}\n          >\n            {formatExecutionPrice(trade, showInverted)}\n            <StyledBalanceMaxMini onClick={() => setShowInverted(!showInverted)}>\n              <Repeat size={14} />\n            </StyledBalanceMaxMini>\n          </Text>\n        </RowBetween>\n\n        <RowBetween>\n          <RowFixed>\n            <TYPE.black fontSize={14} fontWeight={400} color={theme.black}>\n              {trade?.tradeType === TradeType.EXACT_INPUT ? t('Minimum sent') : t('Maximum sold')}\n            </TYPE.black>\n            <QuestionHelper text={t('Your transaction will revert if there is a large, unfavorable price movement before it is confirmed.')} />\n          </RowFixed>\n          <RowFixed>\n            <TYPE.black fontSize={14}>\n              {trade?.tradeType === TradeType.EXACT_INPUT\n                ? slippageAdjustedAmounts[Field.OUTPUT]?.toSignificant(4) ?? '-'\n                : slippageAdjustedAmounts[Field.INPUT]?.toSignificant(4) ?? '-'}\n            </TYPE.black>\n            {parsedAmounts[Field.OUTPUT] && parsedAmounts[Field.INPUT] && (\n              <TYPE.black fontSize={14} marginLeft={'4px'}>\n                {trade?.tradeType === TradeType.EXACT_INPUT\n                  ? parsedAmounts[Field.OUTPUT]?.token?.symbol\n                  : parsedAmounts[Field.INPUT]?.token?.symbol}\n              </TYPE.black>\n            )}\n          </RowFixed>\n        </RowBetween>\n        <RowBetween>\n          <RowFixed>\n            <TYPE.black color={theme.black} fontSize={14} fontWeight={400}>\n            {t('Price Impact')}\n            </TYPE.black>\n            <QuestionHelper text={t('The difference between the market price and your price due to trade size.')} />\n          </RowFixed>\n          <FormattedPriceImpact priceImpact={priceImpactWithoutFee} />\n        </RowBetween>\n        <RowBetween>\n          <RowFixed>\n            <TYPE.black fontSize={14} fontWeight={400} color={theme.black}>\n            {t('Liquidity Provider Fee')}\n            </TYPE.black>\n            <QuestionHelper text={t('A portion of each trade (0.30%) goes to liquidity providers as a protocol incentive.')} />\n          </RowFixed>\n          <TYPE.black fontSize={14}>\n            {realizedLPFee ? realizedLPFee?.toSignificant(6) + ' ' + trade?.inputAmount?.token?.symbol : '-'}\n          </TYPE.black>\n        </RowBetween>\n      </AutoColumn>\n\n      <AutoRow>\n        <ButtonError onClick={onSwap} error={severity > 2} style={{ margin: '10px 0 0 0' }} id=\"confirm-swap-or-send\">\n          <Text fontSize={20} fontWeight={500}>\n            {confirmText}\n          </Text>\n        </ButtonError>\n      </AutoRow>\n    </>\n  )\n}\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/swap/AdvancedSwapDetailsDropdown.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/state/burn/hooks.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/constants/tokens/goerli.ts",["1347"],"import { Token, ChainId } from 'dexbr-sdk'\n\nexport default [\n  new Token(ChainId.GÖRLI, '0xcbB27cE87aBef0Fda2049148Aa4B4820E6db40fc', 18, 'DEXT', 'DexBR Token'),\n  new Token(ChainId.GÖRLI, '0x50a6505C9B5F6837CA69724F204Ffe21B2ca7806', 18, 'USDC', 'USDC Token')\n]\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/DoubleLogo/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/Trades.ts",["1348"],"import { Pair, Token, TokenAmount, Trade } from 'dexbr-sdk'\nimport flatMap from 'lodash.flatmap'\nimport { useMemo } from 'react'\n\nimport { BASES_TO_CHECK_TRADES_AGAINST } from '../constants'\nimport { usePairs } from '../data/Reserves'\n\nimport { useActiveWeb3React } from './index'\n\nfunction useAllCommonPairs(tokenA?: Token, tokenB?: Token): Pair[] {\n  const { chainId } = useActiveWeb3React()\n\n  const bases: Token[] = chainId ? BASES_TO_CHECK_TRADES_AGAINST[chainId] : []\n\n  const allPairCombinations: [Token | undefined, Token | undefined][] = useMemo(\n    () => [\n      // the direct pair\n      [tokenA, tokenB],\n      // token A against all bases\n      ...bases.map((base): [Token | undefined, Token | undefined] => [tokenA, base]),\n      // token B against all bases\n      ...bases.map((base): [Token | undefined, Token | undefined] => [tokenB, base]),\n      // each base against all bases\n      ...flatMap(bases, (base): [Token, Token][] => bases.map(otherBase => [base, otherBase]))\n    ],\n    [tokenA, tokenB, bases]\n  )\n\n  const allPairs = usePairs(allPairCombinations)\n\n  // only pass along valid pairs, non-duplicated pairs\n  return useMemo(\n    () =>\n      Object.values(\n        allPairs\n          // filter out invalid pairs\n          .filter((p): p is Pair => !!p)\n          // filter out duplicated pairs\n          .reduce<{ [pairAddress: string]: Pair }>((memo, curr) => {\n            memo[curr.liquidityToken.address] = memo[curr.liquidityToken.address] ?? curr\n            return memo\n          }, {})\n      ),\n    [allPairs]\n  )\n}\n\n/**\n * Returns the best trade for the exact amount of tokens in to the given token out\n */\nexport function useTradeExactIn(amountIn?: TokenAmount, tokenOut?: Token): Trade | null {\n  const allowedPairs = useAllCommonPairs(amountIn?.token, tokenOut)\n\n  return useMemo(() => {\n    if (amountIn && tokenOut && allowedPairs.length > 0) {\n      return Trade.bestTradeExactIn(allowedPairs, amountIn, tokenOut, { maxHops: 3, maxNumResults: 1 })[0] ?? null\n    }\n    return null\n  }, [allowedPairs, amountIn, tokenOut])\n}\n\n/**\n * Returns the best trade for the token in to the exact amount of token out\n */\nexport function useTradeExactOut(tokenIn?: Token, amountOut?: TokenAmount): Trade | null {\n  const allowedPairs = useAllCommonPairs(tokenIn, amountOut?.token)\n\n  return useMemo(() => {\n    if (tokenIn && amountOut && allowedPairs.length > 0) {\n      return Trade.bestTradeExactOut(allowedPairs, tokenIn, amountOut, { maxHops: 3, maxNumResults: 1 })[0] ?? null\n    }\n    return null\n  }, [allowedPairs, tokenIn, amountOut])\n}\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/useENS.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/useToggle.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/useInterval.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/PositionCard/index.tsx",["1349","1350"],"import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { darken } from 'polished'\nimport { Link } from 'react-router-dom'\nimport { Percent, Pair, JSBI } from 'dexbr-sdk'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useTotalSupply } from '../../data/TotalSupply'\nimport { currencyId } from '../../pages/AddLiquidity/currencyId'\nimport { useTokenBalance } from '../../state/wallet/hooks'\nimport Card, { GreyCard } from '../Card'\nimport TokenLogo from '../TokenLogo'\nimport DoubleLogo from '../DoubleLogo'\nimport { Text } from 'rebass'\nimport { ExternalLink } from '../../theme'\nimport { AutoColumn } from '../Column'\nimport { ChevronDown, ChevronUp } from 'react-feather'\nimport { ButtonSecondary } from '../Button'\nimport { RowBetween, RowFixed, AutoRow } from '../Row'\nimport { Dots } from '../swap/styleds'\nimport { useTranslation } from 'react-i18next'\n\n\nexport const FixedHeightRow = styled(RowBetween)`\n  height: 24px;\n`\n\nexport const HoverCard = styled(Card)`\n  border: 1px solid ${({ theme }) => theme.bg2};\n  :hover {\n    border: 1px solid ${({ theme }) => darken(0.06, theme.bg2)};\n  }\n`\n\ninterface PositionCardProps {\n  pair: Pair | undefined | null\n  border?: string\n}\n\nexport function MinimalPositionCard({ pair, border }: PositionCardProps) {\n  const { account } = useActiveWeb3React()\n  const { t } = useTranslation()\n\n\n  const token0 = pair?.token0\n  const token1 = pair?.token1\n\n  const [showMore, setShowMore] = useState(false)\n\n  const userPoolBalance = useTokenBalance(account, pair?.liquidityToken)\n  const totalPoolTokens = useTotalSupply(pair?.liquidityToken)\n\n  const [token0Deposited, token1Deposited] =\n    !!pair &&\n    !!totalPoolTokens &&\n    !!userPoolBalance &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\n      ? [\n          pair.getLiquidityValue(token0, totalPoolTokens, userPoolBalance, false),\n          pair.getLiquidityValue(token1, totalPoolTokens, userPoolBalance, false)\n        ]\n      : [undefined, undefined]\n\n  return (\n    <>\n      {userPoolBalance && (\n        <GreyCard border={border}>\n          <AutoColumn gap=\"12px\">\n            <FixedHeightRow>\n              <RowFixed>\n                <Text color=\"#fff\" fontWeight={500} fontSize={16}>\n                  {t('Your position')}\n                </Text>\n              </RowFixed>\n            </FixedHeightRow>\n            <FixedHeightRow onClick={() => setShowMore(!showMore)}>\n              <RowFixed>\n                <DoubleLogo a0={token0?.address || ''} a1={token1?.address || ''} margin={true} size={20} />\n                <Text color=\"#fff\" fontWeight={500} fontSize={20}>\n                  {token0?.symbol}/{token1?.symbol}\n                </Text>\n              </RowFixed>\n              <RowFixed>\n                <Text color=\"#fff\" fontWeight={500} fontSize={20}>\n                  {userPoolBalance ? userPoolBalance.toSignificant(4) : '-'}\n                </Text>\n              </RowFixed>\n            </FixedHeightRow>\n            <AutoColumn gap=\"4px\">\n              <FixedHeightRow>\n                <Text color=\"#fff\" fontSize={16} fontWeight={500}>\n                  {token0?.symbol}:\n                </Text>\n                {token0Deposited ? (\n                  <RowFixed>\n                    <Text color=\"#ffff\" fontSize={16} fontWeight={500} marginLeft={'6px'}>\n                      {token0Deposited?.toSignificant(6)}\n                    </Text>\n                  </RowFixed>\n                ) : (\n                  '-'\n                )}\n              </FixedHeightRow>\n              <FixedHeightRow>\n                <Text color=\"#fff\" fontSize={16} fontWeight={500}>\n                  {token1?.symbol}:\n                </Text>\n                {token1Deposited ? (\n                  <RowFixed>\n                    <Text color=\"#fff\" fontSize={16} fontWeight={500} marginLeft={'6px'}>\n                      {token1Deposited?.toSignificant(6)}\n                    </Text>\n                  </RowFixed>\n                ) : (\n                  '-'\n                )}\n              </FixedHeightRow>\n            </AutoColumn>\n          </AutoColumn>\n        </GreyCard>\n      )}\n    </>\n  )\n}\n\nexport default function FullPositionCard({ pair, border }: PositionCardProps) {\n  const { account } = useActiveWeb3React()\n\n  const token0 = pair?.token0\n  const token1 = pair?.token1\n  const { t } = useTranslation()\n\n\n  const [showMore, setShowMore] = useState(false)\n\n  const userPoolBalance = useTokenBalance(account, pair?.liquidityToken)\n  const totalPoolTokens = useTotalSupply(pair?.liquidityToken)\n\n  const poolTokenPercentage =\n    !!userPoolBalance && !!totalPoolTokens && JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\n      ? new Percent(userPoolBalance.raw, totalPoolTokens.raw)\n      : undefined\n\n  const [token0Deposited, token1Deposited] =\n    !!pair &&\n    !!totalPoolTokens &&\n    !!userPoolBalance &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\n      ? [\n          pair.getLiquidityValue(token0, totalPoolTokens, userPoolBalance, false),\n          pair.getLiquidityValue(token1, totalPoolTokens, userPoolBalance, false)\n        ]\n      : [undefined, undefined]\n\n  return (\n    <HoverCard border={border}>\n      <AutoColumn gap=\"12px\">\n        <FixedHeightRow onClick={() => setShowMore(!showMore)} style={{ cursor: 'pointer' }}>\n          <RowFixed>\n            <DoubleLogo a0={token0?.address || ''} a1={token1?.address || ''} margin={true} size={20} />\n            <Text fontWeight={500} fontSize={20}>\n              {!token0 || !token1 ? <Dots>{t('Loading')}</Dots> : `${token0.symbol}/${token1.symbol}`}\n            </Text>\n          </RowFixed>\n          <RowFixed>\n            {showMore ? (\n              <ChevronUp size=\"20\" style={{ marginLeft: '10px' }} />\n            ) : (\n              <ChevronDown size=\"20\" style={{ marginLeft: '10px' }} />\n            )}\n          </RowFixed>\n        </FixedHeightRow>\n        {showMore && (\n          <AutoColumn gap=\"8px\">\n            <FixedHeightRow>\n              <RowFixed>\n                <Text fontSize={16} fontWeight={500}>\n                {t('Pooled')} {token0?.symbol}:\n                </Text>\n              </RowFixed>\n              {token0Deposited ? (\n                <RowFixed>\n                  <Text fontSize={16} fontWeight={500} marginLeft={'6px'}>\n                    {token0Deposited?.toSignificant(6)}\n                  </Text>\n                  <TokenLogo size=\"20px\" style={{ marginLeft: '8px' }} address={token0?.address} />\n                </RowFixed>\n              ) : (\n                '-'\n              )}\n            </FixedHeightRow>\n\n            <FixedHeightRow>\n              <RowFixed>\n                <Text fontSize={16} fontWeight={500}>\n                {t('Pooled')} {token1?.symbol}:\n                </Text>\n              </RowFixed>\n              {token1Deposited ? (\n                <RowFixed>\n                  <Text fontSize={16} fontWeight={500} marginLeft={'6px'}>\n                    {token1Deposited?.toSignificant(6)}\n                  </Text>\n                  <TokenLogo size=\"20px\" style={{ marginLeft: '8px' }} address={token1?.address} />\n                </RowFixed>\n              ) : (\n                '-'\n              )}\n            </FixedHeightRow>\n            <FixedHeightRow>\n              <Text fontSize={16} fontWeight={500}>\n              {t('Your pool tokens:')}\n              </Text>\n              <Text fontSize={16} fontWeight={500}>\n                {userPoolBalance ? userPoolBalance.toSignificant(4) : '-'}\n              </Text>\n            </FixedHeightRow>\n            <FixedHeightRow>\n              <Text fontSize={16} fontWeight={500}>\n              {t('Your pool share:')}\n              </Text>\n              <Text fontSize={16} fontWeight={500}>\n                {poolTokenPercentage ? poolTokenPercentage.toFixed(2) + '%' : '-'}\n              </Text>\n            </FixedHeightRow>\n\n            {/* <AutoRow justify=\"center\" marginTop={'10px'}>\n              <ExternalLink href={`https://uniswap.info/pair/${pair?.liquidityToken.address}`}>\n              {t('View pool information')} ↗\n              </ExternalLink>\n            </AutoRow> */}\n            <RowBetween marginTop=\"10px\">\n              <ButtonSecondary as={Link} to={`/add/${currencyId(token0)}/${currencyId(token1)}`} width=\"48%\">\n              {t('Add')}\n              </ButtonSecondary>\n              <ButtonSecondary as={Link} width=\"48%\" to={`/remove/${token0?.address}-${token1?.address}`}>\n                {t('Remove')}\n              </ButtonSecondary>\n            </RowBetween>\n          </AutoColumn>\n        )}\n      </AutoColumn>\n    </HoverCard>\n  )\n}\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/NavigationTabs/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Button/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/TokenWarningCard/index.tsx",["1351","1352"],"import { Token } from 'dexbr-sdk'\nimport { transparentize } from 'polished'\nimport React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { ReactComponent as Close } from '../../assets/images/x.svg'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useAllTokens } from '../../hooks/Tokens'\nimport { Field } from '../../state/swap/actions'\nimport { useTokenWarningDismissal } from '../../state/user/hooks'\nimport { ExternalLink, TYPE } from '../../theme'\nimport { getEtherscanLink, isDefaultToken } from '../../utils'\nimport PropsOfExcluding from '../../utils/props-of-excluding'\nimport QuestionHelper from '../QuestionHelper'\nimport TokenLogo from '../TokenLogo'\nimport { useTranslation } from 'react-i18next'\n\n\nconst Wrapper = styled.div<{ error: boolean }>`\n  background: ${({ theme, error }) => transparentize(0.0, error ? theme.red1 : theme.white)};\n  position: relative;\n  padding: 1rem;\n  /* border: 0.5px solid ${({ theme, error }) => transparentize(0.4, error ? theme.red1 : theme.white)}; */\n  margin-bottom: 20px;\n  display: grid;\n  grid-template-rows: 14px auto auto;\n  grid-row-gap: 14px;\n`\n\nconst Row = styled.div`\n  display: flex;\n  align-items: center;\n  justify-items: flex-start;\n  & > * {\n    margin-right: 6px;\n  }\n`\n\nconst CloseColor = styled(Close)`\n  color: #000;\n`\n\nconst CloseIcon = styled.div`\n  position: absolute;\n  right: 1rem;\n  top: 12px;\n  &:hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n\n  & > * {\n    height: 16px;\n    width: 16px;\n  }\n`\n\nconst HELP_TEXT = `\nThe Uniswap V2 smart contracts are designed to support any ERC20 token on Ethereum. Any token can be\nloaded into the interface by entering its Ethereum address into the search field or passing it as a URL\nparameter.\n`\n\nconst DUPLICATE_NAME_HELP_TEXT = `${HELP_TEXT} This token has the same name or symbol as another token in your list.`\n\ninterface TokenWarningCardProps extends PropsOfExcluding<typeof Wrapper, 'error'> {\n  token?: Token\n}\n\nexport default function TokenWarningCard({ token, ...rest }: TokenWarningCardProps) {\n  const { chainId } = useActiveWeb3React()\n\n  const isDefault = isDefaultToken(token)\n\n  const tokenSymbol = token?.symbol?.toLowerCase() ?? ''\n  const tokenName = token?.name?.toLowerCase() ?? ''\n\n  const [dismissed, dismissTokenWarning] = useTokenWarningDismissal(chainId, token)\n\n  const allTokens = useAllTokens()\n  const { t } = useTranslation()\n\n\n  const duplicateNameOrSymbol = useMemo(() => {\n    if (isDefault || !token || !chainId) return false\n\n    return Object.keys(allTokens).some(tokenAddress => {\n      const userToken = allTokens[tokenAddress]\n      if (userToken.equals(token)) {\n        return false\n      }\n      return userToken.symbol.toLowerCase() === tokenSymbol || userToken.name.toLowerCase() === tokenName\n    })\n  }, [isDefault, token, chainId, allTokens, tokenSymbol, tokenName])\n\n  if (isDefault || !token || dismissed) return null\n\n  return (\n    <Wrapper error={duplicateNameOrSymbol} {...rest}>\n      {duplicateNameOrSymbol ? null : (\n        <CloseIcon onClick={dismissTokenWarning}>\n          <CloseColor />\n        </CloseIcon>\n      )}\n      <Row>\n        <TYPE.subHeader>{duplicateNameOrSymbol ? t('Duplicate token name or symbol') : t('Imported token')}</TYPE.subHeader>\n        <QuestionHelper text={duplicateNameOrSymbol ? DUPLICATE_NAME_HELP_TEXT : HELP_TEXT} />\n      </Row>\n      <Row>\n        <TokenLogo address={token.address} />\n        <div style={{ fontWeight: 500}}>\n          {token && token.name && token.symbol && token.name !== token.symbol\n            ? `${token.name} (${token.symbol})`\n            : token.name || token.symbol}\n        </div>\n        <ExternalLink style={{ fontWeight: 400 }} href={getEtherscanLink(chainId, token.address, 'token')}>\n          ({t('View on Etherscan')})\n        </ExternalLink>\n      </Row>\n      <Row>\n        <TYPE.italic>{t('Verify this is the correct token before making any transactions.')}</TYPE.italic>\n      </Row>\n    </Wrapper>\n  )\n}\n\nconst WarningContainer = styled.div`\n  max-width: 420px;\n  width: 100%;\n  padding-left: 1rem;\n  padding-right: 1rem;\n`\n\nexport function TokenWarningCards({ tokens }: { tokens: { [field in Field]?: Token } }) {\n  return (\n    <WarningContainer>\n      {Object.keys(tokens).map(field =>\n        tokens[field] ? <TokenWarningCard style={{ marginBottom: 14 }} key={field} token={tokens[field]} /> : null\n      )}\n    </WarningContainer>\n  )\n}\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/SearchModal/sorting.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/SearchModal/SortButton.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/SearchModal/TokenList.tsx",["1353","1354","1355"],"import { JSBI, Token, TokenAmount } from 'dexbr-sdk'\nimport React, { CSSProperties, memo, useContext, useMemo } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { FixedSizeList } from 'react-window'\nimport { Text } from 'rebass'\nimport { ThemeContext } from 'styled-components'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useAllTokens } from '../../hooks/Tokens'\nimport { useAddUserToken, useRemoveUserAddedToken } from '../../state/user/hooks'\nimport { LinkStyledButton, TYPE } from '../../theme'\nimport { ButtonSecondary } from '../Button'\nimport Column, { AutoColumn } from '../Column'\nimport { RowFixed } from '../Row'\nimport TokenLogo from '../TokenLogo'\nimport { FadedSpan, GreySpan, MenuItem, ModalInfo } from './styleds'\nimport Loader from '../Loader'\nimport { isDefaultToken, isCustomAddedToken } from '../../utils'\n\nexport default function TokenList({\n  tokens,\n  allTokenBalances,\n  selectedToken,\n  onTokenSelect,\n  otherToken,\n  showSendWithSwap,\n  otherSelectedText\n}: {\n  tokens: Token[]\n  selectedToken: string\n  allTokenBalances: { [tokenAddress: string]: TokenAmount }\n  onTokenSelect: (tokenAddress: string) => void\n  otherToken: string\n  showSendWithSwap?: boolean\n  otherSelectedText: string\n}) {\n  const { t } = useTranslation()\n  const { account, chainId } = useActiveWeb3React()\n  const theme = useContext(ThemeContext)\n  const allTokens = useAllTokens()\n  const addToken = useAddUserToken()\n  const removeToken = useRemoveUserAddedToken()\n\n  const TokenRow = useMemo(() => {\n    return memo(function TokenRow({ index, style }: { index: number; style: CSSProperties }) {\n      const token = tokens[index]\n      const { address, symbol } = token\n\n      const isDefault = isDefaultToken(token)\n      const customAdded = isCustomAddedToken(allTokens, token)\n      const balance = allTokenBalances[address]\n\n      const zeroBalance = balance && JSBI.equal(JSBI.BigInt(0), balance.raw)\n\n      return (\n        <MenuItem\n          style={style}\n          key={address}\n          className={`token-item-${address}`}\n          onClick={() => (selectedToken && selectedToken === address ? null : onTokenSelect(address))}\n          disabled={selectedToken && selectedToken === address}\n          selected={otherToken === address}\n        >\n          <RowFixed>\n            <TokenLogo address={address} size={'24px'} style={{ marginRight: '14px' }} />\n            <Column>\n              <Text fontWeight={500}>\n                {symbol}\n                {otherToken === address && <GreySpan> ({otherSelectedText})</GreySpan>}\n              </Text>\n              <FadedSpan>\n                {customAdded ? (\n                  <TYPE.main fontWeight={500}>\n                    {t('Added by user')}\n                    <LinkStyledButton\n                      onClick={event => {\n                        event.stopPropagation()\n                        removeToken(chainId, address)\n                      }}\n                    >\n                      ({t('Remove')})\n                    </LinkStyledButton>\n                  </TYPE.main>\n                ) : null}\n                {!isDefault && !customAdded ? (\n                  <TYPE.main fontWeight={500}>\n                    {t('Found by address')}\n                    <LinkStyledButton\n                      onClick={event => {\n                        event.stopPropagation()\n                        addToken(token)\n                      }}\n                    >\n                      ({t('Add')})\n                    </LinkStyledButton>\n                  </TYPE.main>\n                ) : null}\n              </FadedSpan>\n            </Column>\n          </RowFixed>\n          <AutoColumn>\n            {balance ? (\n              <Text>\n                {zeroBalance && showSendWithSwap ? (\n                  <ButtonSecondary padding={'4px 8px'}>\n                    <Text textAlign=\"center\" fontWeight={500} fontSize={14} color={theme.primary1}>\n                    {t('Send With Swap')}\n                    </Text>\n                  </ButtonSecondary>\n                ) : balance ? (\n                  balance.toSignificant(6)\n                ) : (\n                  '-'\n                )}\n              </Text>\n            ) : account ? (\n              <Loader />\n            ) : (\n              '-'\n            )}\n          </AutoColumn>\n        </MenuItem>\n      )\n    })\n  }, [\n    account,\n    addToken,\n    allTokenBalances,\n    allTokens,\n    chainId,\n    onTokenSelect,\n    otherSelectedText,\n    otherToken,\n    removeToken,\n    selectedToken,\n    showSendWithSwap,\n    theme.primary1,\n    tokens\n  ])\n\n  if (tokens.length === 0) {\n    return <ModalInfo>{t('noToken')}</ModalInfo>\n  }\n\n  return (\n    <FixedSizeList\n      width=\"100%\"\n      height={500}\n      itemCount={tokens.length}\n      itemSize={56}\n      style={{ flex: '1' }}\n      itemKey={index => tokens[index].address}\n    >\n      {TokenRow}\n    </FixedSizeList>\n  )\n}\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/useLast.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/SearchModal/styleds.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/SearchModal/filtering.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/swap/FormattedPriceImpact.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/swap/AdvancedSwapDetails.tsx",["1356","1357","1358","1359","1360","1361"],"import { Trade, TradeType } from 'dexbr-sdk'\nimport React, { useContext } from 'react'\nimport { ThemeContext } from 'styled-components'\nimport { Field } from '../../state/swap/actions'\nimport { useUserSlippageTolerance } from '../../state/user/hooks'\nimport { TYPE } from '../../theme'\nimport { computeSlippageAdjustedAmounts, computeTradePriceBreakdown } from '../../utils/prices'\nimport { AutoColumn } from '../Column'\nimport QuestionHelper from '../QuestionHelper'\nimport { RowBetween, RowFixed } from '../Row'\nimport FormattedPriceImpact from './FormattedPriceImpact'\nimport { SectionBreak } from './styleds'\nimport SwapRoute from './SwapRoute'\nimport { useTranslation } from 'react-i18next'\n\nfunction TradeSummary({ trade, allowedSlippage }: { trade: Trade; allowedSlippage: number }) {\n  const theme = useContext(ThemeContext)\n  const { priceImpactWithoutFee, realizedLPFee } = computeTradePriceBreakdown(trade)\n  const isExactIn = trade.tradeType === TradeType.EXACT_INPUT\n  const slippageAdjustedAmounts = computeSlippageAdjustedAmounts(trade, allowedSlippage)\n\n  const { t } = useTranslation()\n\n  return (\n    <>\n    \n      <AutoColumn style={{ padding: '0 20px' }}>\n        <RowBetween>\n          <RowFixed>\n            <TYPE.black fontSize={14} fontWeight={400} color={theme.white}>\n              {isExactIn ? t('Minimum received') : t('Maximum sold')}\n            </TYPE.black>\n            <QuestionHelper text={t('Your transaction will revert if there is a large, unfavorable price movement before it is confirmed.')} />\n          </RowFixed>\n          <RowFixed>\n            <TYPE.black color={theme.white} fontSize={14}>\n              {isExactIn\n                ? `${slippageAdjustedAmounts[Field.OUTPUT]?.toSignificant(4)} ${trade.outputAmount.token.symbol}` ?? '-'\n                : `${slippageAdjustedAmounts[Field.INPUT]?.toSignificant(4)} ${trade.inputAmount.token.symbol}` ?? '-'}\n            </TYPE.black>\n          </RowFixed>\n        </RowBetween>\n        <RowBetween>\n          <RowFixed>\n            <TYPE.black fontSize={14} fontWeight={400} color={theme.white}>\n            {t('Price Impact')}\n            </TYPE.black>\n            <QuestionHelper text={t('The difference between the market price and estimated price due to trade size.')} />\n          </RowFixed>\n          <FormattedPriceImpact priceImpact={priceImpactWithoutFee} />\n        </RowBetween>\n\n        <RowBetween>\n          <RowFixed>\n            <TYPE.black fontSize={14} fontWeight={400} color={theme.white}>\n            {t('Liquidity Provider Fee')}\n            </TYPE.black>\n            <QuestionHelper text={t('\"A portion of each trade (0.30%) goes to liquidity providers as a protocol incentive.')} />\n          </RowFixed>\n          <TYPE.black fontSize={14} color={theme.white}>\n            {realizedLPFee ? `${realizedLPFee.toSignificant(4)} ${trade.inputAmount.token.symbol}` : '-'}\n          </TYPE.black>\n        </RowBetween>\n      </AutoColumn>\n    </>\n  )\n}\n\nexport interface AdvancedSwapDetailsProps {\n  trade?: Trade\n}\n\nexport function AdvancedSwapDetails({ trade }: AdvancedSwapDetailsProps) {\n  const theme = useContext(ThemeContext)\n\n  const [allowedSlippage] = useUserSlippageTolerance()\n\n  const showRoute = trade?.route?.path?.length > 2\n  const { t } = useTranslation()\n\n  return (\n    <AutoColumn gap=\"md\">\n      {trade && <TradeSummary trade={trade} allowedSlippage={allowedSlippage} />}\n      {showRoute && (\n        <>\n          <SectionBreak />\n          <AutoColumn style={{ padding: '0 24px' }}>\n            <RowFixed>\n              <TYPE.black fontSize={14} fontWeight={400} color={theme.white}>\n                {t('Route')}\n              </TYPE.black>\n              <QuestionHelper text={t('Routing through these tokens resulted in the best price for your trade')} />\n            </RowFixed>\n            <SwapRoute trade={trade} />\n          </AutoColumn>\n        </>\n      )}\n    </AutoColumn>\n  )\n}\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/CurrencyInputPanel/index.tsx",["1362","1363"],"import { Pair, Token } from 'dexbr-sdk'\nimport React, { useState, useContext, useCallback } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\nimport { darken } from 'polished'\nimport { Field } from '../../state/swap/actions'\nimport { useTokenBalanceTreatingWETHasETH } from '../../state/wallet/hooks'\nimport TokenSearchModal from '../SearchModal/TokenSearchModal'\nimport TokenLogo from '../TokenLogo'\nimport DoubleLogo from '../DoubleLogo'\nimport { RowBetween } from '../Row'\nimport { TYPE, CursorPointer } from '../../theme'\nimport { Input as NumericalInput } from '../NumericalInput'\nimport { ReactComponent as DropDown } from '../../assets/images/dropdown.svg'\n\nimport { useActiveWeb3React } from '../../hooks'\nimport { useTranslation } from 'react-i18next'\n\nconst InputRow = styled.div<{ selected: boolean }>`\n  ${({ theme }) => theme.flexRowNoWrap}\n  align-items: center;\n  padding: ${({ selected }) => (selected ? '0.75rem 0.5rem 0.75rem 1rem' : '0.75rem 0.75rem 0.75rem 1rem')};\n`\n\nconst CurrencySelect = styled.button<{ selected: boolean }>`\n  align-items: center;\n  height: 2.2rem;\n  font-size: 20px;\n  font-weight: 500;\n  background-color: ${({ selected, theme }) => (selected ? theme.bg1 : theme.primary1)};\n  color: ${({ selected, theme }) => (selected ? theme.text1 : theme.text1)};\n  box-shadow: ${({ selected }) => (selected ? 'none' : '0px 6px 10px rgba(0, 0, 0, 0.075)')};\n  outline: none;\n  cursor: pointer;\n  user-select: none;\n  border: none;\n  padding: 0 0.5rem;\n\n  :focus,\n  :hover {\n    background-color: ${({ selected, theme }) => (selected ? theme.bg2 : darken(0.05, theme.primary1))};\n  }\n`\n\nconst LabelRow = styled.div`\n  ${({ theme }) => theme.flexRowNoWrap}\n  align-items: center;\n  color: ${({ theme }) => theme.text1};\n  font-size: 0.75rem;\n  line-height: 1rem;\n  padding: 0.75rem 1rem 0 1rem;\n  span:hover {\n    cursor: pointer;\n    color: ${({ theme }) => darken(0.2, theme.text2)};\n  }\n`\n\nconst Aligner = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`\n\nconst StyledDropDown = styled(DropDown)<{ selected: boolean }>`\n  margin: 0 0.25rem 0 0.5rem;\n  height: 35%;\n\n  path {\n    stroke: ${({ selected, theme }) => (selected ? theme.text1 : theme.text1)};\n    stroke-width: 1.5px;\n  }\n`\n\nconst InputPanel = styled.div<{ hideInput?: boolean }>`\n  ${({ theme }) => theme.flexColumnNoWrap}\n  position: relative;\n  background-color: ${({ theme }) => theme.bg2};\n  z-index: 1;\n`\n\nconst Container = styled.div<{ hideInput: boolean }>`\n  border: 1px solid ${({ theme }) => theme.bg2};\n  background-color: ${({ theme }) => theme.bg1};\n`\n\nconst StyledTokenName = styled.span<{ active?: boolean }>`\n  ${({ active }) => (active ? '  margin: 0 0.25rem 0 0.75rem;' : '  margin: 0 0.25rem 0 0.25rem;')}\n  font-size:  ${({ active }) => (active ? '20px' : '16px')};\n\n`\n\nconst StyledBalanceMax = styled.button`\n  height: 28px;\n  background-color: ${({ theme }) => theme.primary5};\n  border: 1px solid ${({ theme }) => theme.primary5};\n  font-size: 0.875rem;\n\n  font-weight: 500;\n  cursor: pointer;\n  margin-right: 0.5rem;\n  color: ${({ theme }) => theme.primaryText1};\n  :hover {\n    border: 1px solid ${({ theme }) => theme.primary1};\n  }\n  :focus {\n    border: 1px solid ${({ theme }) => theme.primary1};\n    outline: none;\n  }\n\n  ${({ theme }) => theme.mediaWidth.upToExtraSmall`\n    margin-right: 0.5rem;\n  `};\n`\n\ninterface CurrencyInputPanelProps {\n  value: string\n  field: string\n  onUserInput: (field: string, val: string) => void\n  onMax?: () => void\n  showMaxButton: boolean\n  label?: string\n  onTokenSelection?: (tokenAddress: string) => void\n  token?: Token | null\n  disableTokenSelect?: boolean\n  hideBalance?: boolean\n  isExchange?: boolean\n  pair?: Pair | null\n  hideInput?: boolean\n  showSendWithSwap?: boolean\n  otherSelectedTokenAddress?: string | null\n  id: string\n  showCommonBases?: boolean\n}\n\nexport default function CurrencyInputPanel({\n  value,\n  field,\n  onUserInput,\n  onMax,\n  showMaxButton,\n  label = 'Input',\n  onTokenSelection = null,\n  token = null,\n  disableTokenSelect = false,\n  hideBalance = false,\n  isExchange = false,\n  pair = null, // used for double token logo\n  hideInput = false,\n  showSendWithSwap = false,\n  otherSelectedTokenAddress = null,\n  id,\n  showCommonBases\n}: CurrencyInputPanelProps) {\n  const { t } = useTranslation()\n\n  const [modalOpen, setModalOpen] = useState(false)\n  const { account } = useActiveWeb3React()\n  const userTokenBalance = useTokenBalanceTreatingWETHasETH(account, token)\n  const theme = useContext(ThemeContext)\n\n  const handleDismissSearch = useCallback(() => {\n    setModalOpen(false)\n  }, [setModalOpen])\n\n  return (\n    <InputPanel id={id}>\n      <Container hideInput={hideInput}>\n        {!hideInput && (\n          <LabelRow>\n            <RowBetween>\n              <TYPE.body color={theme.text2} fontWeight={500} fontSize={14}>\n                {label}\n              </TYPE.body>\n              {account && (\n                <CursorPointer>\n                  <TYPE.body\n                    onClick={onMax}\n                    color={theme.text2}\n                    fontWeight={500}\n                    fontSize={14}\n                    style={{ display: 'inline' }}\n                  >\n                    {!hideBalance && !!token && userTokenBalance\n                      ? t('Balance: ') + userTokenBalance?.toSignificant(6)\n                      : ' -'}\n                  </TYPE.body>\n                </CursorPointer>\n              )}\n            </RowBetween>\n          </LabelRow>\n        )}\n        <InputRow style={hideInput ? { padding: '0', borderRadius: '8px' } : {}} selected={disableTokenSelect}>\n          {!hideInput && (\n            <>\n              <NumericalInput\n                className=\"token-amount-input\"\n                value={value}\n                onUserInput={val => {\n                  onUserInput(field, val)\n                }}\n              />\n              {account && !!token?.address && showMaxButton && label !== 'To' && (\n                <StyledBalanceMax onClick={onMax}>MAX</StyledBalanceMax>\n              )}\n            </>\n          )}\n          <CurrencySelect\n            selected={!!token}\n            className=\"open-currency-select-button\"\n            onClick={() => {\n              if (!disableTokenSelect) {\n                setModalOpen(true)\n              }\n            }}\n          >\n            <Aligner>\n              {isExchange ? (\n                <DoubleLogo a0={pair?.token0.address} a1={pair?.token1.address} size={24} margin={true} />\n              ) : token?.address ? (\n                <TokenLogo address={token?.address} size={'24px'} />\n              ) : null}\n              {isExchange ? (\n                <StyledTokenName className=\"pair-name-container\">\n                  {pair?.token0.symbol}:{pair?.token1.symbol}\n                </StyledTokenName>\n              ) : (\n                <StyledTokenName className=\"token-symbol-container\" active={Boolean(token && token.symbol)}>\n                  {(token && token.symbol && token.symbol.length > 20\n                    ? token.symbol.slice(0, 4) +\n                      '...' +\n                      token.symbol.slice(token.symbol.length - 5, token.symbol.length)\n                    : token?.symbol) || t('selectToken')}\n                </StyledTokenName>\n              )}\n              {!disableTokenSelect && <StyledDropDown selected={!!token?.address} />}\n            </Aligner>\n          </CurrencySelect>\n        </InputRow>\n      </Container>\n      {!disableTokenSelect && (\n        <TokenSearchModal\n          isOpen={modalOpen}\n          onDismiss={handleDismissSearch}\n          onTokenSelect={onTokenSelection}\n          showSendWithSwap={showSendWithSwap}\n          hiddenToken={token?.address}\n          otherSelectedTokenAddress={otherSelectedTokenAddress}\n          otherSelectedText={field === Field.INPUT ? t('Selected as output') : t('Selected as input')}\n          showCommonBases={showCommonBases}\n        />\n      )}\n    </InputPanel>\n  )\n}\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/ConfirmationModal/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/AddressInputPanel/index.tsx",["1364","1365"],"import React, { useContext, useCallback } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\nimport useENS from '../../hooks/useENS'\nimport { useActiveWeb3React } from '../../hooks'\nimport { ExternalLink, TYPE } from '../../theme'\nimport { AutoColumn } from '../Column'\nimport { RowBetween } from '../Row'\nimport { getEtherscanLink } from '../../utils'\nimport { useTranslation } from 'react-i18next'\n\n\nconst InputPanel = styled.div`\n  ${({ theme }) => theme.flexColumnNoWrap}\n  position: relative;\n  background-color: ${({ theme }) => theme.bg1};\n  z-index: 1;\n  width: 100%;\n`\n\nconst ContainerRow = styled.div<{ error: boolean }>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: 1px solid ${({ error, theme }) => (error ? theme.red1 : theme.bg2)};\n  transition: border-color 300ms ${({ error }) => (error ? 'step-end' : 'step-start')},\n    color 500ms ${({ error }) => (error ? 'step-end' : 'step-start')};\n  background-color: ${({ theme }) => theme.bg1};\n`\n\nconst InputContainer = styled.div`\n  flex: 1;\n  padding: 1rem;\n`\n\nconst Input = styled.input<{ error?: boolean }>`\n  font-size: 1.25rem;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  width: 0;\n  background-color: ${({ theme }) => theme.bg1};\n  transition: color 300ms ${({ error }) => (error ? 'step-end' : 'step-start')};\n  color: ${({ error, theme }) => (error ? theme.red1 : theme.primary1)};\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-weight: 500;\n  width: 100%;\n  ::placeholder {\n    color: ${({ theme }) => theme.text4};\n  }\n  padding: 0px;\n  -webkit-appearance: textfield;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  ::placeholder {\n    color: ${({ theme }) => theme.text4};\n  }\n`\n\ninterface Value {\n  address: string\n  name?: string\n}\n\nexport default function AddressInputPanel({\n  id,\n  value,\n  onChange\n}: {\n  id?: string\n  // the typed string value\n  value: string\n  // triggers whenever the typed value changes\n  onChange: (value: string) => void\n}) {\n  const { chainId } = useActiveWeb3React()\n  const theme = useContext(ThemeContext)\n  const { t } = useTranslation()\n\n\n  const { address, loading, name } = useENS(value)\n\n  const handleInput = useCallback(\n    event => {\n      const input = event.target.value\n      const withoutSpaces = input.replace(/\\s+/g, '')\n      onChange(withoutSpaces)\n    },\n    [onChange]\n  )\n\n  const error = Boolean(value.length > 0 && !loading && !address)\n\n  return (\n    <InputPanel id={id}>\n      <ContainerRow error={error}>\n        <InputContainer>\n          <AutoColumn gap=\"md\">\n            <RowBetween>\n              <TYPE.black color={theme.text2} fontWeight={500} fontSize={14}>\n                {t('Recipient')}\n              </TYPE.black>\n              {address && (\n                <ExternalLink href={getEtherscanLink(chainId, name ?? address, 'address')} style={{ fontSize: '14px' }}>\n                  ({t('View on Etherscan')})\n                </ExternalLink>\n              )}\n            </RowBetween>\n            <Input\n              className=\"recipient-address-input\"\n              type=\"text\"\n              autoComplete=\"off\"\n              autoCorrect=\"off\"\n              autoCapitalize=\"off\"\n              spellCheck=\"false\"\n              placeholder={t('Wallet Address or ENS name')}\n              error={error}\n              pattern=\"^(0x[a-fA-F0-9]{40})$\"\n              onChange={handleInput}\n              value={value}\n            />\n          </AutoColumn>\n        </InputContainer>\n      </ContainerRow>\n    </InputPanel>\n  )\n}\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Slider/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/SearchModal/CommonBases.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/useSocksBalance.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/useENSName.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Modal/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/SlippageTabs/index.tsx",["1366","1367","1368"],"import React, { useState, useRef, useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\nimport QuestionHelper from '../QuestionHelper'\nimport { TYPE } from '../../theme'\nimport { AutoColumn } from '../Column'\nimport { RowBetween, RowFixed } from '../Row'\n\nimport { darken } from 'polished'\nimport { useTranslation } from 'react-i18next'\n\n\nenum SlippageError {\n  InvalidInput = 'InvalidInput',\n  RiskyLow = 'RiskyLow',\n  RiskyHigh = 'RiskyHigh'\n}\n\nenum DeadlineError {\n  InvalidInput = 'InvalidInput'\n}\n\nconst FancyButton = styled.button`\n  color: ${({ theme }) => theme.text1};\n  align-items: center;\n  height: 2rem;\n  font-size: 12px;\n  width: auto;\n  min-width: 3rem;\n  border: 1px solid ${({ theme }) => theme.bg3};\n  outline: none;\n  background: ${({ theme }) => theme.bg1};\n  :hover {\n    border: 1px solid ${({ theme }) => theme.bg4};\n  }\n  :focus {\n    border: 1px solid ${({ theme }) => theme.primary1};\n  }\n`\n\nconst Option = styled(FancyButton)<{ active: boolean }>`\n  margin-right: 8px;\n  :hover {\n    cursor: pointer;\n  }\n  background-color: ${({ active, theme }) => active && theme.primary1};\n  color: ${({ active, theme }) => (active ? theme.text1 : theme.text1)};\n`\n\nconst Input = styled.input`\n  background: ${({ theme }) => theme.bg1};\n  font-size: 16px;\n  width: auto;\n  outline: none;\n  &::-webkit-outer-spin-button,\n  &::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n  color: ${({ theme, color }) => (color === 'red' ? theme.red1 : theme.text1)};\n  text-align: right;\n`\n\nconst OptionCustom = styled(FancyButton)<{ active?: boolean; warning?: boolean }>`\n  height: 2rem;\n  position: relative;\n  padding: 0 0.75rem;\n  flex: 1;\n  border: ${({ theme, active, warning }) => active && `1px solid ${warning ? theme.red1 : theme.primary1}`};\n  :hover {\n    border: ${({ theme, active, warning }) =>\n      active && `1px solid ${warning ? darken(0.1, theme.red1) : darken(0.1, theme.primary1)}`};\n  }\n\n  input {\n    width: 100%;\n    height: 100%;\n    border: 0px;\n  }\n`\n\nconst SlippageEmojiContainer = styled.span`\n  color: #f3841e;\n  ${({ theme }) => theme.mediaWidth.upToSmall`\n    display: none;  \n  `}\n`\n\nexport interface SlippageTabsProps {\n  rawSlippage: number\n  setRawSlippage: (rawSlippage: number) => void\n  deadline: number\n  setDeadline: (deadline: number) => void\n}\n\nexport default function SlippageTabs({ rawSlippage, setRawSlippage, deadline, setDeadline }: SlippageTabsProps) {\n  const theme = useContext(ThemeContext)\n\n  const inputRef = useRef<HTMLInputElement>()\n\n  const [slippageInput, setSlippageInput] = useState('')\n  const [deadlineInput, setDeadlineInput] = useState('')\n  const { t } = useTranslation()\n\n\n  const slippageInputIsValid =\n    slippageInput === '' || (rawSlippage / 100).toFixed(2) === Number.parseFloat(slippageInput).toFixed(2)\n  const deadlineInputIsValid = deadlineInput === '' || (deadline / 60).toString() === deadlineInput\n\n  let slippageError: SlippageError\n  if (slippageInput !== '' && !slippageInputIsValid) {\n    slippageError = SlippageError.InvalidInput\n  } else if (slippageInputIsValid && rawSlippage < 50) {\n    slippageError = SlippageError.RiskyLow\n  } else if (slippageInputIsValid && rawSlippage > 500) {\n    slippageError = SlippageError.RiskyHigh\n  }\n\n  let deadlineError: DeadlineError\n  if (deadlineInput !== '' && !deadlineInputIsValid) {\n    deadlineError = DeadlineError.InvalidInput\n  }\n\n  function parseCustomSlippage(event) {\n    setSlippageInput(event.target.value)\n\n    let valueAsIntFromRoundedFloat: number\n    try {\n      valueAsIntFromRoundedFloat = Number.parseInt((Number.parseFloat(event.target.value) * 100).toString())\n    } catch {}\n\n    if (\n      typeof valueAsIntFromRoundedFloat === 'number' &&\n      !Number.isNaN(valueAsIntFromRoundedFloat) &&\n      valueAsIntFromRoundedFloat < 5000\n    ) {\n      setRawSlippage(valueAsIntFromRoundedFloat)\n    }\n  }\n\n  function parseCustomDeadline(event) {\n    setDeadlineInput(event.target.value)\n\n    let valueAsInt: number\n    try {\n      valueAsInt = Number.parseInt(event.target.value) * 60\n    } catch {}\n\n    if (typeof valueAsInt === 'number' && !Number.isNaN(valueAsInt) && valueAsInt > 0) {\n      setDeadline(valueAsInt)\n    }\n  }\n\n  return (\n    <AutoColumn gap=\"md\">\n      <AutoColumn gap=\"sm\">\n        <RowFixed>\n          <TYPE.black fontWeight={400} fontSize={14} color={theme.text2}>\n            {t('Slippage tolerance')}\n          </TYPE.black>\n          <QuestionHelper text={t('Your transaction will revert if the price changes unfavorably by more than this percentage.')} />\n        </RowFixed>\n        <RowBetween>\n          <Option\n            onClick={() => {\n              setSlippageInput('')\n              setRawSlippage(10)\n            }}\n            active={rawSlippage === 10}\n          >\n            0.1%\n          </Option>\n          <Option\n            onClick={() => {\n              setSlippageInput('')\n              setRawSlippage(50)\n            }}\n            active={rawSlippage === 50}\n          >\n            0.5%\n          </Option>\n          <Option\n            onClick={() => {\n              setSlippageInput('')\n              setRawSlippage(100)\n            }}\n            active={rawSlippage === 100}\n          >\n            1%\n          </Option>\n          <OptionCustom active={![10, 50, 100].includes(rawSlippage)} warning={!slippageInputIsValid} tabIndex={-1}>\n            <RowBetween>\n              {!!slippageInput &&\n              (slippageError === SlippageError.RiskyLow || slippageError === SlippageError.RiskyHigh) ? (\n                <SlippageEmojiContainer>\n                  <span role=\"img\" aria-label=\"warning\">\n                    ⚠️\n                  </span>\n                </SlippageEmojiContainer>\n              ) : null}\n              <Input\n                ref={inputRef}\n                placeholder={(rawSlippage / 100).toFixed(2)}\n                value={slippageInput}\n                onBlur={() => {\n                  parseCustomSlippage({ target: { value: (rawSlippage / 100).toFixed(2) } })\n                }}\n                onChange={parseCustomSlippage}\n                color={!slippageInputIsValid ? 'red' : ''}\n              />\n              %\n            </RowBetween>\n          </OptionCustom>\n        </RowBetween>\n        {!!slippageError && (\n          <RowBetween\n            style={{\n              fontSize: '14px',\n              paddingTop: '7px',\n              color: slippageError === SlippageError.InvalidInput ? 'red' : '#F3841E'\n            }}\n          >\n            {slippageError === SlippageError.InvalidInput\n              ? t('Enter a valid slippage percentage')\n              : slippageError === SlippageError.RiskyLow\n              ? t('Your transaction may fail')\n              : t('Your transaction may be frontrun')}\n          </RowBetween>\n        )}\n      </AutoColumn>\n\n      <AutoColumn gap=\"sm\">\n        <RowFixed>\n          <TYPE.black fontSize={14} fontWeight={400} color={theme.text2}>\n            {t('Transaction deadline')}\n          </TYPE.black>\n          <QuestionHelper text={t('Your transaction will revert if it is pending for more than this long.')} />\n        </RowFixed>\n        <RowFixed>\n          <OptionCustom style={{ width: '80px' }} tabIndex={-1}>\n            <Input\n              color={!!deadlineError ? 'red' : undefined}\n              onBlur={() => {\n                parseCustomDeadline({ target: { value: (deadline / 60).toString() } })\n              }}\n              placeholder={(deadline / 60).toString()}\n              value={deadlineInput}\n              onChange={parseCustomDeadline}\n            />\n          </OptionCustom>\n          <TYPE.body style={{ paddingLeft: '8px' }} fontSize={14}>\n          {t('minutes')}\n          </TYPE.body>\n        </RowFixed>\n      </AutoColumn>\n    </AutoColumn>\n  )\n}\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Toggle/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/QuestionHelper/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/AddLiquidity/currencyId.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Tooltip/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/swap/SwapRoute.tsx",["1369"],"import { Trade } from 'dexbr-sdk'\nimport React, { Fragment, memo, useContext } from 'react'\nimport { ChevronRight } from 'react-feather'\nimport { Flex } from 'rebass'\nimport { ThemeContext } from 'styled-components'\nimport { TYPE } from '../../theme'\nimport TokenLogo from '../TokenLogo'\n\nexport default memo(function SwapRoute({ trade }: { trade: Trade }) {\n  const theme = useContext(ThemeContext)\n  return (\n    <Flex\n      px=\"1rem\"\n      py=\"0.5rem\"\n      my=\"0.5rem\"\n      style={{ border: `1px solid ${theme.bg3}`, borderRadius: '1rem' }}\n      flexWrap=\"wrap\"\n      width=\"100%\"\n      justifyContent=\"space-evenly\"\n      alignItems=\"center\"\n    >\n      {trade.route.path.map((token, i, path) => {\n        const isLastItem: boolean = i === path.length - 1\n        return (\n          <Fragment key={i}>\n            <Flex my=\"0.5rem\" alignItems=\"center\" style={{ flexShrink: 0 }}>\n              <TokenLogo address={token.address} size=\"1.5rem\" />\n              <TYPE.black fontSize={14} color={theme.white} ml=\"0.5rem\">\n                {token.symbol}\n              </TYPE.black>\n            </Flex>\n            {isLastItem ? null : <ChevronRight color={theme.white} />}\n          </Fragment>\n        )\n      })}\n    </Flex>\n  )\n})\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Identicon/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/WalletModal/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/usePrevious.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/WalletModal/Option.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/WalletModal/PendingView.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/Popover/index.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/AccountDetails/index.tsx",["1370","1371"],"import React, { useCallback, useContext } from 'react'\nimport { useDispatch } from 'react-redux'\nimport styled, { ThemeContext } from 'styled-components'\nimport { useActiveWeb3React } from '../../hooks'\nimport { AppDispatch } from '../../state'\nimport { clearAllTransactions } from '../../state/transactions/actions'\nimport { shortenAddress } from '../../utils'\nimport { AutoRow } from '../Row'\nimport Copy from './Copy'\nimport Transaction from './Transaction'\n\nimport { SUPPORTED_WALLETS } from '../../constants'\nimport { ReactComponent as Close } from '../../assets/images/x.svg'\nimport { getEtherscanLink } from '../../utils'\nimport { injected, walletconnect, walletlink, fortmatic, portis } from '../../connectors'\nimport CoinbaseWalletIcon from '../../assets/images/coinbaseWalletIcon.svg'\nimport WalletConnectIcon from '../../assets/images/walletConnectIcon.svg'\nimport FortmaticIcon from '../../assets/images/fortmaticIcon.png'\nimport PortisIcon from '../../assets/images/portisIcon.png'\nimport Identicon from '../Identicon'\nimport { ButtonSecondary } from '../Button'\nimport { ExternalLink as LinkIcon } from 'react-feather'\nimport { ExternalLink, LinkStyledButton, TYPE } from '../../theme'\nimport { useTranslation } from 'react-i18next'\n\n\nconst HeaderRow = styled.div`\n  ${({ theme }) => theme.flexRowNoWrap};\n  padding: 1rem 1rem;\n  font-weight: 500;\n  color: ${props => (props.color === 'blue' ? ({ theme }) => theme.primary1 : 'inherit')};\n  ${({ theme }) => theme.mediaWidth.upToMedium`\n    padding: 1rem;\n  `};\n`\n\nconst UpperSection = styled.div`\n  position: relative;\n\n  h5 {\n    margin: 0;\n    margin-bottom: 0.5rem;\n    font-size: 1rem;\n    font-weight: 400;\n  }\n\n  h5:last-child {\n    margin-bottom: 0px;\n  }\n\n  h4 {\n    margin-top: 0;\n    font-weight: 500;\n  }\n`\n\nconst InfoCard = styled.div`\n  padding: 1rem;\n  border: 1px solid ${({ theme }) => theme.bg3};\n  position: relative;\n  display: grid;\n  grid-row-gap: 12px;\n  margin-bottom: 20px;\n`\n\nconst AccountGroupingRow = styled.div`\n  ${({ theme }) => theme.flexRowNoWrap};\n  justify-content: space-between;\n  align-items: center;\n  font-weight: 400;\n  color: ${({ theme }) => theme.text1};\n\n  div {\n    ${({ theme }) => theme.flexRowNoWrap}\n    align-items: center;\n  }\n`\n\nconst AccountSection = styled.div`\n  background-color: ${({ theme }) => theme.bg1};\n  padding: 0rem 1rem;\n  ${({ theme }) => theme.mediaWidth.upToMedium`padding: 0rem 1rem 1.5rem 1rem;`};\n`\n\nconst YourAccount = styled.div`\n  h5 {\n    margin: 0 0 1rem 0;\n    font-weight: 400;\n  }\n\n  h4 {\n    margin: 0;\n    font-weight: 500;\n  }\n`\n\nconst LowerSection = styled.div`\n  ${({ theme }) => theme.flexColumnNoWrap}\n  padding: 1.5rem;\n  flex-grow: 1;\n  overflow: auto;\n  background-color: ${({ theme }) => theme.bg2};\n  border-bottom-left-radius: 25px;\n  border-bottom-right-radius: 20px;\n\n  h5 {\n    margin: 0;\n    font-weight: 400;\n    color: ${({ theme }) => theme.text3};\n  }\n`\n\nconst AccountControl = styled.div`\n  display: flex;\n  justify-content: space-between;\n  min-width: 0;\n  width: 100%;\n\n  font-weight: 500;\n  font-size: 1.25rem;\n\n  a:hover {\n    text-decoration: underline;\n  }\n\n  p {\n    min-width: 0;\n    margin: 0;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n`\n\nconst AddressLink = styled(ExternalLink)<{ hasENS: boolean; isENS: boolean }>`\n  font-size: 0.825rem;\n  color: ${({ theme }) => theme.text3};\n  margin-left: 1rem;\n  font-size: 0.825rem;\n  display: flex;\n  :hover {\n    color: ${({ theme }) => theme.text2};\n  }\n`\n\nconst CloseIcon = styled.div`\n  position: absolute;\n  right: 1rem;\n  top: 14px;\n  &:hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`\n\nconst CloseColor = styled(Close)`\n  path {\n    stroke: ${({ theme }) => theme.text4};\n  }\n`\n\nconst WalletName = styled.div`\n  width: initial;\n  font-size: 0.825rem;\n  font-weight: 500;\n  color: ${({ theme }) => theme.text3};\n`\n\nconst IconWrapper = styled.div<{ size?: number }>`\n  ${({ theme }) => theme.flexColumnNoWrap};\n  align-items: center;\n  justify-content: center;\n  margin-right: 8px;\n  & > img,\n  span {\n    height: ${({ size }) => (size ? size + 'px' : '32px')};\n    width: ${({ size }) => (size ? size + 'px' : '32px')};\n  }\n  ${({ theme }) => theme.mediaWidth.upToMedium`\n    align-items: flex-end;\n  `};\n`\n\nconst TransactionListWrapper = styled.div`\n  ${({ theme }) => theme.flexColumnNoWrap};\n`\n\nconst WalletAction = styled(ButtonSecondary)`\n  width: fit-content;\n  font-weight: 400;\n  margin-left: 8px;\n  font-size: 0.825rem;\n  padding: 4px 6px;\n  :hover {\n    cursor: pointer;\n    text-decoration: underline;\n  }\n`\n\nconst MainWalletAction = styled(WalletAction)`\n  color: ${({ theme }) => theme.primary1};\n`\n\nfunction renderTransactions(transactions) {\n  return (\n    <TransactionListWrapper>\n      {transactions.map((hash, i) => {\n        return <Transaction key={i} hash={hash} />\n      })}\n    </TransactionListWrapper>\n  )\n}\n\ninterface AccountDetailsProps {\n  toggleWalletModal: () => void\n  pendingTransactions: any[]\n  confirmedTransactions: any[]\n  ENSName?: string\n  openOptions: () => void\n}\n\nexport default function AccountDetails({\n  toggleWalletModal,\n  pendingTransactions,\n  confirmedTransactions,\n  ENSName,\n  openOptions\n}: AccountDetailsProps) {\n  const { chainId, account, connector } = useActiveWeb3React()\n  const theme = useContext(ThemeContext)\n  const dispatch = useDispatch<AppDispatch>()\n  const { t } = useTranslation()\n\n\n  function formatConnectorName() {\n    const { ethereum } = window\n    const isMetaMask = !!(ethereum && ethereum.isMetaMask)\n    const name = Object.keys(SUPPORTED_WALLETS)\n      .filter(\n        k =>\n          SUPPORTED_WALLETS[k].connector === connector && (connector !== injected || isMetaMask === (k === 'METAMASK'))\n      )\n      .map(k => SUPPORTED_WALLETS[k].name)[0]\n    return <WalletName>{t('Connected with')} {name}</WalletName>\n  }\n\n  function getStatusIcon() {\n    if (connector === injected) {\n      return (\n        <IconWrapper size={16}>\n          <Identicon />\n        </IconWrapper>\n      )\n    } else if (connector === walletconnect) {\n      return (\n        <IconWrapper size={16}>\n          <img src={WalletConnectIcon} alt={''} />\n        </IconWrapper>\n      )\n    } else if (connector === walletlink) {\n      return (\n        <IconWrapper size={16}>\n          <img src={CoinbaseWalletIcon} alt={''} />\n        </IconWrapper>\n      )\n    } else if (connector === fortmatic) {\n      return (\n        <IconWrapper size={16}>\n          <img src={FortmaticIcon} alt={''} />\n        </IconWrapper>\n      )\n    } else if (connector === portis) {\n      return (\n        <>\n          <IconWrapper size={16}>\n            <img src={PortisIcon} alt={''} />\n            <MainWalletAction\n              onClick={() => {\n                portis.portis.showPortis()\n              }}\n            >\n              {t('Show Portis')}\n            </MainWalletAction>\n          </IconWrapper>\n        </>\n      )\n    }\n  }\n\n  const clearAllTransactionsCallback = useCallback(\n    (event: React.MouseEvent) => {\n      event.preventDefault()\n      dispatch(clearAllTransactions({ chainId }))\n    },\n    [dispatch, chainId]\n  )\n\n  return (\n    <>\n      <UpperSection>\n        <CloseIcon onClick={toggleWalletModal}>\n          <CloseColor />\n        </CloseIcon>\n        <HeaderRow>{t('Account')}</HeaderRow>\n        <AccountSection>\n          <YourAccount>\n            <InfoCard>\n              <AccountGroupingRow>\n                {formatConnectorName()}\n                <div>\n                  {connector !== injected && connector !== walletlink && (\n                    <WalletAction\n                      style={{ fontSize: '.825rem', fontWeight: 400, marginRight: '8px' }}\n                      onClick={() => {\n                        ;(connector as any).close()\n                      }}\n                    >\n                      {t('Disconnect')}\n                    </WalletAction>\n                  )}\n                  <WalletAction\n                    style={{ fontSize: '.825rem', fontWeight: 400 }}\n                    onClick={() => {\n                      openOptions()\n                    }}\n                  >\n                   {t('Change')}\n                  </WalletAction>\n                </div>\n              </AccountGroupingRow>\n              <AccountGroupingRow id=\"web3-account-identifier-row\">\n                <AccountControl>\n                  {ENSName ? (\n                    <>\n                      <div>\n                        {getStatusIcon()}\n                        <p> {ENSName}</p>\n                      </div>\n                    </>\n                  ) : (\n                    <>\n                      <div>\n                        {getStatusIcon()}\n                        <p> {shortenAddress(account)}</p>\n                      </div>\n                    </>\n                  )}\n                </AccountControl>\n              </AccountGroupingRow>\n              <AccountGroupingRow>\n                {ENSName ? (\n                  <>\n                    <AccountControl>\n                      <div>\n                        <Copy toCopy={account}>\n                          <span style={{ marginLeft: '4px' }}>{t('Copy Address')}</span>\n                        </Copy>\n                        <AddressLink\n                          hasENS={!!ENSName}\n                          isENS={true}\n                          href={getEtherscanLink(chainId, ENSName, 'address')}\n                        >\n                          <LinkIcon size={16} />\n                          <span style={{ marginLeft: '4px' }}>{t('View on Etherscan')}</span>\n                        </AddressLink>\n                      </div>\n                    </AccountControl>\n                  </>\n                ) : (\n                  <>\n                    <AccountControl>\n                      <div>\n                        <Copy toCopy={account}>\n                          <span style={{ marginLeft: '4px' }}>{t('Copy Address')}</span>\n                        </Copy>\n                        <AddressLink\n                          hasENS={!!ENSName}\n                          isENS={false}\n                          href={getEtherscanLink(chainId, account, 'address')}\n                        >\n                          <LinkIcon size={16} />\n                          <span style={{ marginLeft: '4px' }}>{t('View on Etherscan')}</span>\n                        </AddressLink>\n                      </div>\n                    </AccountControl>\n                  </>\n                )}\n                {/* {formatConnectorName()} */}\n              </AccountGroupingRow>\n            </InfoCard>\n          </YourAccount>\n        </AccountSection>\n      </UpperSection>\n      {!!pendingTransactions.length || !!confirmedTransactions.length ? (\n        <LowerSection>\n          <AutoRow mb={'1rem'} style={{ justifyContent: 'space-between' }}>\n            <TYPE.body>{t('Recent Transactions')}</TYPE.body>\n            <LinkStyledButton onClick={clearAllTransactionsCallback}>{t('(clear all)')}</LinkStyledButton>\n          </AutoRow>\n          {renderTransactions(pendingTransactions)}\n          {renderTransactions(confirmedTransactions)}\n        </LowerSection>\n      ) : (\n        <LowerSection>\n          <TYPE.body color={theme.text1}>{t('Your transactions will appear here...')}</TYPE.body>\n        </LowerSection>\n      )}\n    </>\n  )\n}\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/AccountDetails/Transaction.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/components/AccountDetails/Copy.tsx",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/hooks/useCopyClipboard.ts",[],"/home/qualinfo/Dev/prexis/dexbr-interface/src/state/mint/hooks.ts",["1372","1373"],"import { useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Token, TokenAmount, Route, JSBI, Price, Percent, Pair } from 'dexbr-sdk'\n\nimport { useActiveWeb3React } from '../../hooks'\nimport { AppDispatch, AppState } from '../index'\nimport { Field, typeInput } from './actions'\nimport { useTokenBalancesTreatWETHAsETH } from '../wallet/hooks'\nimport { usePair } from '../../data/Reserves'\nimport { useTotalSupply } from '../../data/TotalSupply'\nimport { tryParseAmount } from '../swap/hooks'\nimport { useTranslation } from 'react-i18next'\n\n\nconst ZERO = JSBI.BigInt(0)\n\nexport function useMintState(): AppState['mint'] {\n  return useSelector<AppState, AppState['mint']>(state => state.mint)\n}\n\nexport function useDerivedMintInfo(\n  tokenA: Token | undefined,\n  tokenB: Token | undefined\n): {\n  dependentField: Field\n  tokens: { [field in Field]?: Token }\n  pair?: Pair | null\n  tokenBalances: { [field in Field]?: TokenAmount }\n  parsedAmounts: { [field in Field]?: TokenAmount }\n  price?: Price\n  noLiquidity?: boolean\n  liquidityMinted?: TokenAmount\n  poolTokenPercentage?: Percent\n  error?: string\n} {\n  const { account } = useActiveWeb3React()\n  const { t } = useTranslation()\n\n\n  const { independentField, typedValue, otherTypedValue } = useMintState()\n\n  const dependentField = independentField === Field.TOKEN_A ? Field.TOKEN_B : Field.TOKEN_A\n\n  // tokens\n  const tokens: { [field in Field]?: Token } = useMemo(\n    () => ({\n      [Field.TOKEN_A]: tokenA,\n      [Field.TOKEN_B]: tokenB\n    }),\n    [tokenA, tokenB]\n  )\n\n  // pair\n  const pair = usePair(tokens[Field.TOKEN_A], tokens[Field.TOKEN_B])\n  const noLiquidity =\n    pair === null || (!!pair && JSBI.equal(pair.reserve0.raw, ZERO) && JSBI.equal(pair.reserve1.raw, ZERO))\n\n  // route\n  const route = useMemo(\n    () =>\n      !noLiquidity && pair && tokens[independentField] ? new Route([pair], tokens[Field.TOKEN_A] as Token) : undefined,\n    [noLiquidity, pair, tokens, independentField]\n  )\n\n  // balances\n  const relevantTokenBalances = useTokenBalancesTreatWETHAsETH(account ?? undefined, [\n    tokens[Field.TOKEN_A],\n    tokens[Field.TOKEN_B]\n  ])\n  const tokenBalances: { [field in Field]?: TokenAmount } = {\n    [Field.TOKEN_A]: relevantTokenBalances?.[tokens[Field.TOKEN_A]?.address ?? ''],\n    [Field.TOKEN_B]: relevantTokenBalances?.[tokens[Field.TOKEN_B]?.address ?? '']\n  }\n\n  // amounts\n  const independentAmount = tryParseAmount(typedValue, tokens[independentField])\n  const dependentAmount = useMemo(() => {\n    if (noLiquidity && otherTypedValue && tokens[dependentField]) {\n      return tryParseAmount(otherTypedValue, tokens[dependentField])\n    } else if (route && independentAmount) {\n      return dependentField === Field.TOKEN_B\n        ? route.midPrice.quote(independentAmount)\n        : route.midPrice.invert().quote(independentAmount)\n    } else {\n      return\n    }\n  }, [noLiquidity, otherTypedValue, tokens, dependentField, independentAmount, route])\n  const parsedAmounts = {\n    [Field.TOKEN_A]: independentField === Field.TOKEN_A ? independentAmount : dependentAmount,\n    [Field.TOKEN_B]: independentField === Field.TOKEN_A ? dependentAmount : independentAmount\n  }\n\n  const price = useMemo(() => {\n    if (\n      noLiquidity &&\n      tokens[Field.TOKEN_A] &&\n      tokens[Field.TOKEN_B] &&\n      parsedAmounts[Field.TOKEN_A] &&\n      parsedAmounts[Field.TOKEN_B]\n    ) {\n      return new Price(\n        tokens[Field.TOKEN_A] as Token,\n        tokens[Field.TOKEN_B] as Token,\n        (parsedAmounts[Field.TOKEN_A] as TokenAmount).raw,\n        (parsedAmounts[Field.TOKEN_B] as TokenAmount).raw\n      )\n    } else if (route) {\n      return route.midPrice\n    } else {\n      return\n    }\n  }, [noLiquidity, tokens, parsedAmounts, route])\n\n  // liquidity minted\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\n  const liquidityMinted = useMemo(() => {\n    if (pair && totalSupply && parsedAmounts[Field.TOKEN_A] && parsedAmounts[Field.TOKEN_B]) {\n      return pair.getLiquidityMinted(\n        totalSupply,\n        parsedAmounts[Field.TOKEN_A] as TokenAmount,\n        parsedAmounts[Field.TOKEN_B] as TokenAmount\n      )\n    } else {\n      return\n    }\n  }, [pair, totalSupply, parsedAmounts])\n\n  const poolTokenPercentage = useMemo(() => {\n    if (liquidityMinted && totalSupply) {\n      return new Percent(liquidityMinted.raw, totalSupply.add(liquidityMinted).raw)\n    } else {\n      return\n    }\n  }, [liquidityMinted, totalSupply])\n\n  let error: string | undefined\n  if (!account) {\n    error = t('Connect Wallet')\n  }\n\n  if (!parsedAmounts[Field.TOKEN_A] || !parsedAmounts[Field.TOKEN_B]) {\n    error = error ?? t('Enter an amount')\n  }\n\n  if (\n    parsedAmounts[Field.TOKEN_A] &&\n    tokenBalances?.[Field.TOKEN_A]?.lessThan(parsedAmounts[Field.TOKEN_A] as TokenAmount)\n  ) {\n    error = t('Insufficient ') + tokens[Field.TOKEN_A]?.symbol + t(' balance')\n  }\n\n  if (\n    parsedAmounts[Field.TOKEN_B] &&\n    tokenBalances?.[Field.TOKEN_B]?.lessThan(parsedAmounts[Field.TOKEN_B] as TokenAmount)\n  ) {\n    error = t('Insufficient ') + tokens[Field.TOKEN_B]?.symbol + t(' balance')\n  }\n\n  return {\n    dependentField,\n    tokens,\n    pair,\n    tokenBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error\n  }\n}\n\nexport function useMintActionHandlers(\n  noLiquidity: boolean | undefined\n): {\n  onUserInput: (field: Field, typedValue: string) => void\n} {\n  const dispatch = useDispatch<AppDispatch>()\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue, noLiquidity: noLiquidity === true }))\n    },\n    [dispatch, noLiquidity]\n  )\n\n  return {\n    onUserInput\n  }\n}\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/pages/AddLiquidity/ConfirmAddModalBottom.tsx",["1374","1375","1376","1377","1378","1379","1380","1381","1382"],"import { Fraction, Percent, Token, TokenAmount } from 'dexbr-sdk'\nimport React from 'react'\nimport { Text } from 'rebass'\nimport { ButtonPrimary } from '../../components/Button'\nimport { RowBetween, RowFixed } from '../../components/Row'\nimport TokenLogo from '../../components/TokenLogo'\nimport { Field } from '../../state/mint/actions'\nimport { TYPE } from '../../theme'\nimport { useTranslation } from 'react-i18next'\n\n\nexport function ConfirmAddModalBottom({\n  noLiquidity,\n  price,\n  tokens,\n  parsedAmounts,\n  poolTokenPercentage,\n  onAdd\n}: {\n  noLiquidity?: boolean\n  price?: Fraction\n  tokens: { [field in Field]?: Token }\n  parsedAmounts: { [field in Field]?: TokenAmount }\n  poolTokenPercentage?: Percent\n  onAdd: () => void\n}){  const { t } = useTranslation()\n\n  return (\n    <>\n      <RowBetween>\n        <TYPE.body>{tokens[Field.TOKEN_A]?.symbol} {t('Deposited')}</TYPE.body>\n        <RowFixed>\n          <TokenLogo address={tokens[Field.TOKEN_A]?.address} style={{ marginRight: '8px' }} />\n          <TYPE.body>{parsedAmounts[Field.TOKEN_A]?.toSignificant(6)}</TYPE.body>\n        </RowFixed>\n      </RowBetween>\n      <RowBetween>\n        <TYPE.body>{tokens[Field.TOKEN_B]?.symbol} {t('Deposited')}</TYPE.body>\n        <RowFixed>\n          <TokenLogo address={tokens[Field.TOKEN_B]?.address} style={{ marginRight: '8px' }} />\n          <TYPE.body>{parsedAmounts[Field.TOKEN_B]?.toSignificant(6)}</TYPE.body>\n        </RowFixed>\n      </RowBetween>\n      <RowBetween>\n        <TYPE.body>{t('Rates')}</TYPE.body>\n        <TYPE.body>\n          {`1 ${tokens[Field.TOKEN_A]?.symbol} = ${price?.toSignificant(4)} ${tokens[Field.TOKEN_B]?.symbol}`}\n        </TYPE.body>\n      </RowBetween>\n      <RowBetween style={{ justifyContent: 'flex-end' }}>\n        <TYPE.body>\n          {`1 ${tokens[Field.TOKEN_B]?.symbol} = ${price?.invert().toSignificant(4)} ${tokens[Field.TOKEN_A]?.symbol}`}\n        </TYPE.body>\n      </RowBetween>\n      <RowBetween>\n        <TYPE.body>{t('Share of Pool')}:</TYPE.body>\n        <TYPE.body>{noLiquidity ? '100' : poolTokenPercentage?.toSignificant(4)}%</TYPE.body>\n      </RowBetween>\n      <ButtonPrimary style={{ margin: '20px 0 0 0' }} onClick={onAdd}>\n        <Text fontWeight={500} fontSize={20}>\n          {noLiquidity ? t('Create Pool & Supply') : t('Confirm Supply')}\n        </Text>\n      </ButtonPrimary>\n    </>\n  )\n}\n","/home/qualinfo/Dev/prexis/dexbr-interface/src/components/PositionCard/V1.tsx",[],{"ruleId":"1383","severity":1,"message":"1384","line":16,"column":9,"nodeType":"1385","endLine":16,"endColumn":60},{"ruleId":"1386","severity":1,"message":"1387","line":1,"column":10,"nodeType":"1388","messageId":"1389","endLine":1,"endColumn":24},{"ruleId":"1390","severity":1,"message":"1391","line":103,"column":7,"nodeType":"1392","messageId":"1393","endLine":103,"endColumn":53},{"ruleId":"1390","severity":1,"message":"1394","line":125,"column":7,"nodeType":"1392","messageId":"1393","endLine":125,"endColumn":54},{"ruleId":"1390","severity":1,"message":"1395","line":169,"column":11,"nodeType":"1392","messageId":"1393","endLine":169,"endColumn":30},{"ruleId":"1390","severity":1,"message":"1396","line":176,"column":11,"nodeType":"1392","messageId":"1393","endLine":176,"endColumn":29},{"ruleId":"1390","severity":1,"message":"1395","line":70,"column":11,"nodeType":"1392","messageId":"1393","endLine":70,"endColumn":30},{"ruleId":"1390","severity":1,"message":"1391","line":205,"column":7,"nodeType":"1392","messageId":"1393","endLine":205,"endColumn":53},{"ruleId":"1390","severity":1,"message":"1397","line":208,"column":11,"nodeType":"1392","messageId":"1393","endLine":208,"endColumn":39},{"ruleId":"1390","severity":1,"message":"1391","line":215,"column":11,"nodeType":"1392","messageId":"1393","endLine":215,"endColumn":67},{"ruleId":"1390","severity":1,"message":"1391","line":220,"column":15,"nodeType":"1392","messageId":"1393","endLine":220,"endColumn":26},{"ruleId":"1390","severity":1,"message":"1398","line":221,"column":15,"nodeType":"1392","messageId":"1393","endLine":221,"endColumn":27},{"ruleId":"1390","severity":1,"message":"1398","line":227,"column":15,"nodeType":"1392","messageId":"1393","endLine":227,"endColumn":27},{"ruleId":"1390","severity":1,"message":"1391","line":233,"column":15,"nodeType":"1392","messageId":"1393","endLine":233,"endColumn":26},{"ruleId":"1390","severity":1,"message":"1398","line":234,"column":15,"nodeType":"1392","messageId":"1393","endLine":234,"endColumn":27},{"ruleId":"1390","severity":1,"message":"1398","line":240,"column":15,"nodeType":"1392","messageId":"1393","endLine":240,"endColumn":27},{"ruleId":"1390","severity":1,"message":"1391","line":246,"column":15,"nodeType":"1392","messageId":"1393","endLine":246,"endColumn":42},{"ruleId":"1390","severity":1,"message":"1398","line":247,"column":15,"nodeType":"1392","messageId":"1393","endLine":247,"endColumn":43},{"ruleId":"1390","severity":1,"message":"1391","line":255,"column":11,"nodeType":"1392","messageId":"1393","endLine":255,"endColumn":67},{"ruleId":"1390","severity":1,"message":"1391","line":261,"column":15,"nodeType":"1392","messageId":"1393","endLine":261,"endColumn":26},{"ruleId":"1390","severity":1,"message":"1398","line":262,"column":15,"nodeType":"1392","messageId":"1393","endLine":262,"endColumn":27},{"ruleId":"1390","severity":1,"message":"1398","line":268,"column":15,"nodeType":"1392","messageId":"1393","endLine":268,"endColumn":27},{"ruleId":"1390","severity":1,"message":"1394","line":317,"column":7,"nodeType":"1392","messageId":"1393","endLine":317,"endColumn":54},{"ruleId":"1390","severity":1,"message":"1395","line":360,"column":11,"nodeType":"1392","messageId":"1393","endLine":360,"endColumn":30},{"ruleId":"1390","severity":1,"message":"1396","line":367,"column":11,"nodeType":"1392","messageId":"1393","endLine":367,"endColumn":29},{"ruleId":"1390","severity":1,"message":"1391","line":370,"column":13,"nodeType":"1392","messageId":"1393","endLine":370,"endColumn":59},{"ruleId":"1399","severity":1,"message":"1400","line":9,"column":1,"nodeType":"1401","endLine":134,"endColumn":2},{"ruleId":"1390","severity":1,"message":"1395","line":78,"column":11,"nodeType":"1392","messageId":"1393","endLine":78,"endColumn":30},{"ruleId":"1390","severity":1,"message":"1391","line":84,"column":9,"nodeType":"1392","messageId":"1393","endLine":84,"endColumn":65},{"ruleId":"1390","severity":1,"message":"1391","line":90,"column":13,"nodeType":"1392","messageId":"1393","endLine":90,"endColumn":63},{"ruleId":"1390","severity":1,"message":"1391","line":96,"column":13,"nodeType":"1392","messageId":"1393","endLine":96,"endColumn":63},{"ruleId":"1390","severity":1,"message":"1402","line":247,"column":9,"nodeType":"1392","messageId":"1393","endLine":247,"endColumn":76},{"ruleId":"1390","severity":1,"message":"1403","line":331,"column":21,"nodeType":"1392","messageId":"1393","endLine":331,"endColumn":72},{"ruleId":"1390","severity":1,"message":"1403","line":334,"column":21,"nodeType":"1392","messageId":"1393","endLine":334,"endColumn":72},{"ruleId":"1390","severity":1,"message":"1403","line":337,"column":21,"nodeType":"1392","messageId":"1393","endLine":337,"endColumn":72},{"ruleId":"1390","severity":1,"message":"1404","line":379,"column":21,"nodeType":"1392","messageId":"1393","endLine":379,"endColumn":68},{"ruleId":"1390","severity":1,"message":"1405","line":353,"column":17,"nodeType":"1392","messageId":"1393","endLine":353,"endColumn":37},{"ruleId":"1386","severity":1,"message":"1406","line":15,"column":10,"nodeType":"1388","messageId":"1389","endLine":15,"endColumn":23},{"ruleId":"1386","severity":1,"message":"1407","line":15,"column":25,"nodeType":"1388","messageId":"1389","endLine":15,"endColumn":40},{"ruleId":"1390","severity":1,"message":"1391","line":78,"column":17,"nodeType":"1392","messageId":"1393","endLine":78,"endColumn":67},{"ruleId":"1390","severity":1,"message":"1391","line":84,"column":17,"nodeType":"1392","messageId":"1393","endLine":84,"endColumn":67},{"ruleId":"1390","severity":1,"message":"1391","line":92,"column":17,"nodeType":"1392","messageId":"1393","endLine":92,"endColumn":67},{"ruleId":"1390","severity":1,"message":"1402","line":331,"column":9,"nodeType":"1392","messageId":"1393","endLine":331,"endColumn":96},{"ruleId":"1386","severity":1,"message":"1408","line":9,"column":8,"nodeType":"1388","messageId":"1389","endLine":9,"endColumn":16},{"ruleId":"1386","severity":1,"message":"1409","line":10,"column":8,"nodeType":"1388","messageId":"1389","endLine":10,"endColumn":16},{"ruleId":"1386","severity":1,"message":"1410","line":11,"column":8,"nodeType":"1388","messageId":"1389","endLine":11,"endColumn":20},{"ruleId":"1386","severity":1,"message":"1411","line":22,"column":8,"nodeType":"1388","messageId":"1389","endLine":22,"endColumn":21},{"ruleId":"1386","severity":1,"message":"1412","line":67,"column":7,"nodeType":"1388","messageId":"1389","endLine":67,"endColumn":16},{"ruleId":"1386","severity":1,"message":"1413","line":167,"column":7,"nodeType":"1388","messageId":"1389","endLine":167,"endColumn":17},{"ruleId":"1386","severity":1,"message":"1414","line":190,"column":10,"nodeType":"1388","messageId":"1389","endLine":190,"endColumn":16},{"ruleId":"1390","severity":1,"message":"1391","line":8,"column":7,"nodeType":"1392","messageId":"1393","endLine":8,"endColumn":18},{"ruleId":"1390","severity":1,"message":"1398","line":31,"column":11,"nodeType":"1392","messageId":"1393","endLine":31,"endColumn":23},{"ruleId":"1390","severity":1,"message":"1398","line":37,"column":11,"nodeType":"1392","messageId":"1393","endLine":37,"endColumn":23},{"ruleId":"1390","severity":1,"message":"1398","line":43,"column":11,"nodeType":"1392","messageId":"1393","endLine":43,"endColumn":23},{"ruleId":"1415","severity":1,"message":"1416","line":25,"column":3,"nodeType":"1417","messageId":"1418","endLine":25,"endColumn":55,"fix":"1419"},{"ruleId":"1415","severity":1,"message":"1420","line":26,"column":3,"nodeType":"1417","messageId":"1418","endLine":26,"endColumn":55,"fix":"1421"},{"ruleId":"1386","severity":1,"message":"1422","line":36,"column":7,"nodeType":"1388","messageId":"1389","endLine":36,"endColumn":12},{"ruleId":"1383","severity":1,"message":"1423","line":13,"column":9,"nodeType":"1385","endLine":13,"endColumn":79},{"ruleId":"1386","severity":1,"message":"1424","line":2,"column":32,"nodeType":"1388","messageId":"1389","endLine":2,"endColumn":40},{"ruleId":"1390","severity":1,"message":"1398","line":225,"column":17,"nodeType":"1392","messageId":"1393","endLine":225,"endColumn":80},{"ruleId":"1390","severity":1,"message":"1398","line":248,"column":17,"nodeType":"1392","messageId":"1393","endLine":248,"endColumn":80},{"ruleId":"1390","severity":1,"message":"1391","line":68,"column":9,"nodeType":"1392","messageId":"1393","endLine":68,"endColumn":37},{"ruleId":"1386","severity":1,"message":"1425","line":14,"column":10,"nodeType":"1388","messageId":"1389","endLine":14,"endColumn":22},{"ruleId":"1386","severity":1,"message":"1426","line":18,"column":32,"nodeType":"1388","messageId":"1389","endLine":18,"endColumn":39},{"ruleId":"1390","severity":1,"message":"1391","line":170,"column":15,"nodeType":"1392","messageId":"1393","endLine":170,"endColumn":77},{"ruleId":"1390","severity":1,"message":"1391","line":175,"column":19,"nodeType":"1392","messageId":"1393","endLine":181,"endColumn":20},{"ruleId":"1399","severity":1,"message":"1400","line":3,"column":1,"nodeType":"1401","endLine":6,"endColumn":2},{"ruleId":"1390","severity":1,"message":"1404","line":105,"column":9,"nodeType":"1392","messageId":"1393","endLine":105,"endColumn":25},{"ruleId":"1390","severity":1,"message":"1402","line":120,"column":9,"nodeType":"1392","messageId":"1393","endLine":120,"endColumn":22},{"ruleId":"1390","severity":1,"message":"1405","line":72,"column":19,"nodeType":"1392","messageId":"1393","endLine":72,"endColumn":47},{"ruleId":"1390","severity":1,"message":"1405","line":85,"column":19,"nodeType":"1392","messageId":"1393","endLine":85,"endColumn":47},{"ruleId":"1383","severity":1,"message":"1427","line":124,"column":6,"nodeType":"1428","endLine":138,"endColumn":4,"suggestions":"1429"},{"ruleId":"1390","severity":1,"message":"1398","line":157,"column":11,"nodeType":"1392","messageId":"1393","endLine":157,"endColumn":74},{"ruleId":"1390","severity":1,"message":"1398","line":233,"column":11,"nodeType":"1392","messageId":"1393","endLine":233,"endColumn":74},{"ruleId":"1390","severity":1,"message":"1391","line":250,"column":11,"nodeType":"1392","messageId":"1393","endLine":250,"endColumn":67},{"ruleId":"1390","severity":1,"message":"1391","line":397,"column":13,"nodeType":"1392","messageId":"1393","endLine":397,"endColumn":24},{"ruleId":"1390","severity":1,"message":"1391","line":405,"column":11,"nodeType":"1392","messageId":"1393","endLine":405,"endColumn":42},{"ruleId":"1383","severity":1,"message":"1430","line":88,"column":9,"nodeType":"1385","endLine":91,"endColumn":4},{"ruleId":"1383","severity":1,"message":"1431","line":88,"column":9,"nodeType":"1385","endLine":91,"endColumn":4},{"ruleId":"1390","severity":1,"message":"1402","line":64,"column":11,"nodeType":"1392","messageId":"1393","endLine":64,"endColumn":67},{"ruleId":"1390","severity":1,"message":"1402","line":72,"column":11,"nodeType":"1392","messageId":"1393","endLine":72,"endColumn":67},{"ruleId":"1390","severity":1,"message":"1405","line":83,"column":11,"nodeType":"1392","messageId":"1393","endLine":83,"endColumn":22},{"ruleId":"1390","severity":1,"message":"1398","line":77,"column":13,"nodeType":"1392","messageId":"1393","endLine":77,"endColumn":76},{"ruleId":"1390","severity":1,"message":"1398","line":83,"column":13,"nodeType":"1392","messageId":"1393","endLine":83,"endColumn":39},{"ruleId":"1390","severity":1,"message":"1398","line":89,"column":15,"nodeType":"1392","messageId":"1393","endLine":89,"endColumn":60},{"ruleId":"1390","severity":1,"message":"1398","line":99,"column":13,"nodeType":"1392","messageId":"1393","endLine":99,"endColumn":76},{"ruleId":"1390","severity":1,"message":"1398","line":108,"column":13,"nodeType":"1392","messageId":"1393","endLine":108,"endColumn":76},{"ruleId":"1390","severity":1,"message":"1398","line":113,"column":11,"nodeType":"1392","messageId":"1393","endLine":113,"endColumn":37},{"ruleId":"1390","severity":1,"message":"1391","line":31,"column":9,"nodeType":"1392","messageId":"1393","endLine":31,"endColumn":20},{"ruleId":"1390","severity":1,"message":"1391","line":34,"column":11,"nodeType":"1392","messageId":"1393","endLine":34,"endColumn":22},{"ruleId":"1390","severity":1,"message":"1391","line":38,"column":9,"nodeType":"1392","messageId":"1393","endLine":38,"endColumn":20},{"ruleId":"1390","severity":1,"message":"1391","line":41,"column":11,"nodeType":"1392","messageId":"1393","endLine":41,"endColumn":22},{"ruleId":"1390","severity":1,"message":"1391","line":45,"column":9,"nodeType":"1392","messageId":"1393","endLine":45,"endColumn":20},{"ruleId":"1390","severity":1,"message":"1391","line":46,"column":9,"nodeType":"1392","messageId":"1393","endLine":46,"endColumn":20},{"ruleId":"1390","severity":1,"message":"1391","line":51,"column":9,"nodeType":"1392","messageId":"1393","endLine":51,"endColumn":20},{"ruleId":"1390","severity":1,"message":"1391","line":56,"column":9,"nodeType":"1392","messageId":"1393","endLine":56,"endColumn":20},{"ruleId":"1390","severity":1,"message":"1391","line":57,"column":9,"nodeType":"1392","messageId":"1393","endLine":57,"endColumn":20},{"ruleId":"1386","severity":1,"message":"1432","line":68,"column":11,"nodeType":"1388","messageId":"1389","endLine":68,"endColumn":16},{"ruleId":"1390","severity":1,"message":"1398","line":108,"column":15,"nodeType":"1392","messageId":"1393","endLine":108,"endColumn":78},{"ruleId":"1390","severity":1,"message":"1398","line":30,"column":13,"nodeType":"1392","messageId":"1393","endLine":30,"endColumn":76},{"ruleId":"1390","severity":1,"message":"1398","line":36,"column":13,"nodeType":"1392","messageId":"1393","endLine":36,"endColumn":59},{"ruleId":"1390","severity":1,"message":"1398","line":45,"column":13,"nodeType":"1392","messageId":"1393","endLine":45,"endColumn":76},{"ruleId":"1390","severity":1,"message":"1398","line":55,"column":13,"nodeType":"1392","messageId":"1393","endLine":55,"endColumn":76},{"ruleId":"1390","severity":1,"message":"1398","line":60,"column":11,"nodeType":"1392","messageId":"1393","endLine":60,"endColumn":57},{"ruleId":"1390","severity":1,"message":"1398","line":89,"column":15,"nodeType":"1392","messageId":"1393","endLine":89,"endColumn":78},{"ruleId":"1390","severity":1,"message":"1398","line":28,"column":15,"nodeType":"1392","messageId":"1393","endLine":28,"endColumn":73},{"ruleId":"1383","severity":1,"message":"1384","line":16,"column":9,"nodeType":"1385","endLine":16,"endColumn":60},{"ruleId":"1386","severity":1,"message":"1387","line":1,"column":10,"nodeType":"1388","messageId":"1389","endLine":1,"endColumn":24},{"ruleId":"1390","severity":1,"message":"1391","line":103,"column":7,"nodeType":"1392","messageId":"1393","endLine":103,"endColumn":53},{"ruleId":"1390","severity":1,"message":"1394","line":125,"column":7,"nodeType":"1392","messageId":"1393","endLine":125,"endColumn":54},{"ruleId":"1390","severity":1,"message":"1395","line":169,"column":11,"nodeType":"1392","messageId":"1393","endLine":169,"endColumn":30},{"ruleId":"1390","severity":1,"message":"1396","line":176,"column":11,"nodeType":"1392","messageId":"1393","endLine":176,"endColumn":29},{"ruleId":"1390","severity":1,"message":"1395","line":70,"column":11,"nodeType":"1392","messageId":"1393","endLine":70,"endColumn":30},{"ruleId":"1390","severity":1,"message":"1391","line":205,"column":7,"nodeType":"1392","messageId":"1393","endLine":205,"endColumn":53},{"ruleId":"1390","severity":1,"message":"1397","line":208,"column":11,"nodeType":"1392","messageId":"1393","endLine":208,"endColumn":39},{"ruleId":"1390","severity":1,"message":"1391","line":215,"column":11,"nodeType":"1392","messageId":"1393","endLine":215,"endColumn":67},{"ruleId":"1390","severity":1,"message":"1391","line":220,"column":15,"nodeType":"1392","messageId":"1393","endLine":220,"endColumn":26},{"ruleId":"1390","severity":1,"message":"1398","line":221,"column":15,"nodeType":"1392","messageId":"1393","endLine":221,"endColumn":27},{"ruleId":"1390","severity":1,"message":"1398","line":227,"column":15,"nodeType":"1392","messageId":"1393","endLine":227,"endColumn":27},{"ruleId":"1390","severity":1,"message":"1391","line":233,"column":15,"nodeType":"1392","messageId":"1393","endLine":233,"endColumn":26},{"ruleId":"1390","severity":1,"message":"1398","line":234,"column":15,"nodeType":"1392","messageId":"1393","endLine":234,"endColumn":27},{"ruleId":"1390","severity":1,"message":"1398","line":240,"column":15,"nodeType":"1392","messageId":"1393","endLine":240,"endColumn":27},{"ruleId":"1390","severity":1,"message":"1391","line":246,"column":15,"nodeType":"1392","messageId":"1393","endLine":246,"endColumn":42},{"ruleId":"1390","severity":1,"message":"1398","line":247,"column":15,"nodeType":"1392","messageId":"1393","endLine":247,"endColumn":43},{"ruleId":"1390","severity":1,"message":"1391","line":255,"column":11,"nodeType":"1392","messageId":"1393","endLine":255,"endColumn":67},{"ruleId":"1390","severity":1,"message":"1391","line":261,"column":15,"nodeType":"1392","messageId":"1393","endLine":261,"endColumn":26},{"ruleId":"1390","severity":1,"message":"1398","line":262,"column":15,"nodeType":"1392","messageId":"1393","endLine":262,"endColumn":27},{"ruleId":"1390","severity":1,"message":"1398","line":268,"column":15,"nodeType":"1392","messageId":"1393","endLine":268,"endColumn":27},{"ruleId":"1390","severity":1,"message":"1394","line":317,"column":7,"nodeType":"1392","messageId":"1393","endLine":317,"endColumn":54},{"ruleId":"1390","severity":1,"message":"1395","line":360,"column":11,"nodeType":"1392","messageId":"1393","endLine":360,"endColumn":30},{"ruleId":"1390","severity":1,"message":"1396","line":367,"column":11,"nodeType":"1392","messageId":"1393","endLine":367,"endColumn":29},{"ruleId":"1390","severity":1,"message":"1391","line":370,"column":13,"nodeType":"1392","messageId":"1393","endLine":370,"endColumn":59},{"ruleId":"1399","severity":1,"message":"1400","line":9,"column":1,"nodeType":"1401","endLine":134,"endColumn":2},{"ruleId":"1390","severity":1,"message":"1395","line":78,"column":11,"nodeType":"1392","messageId":"1393","endLine":78,"endColumn":30},{"ruleId":"1390","severity":1,"message":"1391","line":84,"column":9,"nodeType":"1392","messageId":"1393","endLine":84,"endColumn":65},{"ruleId":"1390","severity":1,"message":"1391","line":90,"column":13,"nodeType":"1392","messageId":"1393","endLine":90,"endColumn":63},{"ruleId":"1390","severity":1,"message":"1391","line":96,"column":13,"nodeType":"1392","messageId":"1393","endLine":96,"endColumn":63},{"ruleId":"1390","severity":1,"message":"1402","line":247,"column":9,"nodeType":"1392","messageId":"1393","endLine":247,"endColumn":76},{"ruleId":"1390","severity":1,"message":"1403","line":331,"column":21,"nodeType":"1392","messageId":"1393","endLine":331,"endColumn":72},{"ruleId":"1390","severity":1,"message":"1403","line":334,"column":21,"nodeType":"1392","messageId":"1393","endLine":334,"endColumn":72},{"ruleId":"1390","severity":1,"message":"1403","line":337,"column":21,"nodeType":"1392","messageId":"1393","endLine":337,"endColumn":72},{"ruleId":"1390","severity":1,"message":"1404","line":379,"column":21,"nodeType":"1392","messageId":"1393","endLine":379,"endColumn":68},{"ruleId":"1386","severity":1,"message":"1406","line":15,"column":10,"nodeType":"1388","messageId":"1389","endLine":15,"endColumn":23},{"ruleId":"1386","severity":1,"message":"1407","line":15,"column":25,"nodeType":"1388","messageId":"1389","endLine":15,"endColumn":40},{"ruleId":"1390","severity":1,"message":"1391","line":78,"column":17,"nodeType":"1392","messageId":"1393","endLine":78,"endColumn":67},{"ruleId":"1390","severity":1,"message":"1391","line":84,"column":17,"nodeType":"1392","messageId":"1393","endLine":84,"endColumn":67},{"ruleId":"1390","severity":1,"message":"1391","line":92,"column":17,"nodeType":"1392","messageId":"1393","endLine":92,"endColumn":67},{"ruleId":"1390","severity":1,"message":"1402","line":331,"column":9,"nodeType":"1392","messageId":"1393","endLine":331,"endColumn":96},{"ruleId":"1390","severity":1,"message":"1405","line":353,"column":17,"nodeType":"1392","messageId":"1393","endLine":353,"endColumn":37},{"ruleId":"1386","severity":1,"message":"1408","line":9,"column":8,"nodeType":"1388","messageId":"1389","endLine":9,"endColumn":16},{"ruleId":"1386","severity":1,"message":"1409","line":10,"column":8,"nodeType":"1388","messageId":"1389","endLine":10,"endColumn":16},{"ruleId":"1386","severity":1,"message":"1410","line":11,"column":8,"nodeType":"1388","messageId":"1389","endLine":11,"endColumn":20},{"ruleId":"1386","severity":1,"message":"1411","line":22,"column":8,"nodeType":"1388","messageId":"1389","endLine":22,"endColumn":21},{"ruleId":"1386","severity":1,"message":"1412","line":67,"column":7,"nodeType":"1388","messageId":"1389","endLine":67,"endColumn":16},{"ruleId":"1386","severity":1,"message":"1413","line":167,"column":7,"nodeType":"1388","messageId":"1389","endLine":167,"endColumn":17},{"ruleId":"1386","severity":1,"message":"1414","line":190,"column":10,"nodeType":"1388","messageId":"1389","endLine":190,"endColumn":16},{"ruleId":"1390","severity":1,"message":"1391","line":8,"column":7,"nodeType":"1392","messageId":"1393","endLine":8,"endColumn":18},{"ruleId":"1390","severity":1,"message":"1398","line":31,"column":11,"nodeType":"1392","messageId":"1393","endLine":31,"endColumn":23},{"ruleId":"1390","severity":1,"message":"1398","line":37,"column":11,"nodeType":"1392","messageId":"1393","endLine":37,"endColumn":23},{"ruleId":"1390","severity":1,"message":"1398","line":43,"column":11,"nodeType":"1392","messageId":"1393","endLine":43,"endColumn":23},{"ruleId":"1415","severity":1,"message":"1416","line":25,"column":3,"nodeType":"1417","messageId":"1418","endLine":25,"endColumn":55,"fix":"1433"},{"ruleId":"1415","severity":1,"message":"1420","line":26,"column":3,"nodeType":"1417","messageId":"1418","endLine":26,"endColumn":55,"fix":"1434"},{"ruleId":"1386","severity":1,"message":"1422","line":36,"column":7,"nodeType":"1388","messageId":"1389","endLine":36,"endColumn":12},{"ruleId":"1386","severity":1,"message":"1424","line":2,"column":32,"nodeType":"1388","messageId":"1389","endLine":2,"endColumn":40},{"ruleId":"1390","severity":1,"message":"1398","line":225,"column":17,"nodeType":"1392","messageId":"1393","endLine":225,"endColumn":80},{"ruleId":"1390","severity":1,"message":"1398","line":248,"column":17,"nodeType":"1392","messageId":"1393","endLine":248,"endColumn":80},{"ruleId":"1390","severity":1,"message":"1391","line":68,"column":9,"nodeType":"1392","messageId":"1393","endLine":68,"endColumn":37},{"ruleId":"1390","severity":1,"message":"1402","line":64,"column":11,"nodeType":"1392","messageId":"1393","endLine":64,"endColumn":67},{"ruleId":"1390","severity":1,"message":"1402","line":72,"column":11,"nodeType":"1392","messageId":"1393","endLine":72,"endColumn":67},{"ruleId":"1390","severity":1,"message":"1405","line":83,"column":11,"nodeType":"1392","messageId":"1393","endLine":83,"endColumn":22},{"ruleId":"1390","severity":1,"message":"1398","line":77,"column":13,"nodeType":"1392","messageId":"1393","endLine":77,"endColumn":76},{"ruleId":"1390","severity":1,"message":"1398","line":83,"column":13,"nodeType":"1392","messageId":"1393","endLine":83,"endColumn":39},{"ruleId":"1390","severity":1,"message":"1398","line":89,"column":15,"nodeType":"1392","messageId":"1393","endLine":89,"endColumn":60},{"ruleId":"1390","severity":1,"message":"1398","line":99,"column":13,"nodeType":"1392","messageId":"1393","endLine":99,"endColumn":76},{"ruleId":"1390","severity":1,"message":"1398","line":108,"column":13,"nodeType":"1392","messageId":"1393","endLine":108,"endColumn":76},{"ruleId":"1390","severity":1,"message":"1398","line":113,"column":11,"nodeType":"1392","messageId":"1393","endLine":113,"endColumn":37},{"ruleId":"1399","severity":1,"message":"1400","line":3,"column":1,"nodeType":"1401","endLine":6,"endColumn":2},{"ruleId":"1383","severity":1,"message":"1423","line":13,"column":9,"nodeType":"1385","endLine":13,"endColumn":79},{"ruleId":"1386","severity":1,"message":"1425","line":14,"column":10,"nodeType":"1388","messageId":"1389","endLine":14,"endColumn":22},{"ruleId":"1386","severity":1,"message":"1426","line":18,"column":32,"nodeType":"1388","messageId":"1389","endLine":18,"endColumn":39},{"ruleId":"1390","severity":1,"message":"1404","line":105,"column":9,"nodeType":"1392","messageId":"1393","endLine":105,"endColumn":25},{"ruleId":"1390","severity":1,"message":"1402","line":120,"column":9,"nodeType":"1392","messageId":"1393","endLine":120,"endColumn":22},{"ruleId":"1390","severity":1,"message":"1405","line":72,"column":19,"nodeType":"1392","messageId":"1393","endLine":72,"endColumn":47},{"ruleId":"1390","severity":1,"message":"1405","line":85,"column":19,"nodeType":"1392","messageId":"1393","endLine":85,"endColumn":47},{"ruleId":"1383","severity":1,"message":"1427","line":124,"column":6,"nodeType":"1428","endLine":138,"endColumn":4,"suggestions":"1435"},{"ruleId":"1390","severity":1,"message":"1398","line":30,"column":13,"nodeType":"1392","messageId":"1393","endLine":30,"endColumn":76},{"ruleId":"1390","severity":1,"message":"1398","line":36,"column":13,"nodeType":"1392","messageId":"1393","endLine":36,"endColumn":59},{"ruleId":"1390","severity":1,"message":"1398","line":45,"column":13,"nodeType":"1392","messageId":"1393","endLine":45,"endColumn":76},{"ruleId":"1390","severity":1,"message":"1398","line":55,"column":13,"nodeType":"1392","messageId":"1393","endLine":55,"endColumn":76},{"ruleId":"1390","severity":1,"message":"1398","line":60,"column":11,"nodeType":"1392","messageId":"1393","endLine":60,"endColumn":57},{"ruleId":"1390","severity":1,"message":"1398","line":89,"column":15,"nodeType":"1392","messageId":"1393","endLine":89,"endColumn":78},{"ruleId":"1390","severity":1,"message":"1391","line":170,"column":15,"nodeType":"1392","messageId":"1393","endLine":170,"endColumn":77},{"ruleId":"1390","severity":1,"message":"1391","line":175,"column":19,"nodeType":"1392","messageId":"1393","endLine":181,"endColumn":20},{"ruleId":"1386","severity":1,"message":"1432","line":68,"column":11,"nodeType":"1388","messageId":"1389","endLine":68,"endColumn":16},{"ruleId":"1390","severity":1,"message":"1398","line":108,"column":15,"nodeType":"1392","messageId":"1393","endLine":108,"endColumn":78},{"ruleId":"1390","severity":1,"message":"1398","line":157,"column":11,"nodeType":"1392","messageId":"1393","endLine":157,"endColumn":74},{"ruleId":"1390","severity":1,"message":"1398","line":233,"column":11,"nodeType":"1392","messageId":"1393","endLine":233,"endColumn":74},{"ruleId":"1390","severity":1,"message":"1391","line":250,"column":11,"nodeType":"1392","messageId":"1393","endLine":250,"endColumn":67},{"ruleId":"1390","severity":1,"message":"1398","line":28,"column":15,"nodeType":"1392","messageId":"1393","endLine":28,"endColumn":73},{"ruleId":"1390","severity":1,"message":"1391","line":397,"column":13,"nodeType":"1392","messageId":"1393","endLine":397,"endColumn":24},{"ruleId":"1390","severity":1,"message":"1391","line":405,"column":11,"nodeType":"1392","messageId":"1393","endLine":405,"endColumn":42},{"ruleId":"1383","severity":1,"message":"1430","line":88,"column":9,"nodeType":"1385","endLine":91,"endColumn":4},{"ruleId":"1383","severity":1,"message":"1431","line":88,"column":9,"nodeType":"1385","endLine":91,"endColumn":4},{"ruleId":"1390","severity":1,"message":"1391","line":31,"column":9,"nodeType":"1392","messageId":"1393","endLine":31,"endColumn":20},{"ruleId":"1390","severity":1,"message":"1391","line":34,"column":11,"nodeType":"1392","messageId":"1393","endLine":34,"endColumn":22},{"ruleId":"1390","severity":1,"message":"1391","line":38,"column":9,"nodeType":"1392","messageId":"1393","endLine":38,"endColumn":20},{"ruleId":"1390","severity":1,"message":"1391","line":41,"column":11,"nodeType":"1392","messageId":"1393","endLine":41,"endColumn":22},{"ruleId":"1390","severity":1,"message":"1391","line":45,"column":9,"nodeType":"1392","messageId":"1393","endLine":45,"endColumn":20},{"ruleId":"1390","severity":1,"message":"1391","line":46,"column":9,"nodeType":"1392","messageId":"1393","endLine":46,"endColumn":20},{"ruleId":"1390","severity":1,"message":"1391","line":51,"column":9,"nodeType":"1392","messageId":"1393","endLine":51,"endColumn":20},{"ruleId":"1390","severity":1,"message":"1391","line":56,"column":9,"nodeType":"1392","messageId":"1393","endLine":56,"endColumn":20},{"ruleId":"1390","severity":1,"message":"1391","line":57,"column":9,"nodeType":"1392","messageId":"1393","endLine":57,"endColumn":20},"react-hooks/exhaustive-deps","The 'allTransactions' logical expression could make the dependencies of useEffect Hook (at line 64) change on every render. Move it inside the useEffect callback. Alternatively, wrap the initialization of 'allTransactions' in its own useMemo() Hook.","VariableDeclarator","@typescript-eslint/no-unused-vars","'transparentize' is defined but never used.","Identifier","unusedVar","react/jsx-pascal-case","Imported JSX component body must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","Imported JSX component darkGray must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component mediumHeader must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component largeHeader must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component blue must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component black must be in PascalCase or SCREAMING_SNAKE_CASE","import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","Imported JSX component italic must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component link must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component subHeader must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component main must be in PascalCase or SCREAMING_SNAKE_CASE","'ButtonPrimary' is defined but never used.","'ButtonSecondary' is defined but never used.","'LogoDark' is defined but never used.","'Wordmark' is defined but never used.","'WordmarkDark' is defined but never used.","'VersionSwitch' is defined but never used.","'TitleText' is assigned a value but never used.","'MobileMenu' is assigned a value but never used.","'isDark' is assigned a value but never used.","no-useless-computed-key","Unnecessarily computed property [\"0x50a6505C9B5F6837CA69724F204Ffe21B2ca7806\"] found.","Property","unnecessarilyComputedProperty",{"range":"1436","text":"1437"},"Unnecessarily computed property [\"0xcbB27cE87aBef0Fda2049148Aa4B4820E6db40fc\"] found.",{"range":"1438","text":"1439"},"'Emoji' is assigned a value but never used.","The 'bases' conditional could make the dependencies of useMemo Hook (at line 26) change on every render. Move it inside the useMemo callback. Alternatively, wrap the initialization of 'bases' in its own useMemo() Hook.","'PieChart' is defined but never used.","'ExternalLink' is defined but never used.","'AutoRow' is defined but never used.","React Hook useMemo has a missing dependency: 't'. Either include it or remove the dependency array.","ArrayExpression",["1440"],"The 'parsedAmounts' object makes the dependencies of useMemo Hook (at line 112) change on every render. To fix this, wrap the initialization of 'parsedAmounts' in its own useMemo() Hook.","The 'parsedAmounts' object makes the dependencies of useMemo Hook (at line 126) change on every render. To fix this, wrap the initialization of 'parsedAmounts' in its own useMemo() Hook.","'Value' is defined but never used.",{"range":"1441","text":"1437"},{"range":"1442","text":"1439"},["1443"],[937,983],"\"0x50a6505C9B5F6837CA69724F204Ffe21B2ca7806\"",[993,1039],"\"0xcbB27cE87aBef0Fda2049148Aa4B4820E6db40fc\"",{"desc":"1444","fix":"1445"},[937,983],[993,1039],{"desc":"1444","fix":"1446"},"Update the dependencies array to be: [account, addToken, allTokenBalances, allTokens, chainId, onTokenSelect, otherSelectedText, otherToken, removeToken, selectedToken, showSendWithSwap, t, theme.primary1, tokens]",{"range":"1447","text":"1448"},{"range":"1449","text":"1448"},[4372,4601],"[account, addToken, allTokenBalances, allTokens, chainId, onTokenSelect, otherSelectedText, otherToken, removeToken, selectedToken, showSendWithSwap, t, theme.primary1, tokens]",[4372,4601]]